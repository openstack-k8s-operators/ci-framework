---
- name: Add Ceph replication target hosts to one group
  hosts: "{{ cifmw_target_hook_host | default('localhost') }}"
  gather_facts: false
  tasks:
    # Load Ceph client variables to get FSIDs for each cluster
    - name: Find all ceph variable files
      register: _ceph_vars_files
      ansible.builtin.find:
        paths: "/tmp"
        patterns: "{{ cifmw_ceph_client_pattern | default('ceph_client_az*.yml') }}"
        recurse: false

    - name: Load all ceph vars from files
      loop: "{{ _ceph_vars_files.files | map(attribute='path') | list }}"
      register: _ceph_vars
      ansible.builtin.include_vars:
        file: "{{ item }}"

    - name: Combine ceph variables into a list of dictionaries
      loop: "{{ _ceph_vars.results }}"
      ansible.builtin.set_fact:
        _ceph_vars_list: "{{ _ceph_vars_list | default([]) | union([item.ansible_facts]) }}"

    - name: Get FSID for primary cluster
      ansible.builtin.set_fact:
        primary_fsid: "{{ _ceph_vars_list | selectattr('cifmw_ceph_client_cluster', 'equalto', cifmw_replication_primary_cluster) | map(attribute='cifmw_ceph_client_fsid') | first }}"

    - name: Get FSID for secondary cluster
      ansible.builtin.set_fact:
        secondary_fsid: "{{ _ceph_vars_list | selectattr('cifmw_ceph_client_cluster', 'equalto', cifmw_replication_secondary_cluster) | map(attribute='cifmw_ceph_client_fsid') | first }}"

    - name: Add primary host to ceph_replication_targets
      ansible.builtin.add_host:
        name: "{{ groups[cifmw_replication_primary_group] | first }}"
        groups: ceph_replication_targets
        site_role: primary
        ceph_fsid: "{{ primary_fsid }}"

    - name: Add secondary host to ceph_replication_targets
      ansible.builtin.add_host:
        name: "{{ groups[cifmw_replication_secondary_group] | first }}"
        groups: ceph_replication_targets
        site_role: secondary
        ceph_fsid: "{{ secondary_fsid }}"

- name: Enable mirroring and setup peer between clusters
  hosts: ceph_replication_targets
  become: true
  vars:
    # Pool and client configuration
    replication_pool: "{{ cifmw_replication_pool | default('volumes') }}"
    client_name: "{{ cifmw_replication_client_name | default('openstack') }}"
    primary_cluster_name: "{{ cifmw_replication_primary_cluster }}"
    secondary_cluster_name: "{{ cifmw_replication_secondary_cluster }}"

    # Derived paths
    primary_conf_path: "/etc/ceph/{{ primary_cluster_name }}.conf"
    primary_keyring_path: "/etc/ceph/{{ primary_cluster_name }}.client.{{ client_name }}.keyring"
    secondary_conf_path: "/etc/ceph/{{ secondary_cluster_name }}.conf"
    secondary_keyring_path: "/etc/ceph/{{ secondary_cluster_name }}.client.{{ client_name }}.keyring"
  tasks:
    # Add validation that cephadm is available
    - name: Verify cephadm is available
      ansible.builtin.command:
        cmd: which cephadm
      register: cephadm_check
      failed_when: false
      changed_when: false

    - name: Fail if cephadm not found
      ansible.builtin.fail:
        msg: "cephadm command not found on {{ inventory_hostname }}"
      when: cephadm_check.rc != 0

    - name: Enable image mirroring
      ansible.builtin.command:
        cmd: cephadm shell -- rbd mirror pool enable {{ replication_pool }} image
      register: enable_mirror_result
      failed_when: enable_mirror_result.rc != 0
      changed_when: "'already enabled' not in enable_mirror_result.stderr"

    - name: Create bootstrap token (only on primary)
      ansible.builtin.shell:
        cmd: cephadm shell -- sh -c "rbd mirror pool peer bootstrap create --site-name {{ ceph_fsid }} {{ replication_pool }}" > /tmp/bootstrap_token_site
      when: site_role == "primary"
      register: create_token_result

    - name: Verify token file was created on primary
      ansible.builtin.stat:
        path: "/tmp/bootstrap_token_site"
      register: token_file_stat
      when: site_role == "primary"

    - name: Fail if token creation failed
      ansible.builtin.fail:
        msg: "Bootstrap token file was not created successfully"
      when:
        - site_role == "primary"
        - not token_file_stat.stat.exists

    - name: Fetch token from primary
      ansible.builtin.fetch:
        src: "/tmp/bootstrap_token_site"
        dest: "/tmp/rbd_mirror_bootstrap_token"
        flat: true
      when: site_role == "primary"

    - name: Verify token file exists on controller (debug)
      ansible.builtin.stat:
        path: "/tmp/rbd_mirror_bootstrap_token"
      register: controller_token_stat
      delegate_to: localhost
      when: site_role == "secondary"

    - name: Fail if token not available on controller
      ansible.builtin.fail:
        msg: "Bootstrap token file not found on controller at /tmp/rbd_mirror_bootstrap_token"
      when:
        - site_role == "secondary"
        - not controller_token_stat.stat.exists

    - name: Copy token to secondary
      ansible.builtin.copy:
        src: "/tmp/rbd_mirror_bootstrap_token"
        dest: "/tmp/bootstrap_token_site"
        mode: "0600"
        owner: "root"
        group: "root"
      when: site_role == "secondary"

    - name: Verify token file was copied to secondary
      ansible.builtin.stat:
        path: "/tmp/bootstrap_token_site"
      register: secondary_token_stat
      when: site_role == "secondary"

    - name: Fail if token copy failed
      ansible.builtin.fail:
        msg: "Bootstrap token file was not copied to secondary at /tmp/bootstrap_token_site"
      when:
        - site_role == "secondary"
        - not secondary_token_stat.stat.exists

    - name: Import token (only on secondary) - using container path
      ansible.builtin.command:
        cmd: cephadm shell -- rbd mirror pool peer bootstrap import --site-name {{ ceph_fsid }} {{ replication_pool }} /rootfs/tmp/bootstrap_token_site
      when: site_role == "secondary"
      register: import_token_result
      failed_when: import_token_result.rc != 0

    # Copy configuration files from secondary to primary
    - name: Fetch secondary cluster conf from secondary
      ansible.builtin.fetch:
        src: "{{ secondary_conf_path }}"
        dest: "/tmp/{{ secondary_cluster_name }}.conf"
        flat: true
      when: site_role == "secondary"

    - name: Fetch secondary cluster keyring from secondary
      ansible.builtin.fetch:
        src: "{{ secondary_keyring_path }}"
        dest: "/tmp/{{ secondary_cluster_name }}.client.{{ client_name }}.keyring"
        flat: true
      when: site_role == "secondary"

    - name: Copy secondary cluster conf to primary
      ansible.builtin.copy:
        src: "/tmp/{{ secondary_cluster_name }}.conf"
        dest: "{{ secondary_conf_path }}"
        mode: "0644"
        owner: "root"
        group: "root"
      when: site_role == "primary"

    - name: Copy secondary cluster keyring to primary
      ansible.builtin.copy:
        src: "/tmp/{{ secondary_cluster_name }}.client.{{ client_name }}.keyring"
        dest: "{{ secondary_keyring_path }}"
        mode: "0600"
        owner: "ceph"
        group: "ceph"
      when: site_role == "primary"

    - name: Add client configuration to secondary cluster conf on primary
      ansible.builtin.blockinfile:
        path: "{{ secondary_conf_path }}"
        block: |
          [client.{{ client_name }}]
          keyring = {{ secondary_keyring_path }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK - client.{{ client_name }}"
        create: false
      when: site_role == "primary"

    # Cleanup files
    - name: Clean up temporary secondary cluster conf on controller
      ansible.builtin.file:
        path: "/tmp/{{ secondary_cluster_name }}.conf"
        state: absent
      delegate_to: localhost
      run_once: true

    - name: Clean up temporary secondary cluster keyring on controller
      ansible.builtin.file:
        path: "/tmp/{{ secondary_cluster_name }}.client.{{ client_name }}.keyring"
        state: absent
      delegate_to: localhost
      run_once: true

    - name: Clean up token file on remote hosts
      ansible.builtin.file:
        path: "/tmp/bootstrap_token_site"
        state: absent
      when: site_role in ['primary', 'secondary']

    - name: Clean up controller file
      ansible.builtin.file:
        path: "/tmp/rbd_mirror_bootstrap_token"
        state: absent
      delegate_to: localhost
      run_once: true
