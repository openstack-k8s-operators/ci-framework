---
- name: Manage/generate unique ID
  hosts: "{{ cifmw_target_host | default('localhost') }}"
  gather_facts: true
  vars:
    _unique_id_file: >-
      {{ ansible_user_dir }}/ci-framework-data/artifacts/run-id
  tasks:
    - name: Ensure needed directory tree is present on local node
      ansible.builtin.file:
        mode: "0755"
        path: "{{ _unique_id_file | dirname }}"
        state: directory

    - name: Check if we have a unique ID already
      register: _unique_id_stat
      ansible.builtin.stat:
        path: "{{ _unique_id_file }}"

    # Here, we want to allow the user to provide their own run ID,
    # or to fallback on a generated one.
    # In any cases, we want to get the file in place with the correct value.
    # The jinja[invalid] is triggered because ansible-lint doesn't seem to find
    # the community.general.random_string lookup, and doesn't mock it...
    - name: Generate current job unique ID if needed  # noqa: jinja[invalid]
      when:
        - (not _unique_id_stat.stat.exists and cifmw_run_id is undefined)
          or cifmw_run_id is defined
      vars:
        _unique_id: >-
          {{
            lookup('community.general.random_string',
                   special=false, upper=false)
           }}
      ansible.builtin.copy:
        dest: "{{ _unique_id_file }}"
        content: "{{ cifmw_run_id | default(_unique_id) | lower }}"

    # Since the user might pass their own run ID, we can just consume it.
    # If, for a subsequent run, the user doesn't pass the run ID, we will
    # just get it from the file and consume it.
    - name: Load existing run ID
      when:
        - cifmw_run_id is undefined
      block:
        - name: Slurp unique id file if needed
          register: _unique_id_content
          ansible.builtin.slurp:
            path: "{{ _unique_id_file }}"

        - name: Expose cifmw_run_id if needed
          ansible.builtin.set_fact:
            cifmw_run_id: "{{ _unique_id_content.content | b64decode }}"

- name: Reproducer prepare play
  hosts: "{{ cifmw_target_host | default('localhost') }}"
  gather_facts: true
  pre_tasks:
    - name: Inherit from parent scenarios if needed
      ansible.builtin.include_tasks:
        file: "ci/playbooks/tasks/inherit_parent_scenario.yml"

    - name: Include common architecture parameter file
      when:
        - cifmw_architecture_scenario is defined
        - cifmw_architecture_scenario | length > 0
      ansible.builtin.include_vars:
        file: "scenarios/reproducers/va-common.yml"

    - name: Run reproducer validations
      ansible.builtin.import_role:
        name: reproducer
        tasks_from: validations.yml

    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - "distribution"

    - name: Tweak dnf configuration
      become: true
      community.general.ini_file:
        no_extra_spaces: true
        option: "{{ config.option }}"
        path: "/etc/dnf/dnf.conf"
        section: "{{ config.section | default('main') }}"
        state: "{{ config.state | default(omit) }}"
        value: "{{ config.value | default(omit) }}"
        mode: "0644"
      loop: "{{ cifmw_reproducer_dnf_tweaks }}"
      loop_control:
        label: "{{ config.option }}"
        loop_var: 'config'

    - name: Install custom CA if needed
      ansible.builtin.import_role:
        name: install_ca

    - name: Setup repositories via rhos-release if needed
      tags:
        - packages
      when:
        - ansible_facts['distribution'] == 'RedHat'
        - cifmw_reproducer_hp_rhos_release | bool
      vars:
        cifmw_repo_setup_output: /etc/yum.repos.d
        cifmw_repo_setup_rhos_release_args: "rhel"
      ansible.builtin.import_role:
        name: repo_setup
        tasks_from: rhos_release.yml

  roles:
    - role: ci_setup

- name: Prepare switches
  vars:
    cifmw_configure_switches: "{{ 'switches' in groups }}"
  ansible.builtin.import_playbook: playbooks/switches_config.yml

- name: Reproducer run
  hosts: "{{ cifmw_target_host | default('localhost') }}"
  gather_facts: false
  roles:
    - role: reproducer
  post_tasks:
    - name: Allow traffic from OSP VMs to OSP API (needed for shiftstack)
      become: true
      when: cifmw_allow_vms_to_reach_osp_api | default ('false') | bool
      ansible.builtin.command: # noqa: command-instead-of-module
        cmd: iptables -I LIBVIRT_FWI 1 -o ocpbm -j ACCEPT

    - name: Run deployment if instructed to
      when:
        - cifmw_deploy_architecture | default(false) | bool
      no_log: "{{ cifmw_nolog | default(true) | bool }}"
      async: "{{ 7200 + cifmw_test_operator_timeout | default(3600) }}"  # 2h should be enough to deploy EDPM and rest for tests.
      poll: 20
      delegate_to: controller-0
      ansible.builtin.command:
        cmd: "/home/zuul/deploy-architecture.sh"
