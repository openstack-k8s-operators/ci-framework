---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: "Ensure existance for {{ cifmw_set_openstack_containers_basedir }}"
  ansible.builtin.file:
    path: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    state: directory
    mode: "0755"

- name: Set container tag from dlrn md5 hash file
  when:
    - cifmw_set_openstack_containers_tag_from_md5 | bool
  block:
    - name: Get the md5 hash from hash file
      ansible.builtin.slurp:
        src: "{{ cifmw_set_openstack_containers_dlrn_md5_path }}"
      register: dlrn_md5

    - name: Set container tag
      ansible.builtin.set_fact:
        cifmw_set_openstack_containers_tag: "{{ dlrn_md5['content'] | b64decode | trim }}"
        cacheable: true

- name: Set common facts for the role
  ansible.builtin.set_fact:
    operator_name: "{{ cifmw_set_openstack_containers_operator_name }}"
    cifmw_set_openstack_containers_common_env: >-
      {{
        cifmw_install_yamls_environment |
        combine({'PATH': cifmw_path}) |
        combine(cifmw_set_openstack_containers_extra_vars | default({}))
      }}
    cacheable: true

- name: Get all openstack pods
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  cifmw.general.ci_script:
    output_dir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    script: "oc get pods -n {{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }} -o name"
  register: operator_pod

- name: List all pods
  ansible.builtin.debug:
    var: operator_pod

- name: Get the operator pod name
  ansible.builtin.set_fact:
    operator_pod: "{{ '\n'.join(operator_pod.stdout_lines) |regex_search('^pod/' ~ operator_name ~ '-operator-controller-manager-.*$', multiline=True) }}"

- name: List all pods
  ansible.builtin.debug:
    var: operator_pod

- name: Get meta operator environment variable
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  cifmw.general.ci_script:
    output_dir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    script: "oc set env {{ operator_pod }} -n {{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }} --list"
  register: containers_env_list

- name: Generate update_env_vars.sh script
  ansible.builtin.template:
    src: "update_env_vars.sh.j2"
    dest: "{{ cifmw_set_openstack_containers_basedir }}/artifacts/update_env_vars.sh"
    mode: "0755"

- name: Run update_env_vars.sh script
  cifmw.general.ci_script:
    output_dir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    script: "{{ cifmw_set_openstack_containers_basedir }}/artifacts/update_env_vars.sh"

- name: Wait for reinstallation of meta operator
  vars:
    make_openstack_wait_env: "{{ cifmw_set_openstack_containers_common_env }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_openstack_wait'
  when:
    - operator_name == 'openstack'
    - not cifmw_architecture_scenario is defined

# Needed when the deployment wasn't installed using install_yaml.
- name: Wait for reinstallation of meta operator with arch scenario
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      oc get csv -l operators.coreos.com/openstack-operator.openstack-operators \
      --namespace={{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }} \
      --no-headers=true | grep -i "succeeded"
  register: operator_status
  until: operator_status.rc == 0
  changed_when: false
  retries: 600
  delay: 1
  when:
    - operator_name == 'openstack'
    - cifmw_architecture_scenario is defined

- name: Wait for reinstallation of operator
  vars:
    make_wait_env: "{{ cifmw_set_openstack_containers_common_env }}"
    make_wait_params:
      OPERATOR_NAME: "{{ operator_name }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_wait'

- name: Retrieve operator pods
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  cifmw.general.ci_script:
    output_dir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    script: "oc get pods -n {{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }} -o name"
  register: operator_pod_name

- name: Get the operator pod name
  ansible.builtin.set_fact:
    operator_pod_name: "{{ '\n'.join(operator_pod_name.stdout_lines) |
      regex_search('^pod/' ~ operator_name ~ '-operator-controller-manager-.*$', multiline=True)
      }}"

- name: Print the operator pod name
  ansible.builtin.debug:
    var: operator_pod_name

- name: Get operator environment variable after update
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  cifmw.general.ci_script:
    output_dir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    script: "oc set env {{ operator_pod_name }} -n {{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }} --list > {{ cifmw_set_openstack_containers_openstack_final_env }}"
    chdir: "{{ cifmw_set_openstack_containers_basedir }}/artifacts"
    creates: "{{ cifmw_set_openstack_containers_openstack_final_env }}"
