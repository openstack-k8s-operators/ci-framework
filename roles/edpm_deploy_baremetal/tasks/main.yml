---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set install_yamls Makefile environment variables
  vars:
    operators_build_output: "{{ (cifmw_operator_build_output | default({'operators':{}})).operators }}"
  ansible.builtin.set_fact:
    cifmw_edpm_deploy_baremetal_common_env: "{{ cifmw_install_yamls_environment | combine({'PATH': cifmw_path}) }}"
    cifmw_edpm_deploy_baremetal_make_openstack_env: |
      {% if cifmw_operator_build_meta_name is defined and cifmw_operator_build_meta_name in operators_build_output %}
      OPENSTACK_IMG: {{ operators_build_output[cifmw_operator_build_meta_name].image_catalog }}
      OPENSTACK_BRANCH: ""
      GIT_CLONE_OPTS: "-l"
      OPENSTACK_REPO: {{ operators_build_output[cifmw_operator_build_meta_name].git_src_dir }}
      {% endif %}
    cifmw_edpm_deploy_baremetal_operators_build_output: "{{ operators_build_output }}"

- name: Set facts for baremetal UEFI image url
  ansible.builtin.set_fact:
    cifmw_set_openstack_containers_overrides:
      RELATED_IMAGE_OS_CONTAINER_IMAGE_URL_DEFAULT: "{{ cifmw_build_images_output['images']['edpm-hardened-uefi']['image'] }}"
    cacheable: true
  when: cifmw_build_images_output is defined

- name: Patch baremetal CSV to override the uefi image
  when:
    - not cifmw_edpm_deploy_baremetal_dry_run
    - (cifmw_edpm_deploy_baremetal_update_os_containers|bool) or (cifmw_build_images_output is defined)
  vars:
    cifmw_set_openstack_containers_operator_name: openstack-baremetal
  ansible.builtin.include_role:
    name: set_openstack_containers

- name: Create virtual baremetal
  when: cifmw_edpm_deploy_baremetal_create_vms | bool
  vars:
    make_edpm_baremetal_compute_env: "{{ cifmw_edpm_deploy_baremetal_common_env |
      combine(cifmw_edpm_deploy_baremetal_make_openstack_env | from_yaml)}}"
    make_edpm_baremetal_compute_dryrun: "{{ cifmw_edpm_deploy_baremetal_dry_run }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_baremetal_compute'

- name: Deploy EDPM with baremetal
  vars:
    make_edpm_deploy_baremetal_env: "{{ cifmw_edpm_deploy_baremetal_common_env |
      combine(cifmw_edpm_deploy_baremetal_make_openstack_env | from_yaml)}}"
    make_edpm_deploy_baremetal_dryrun: "{{ cifmw_edpm_deploy_baremetal_dry_run }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_edpm_deploy_baremetal'

- name: Wait for virtual computes to be ready
  when:
    - cifmw_edpm_deploy_baremetal_create_vms | bool
    - not cifmw_edpm_deploy_baremetal_dry_run
  block:
    - name: Wait for Ironic to be ready
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc wait pod -l name=ironic -n baremetal-operator-system --for=condition=Ready
          --timeout={{ cifmw_edpm_deploy_baremetal_wait_ironic_timeout_mins }}m

    - name: Wait for OpenStack Provision Server pod to be created
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc get po -l osp-provisionserver/name=openstack-edpm-ipam-provisionserver
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }} -o name
      register: cifmw_edpm_deploy_baremetal_provisionserver_pod_output
      retries: "{{ cifmw_edpm_deploy_baremetal_wait_provisionserver_retries }}"
      delay: 10
      until: cifmw_edpm_deploy_baremetal_provisionserver_pod_output.stdout != ''

    - name: Wait for OpenStack Provision Server deployment to be available
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc wait deployment openstack-edpm-ipam-provisionserver-openstackprovisionserver
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --for condition=Available
          --timeout={{ cifmw_edpm_deploy_baremetal_wait_provisionserver_timeout_mins }}m

    - name: Wait for baremetal nodes to reach 'provisioned' state
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc wait bmh --all
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --for=jsonpath='{.status.provisioning.state}'=provisioned
          --timeout={{ cifmw_edpm_deploy_baremetal_wait_bmh_timeout_mins }}m

    - name: Register the list of compute nodes
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: oc get bmh -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
      register: compute_nodes_output

    - name: Print the list of compute nodes
      ansible.builtin.debug:
        var: compute_nodes_output.stdout_lines

- name: Patch OpenStackDataPlaneNodeSet to add repo-setup-downstream service
  when:
    - cifmw_edpm_deploy_baremetal_repo_setup_override
    - cifmw_edpm_deploy_baremetal_create_vms | bool
    - not cifmw_edpm_deploy_baremetal_dry_run
  block:
    # This file will be created in downstream job's pre-playbook
    - name: Create repo-setup-downstream OpenStackDataPlaneService
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc apply -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          -f "{{ cifmw_installyamls_repos }}/devsetup/edpm/services/dataplane_v1beta1_openstackdataplaneservice_reposetup_downstream.yaml"

    # to-do: We can drop this step once we drop dev-preview#1 jobs in downstream
    # This is added because install_yamls is tagged and we don't
    # have repo-setup service in OpenStackDataPlane in v0.1.0 tag
    - name: Get list of services defined under OpenStackDataPlaneNodeSet resource
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc get openstackdataplanenodeset openstack-edpm-ipam
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          -o jsonpath='{.spec.services[*]}'
      register: services_list
      changed_when: false
      ignore_errors: true  # noqa: ignore-errors

    # to-do:  We can drop this step once we drop dev-preview#1 jobs in downstream
    - name: Patch OpenStackDataPlaneNodeSet resource to add "repo-setup-downstream" service
      when: "'repo-setup' not in services_list.stdout"
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc patch openstackdataplanenodeset openstack-edpm-ipam
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --type json
          -p '[{"op": "add", "path": "/spec/services/0", "value": "repo-setup-downstream"}]'

    # to-do: We can drop the when condition once we drop dev-preview#1 jobs in downstream
    - name: Patch OpenStackDataPlaneNodeSet resource to replace "repo-setup" with "repo-setup-downstream" service
      when: "'repo-setup' in services_list.stdout"
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc patch openstackdataplanenodeset openstack-edpm-ipam
          -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --type json
          -p '[{"op": "replace", "path": "/spec/services/0", "value": "repo-setup-downstream"}]'

- name: Patch OpenStackDataPlaneNodeSet resource to include content provider insecure registry
  when: content_provider_registry_ip is defined
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command:
    cmd: >-
      oc patch openstackdataplanenodeset openstack-edpm-ipam
      -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
      --type json
      -p '[{"op": "add",
            "path": "/spec/nodeTemplate/ansible/ansibleVars/edpm_container_registry_insecure_registries",
            "value": [{{ content_provider_registry_ip }}:5001]}]'

- name: Wait for OpenStackDataPlaneNodeSet to be Ready
  when: not cifmw_edpm_deploy_baremetal_dry_run
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command:
    cmd: >-
      oc wait --timeout={{ cifmw_edpm_deploy_baremetal_wait_dataplane_timeout_mins }}m
      --for=condition=Ready openstackdataplanenodeset openstack-edpm-ipam
      -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}

- name: Run nova-manage discover_hosts to ensure compute nodes are mapped
  when: not cifmw_edpm_deploy_baremetal_dry_run
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command:
    cmd: >-
      oc rsh
      -n {{ cifmw_install_yamls_defaults['NAMESPACE'] }}
      nova-cell0-conductor-0 nova-manage cell_v2 discover_hosts --verbose
