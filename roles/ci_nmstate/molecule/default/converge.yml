---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Add crc to the inventory
  hosts: instance
  gather_facts: true
  vars:
    cifmw_molecule_ci_nmstate_crc_mac: "{{ '52:54:00' | community.general.random_mac(seed='crc') }}"
  tasks:
    - name: Add crc hostname with it's IP to /etc/hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "192.168.130.11 crc"

    - name: Check if new ssh keypair exists
      ansible.builtin.include_role:
        name: recognize_ssh_keypair

    - name: Add the crc host dynamically
      ansible.builtin.add_host:
        name: crc
        ansible_ssh_private_key_file: "{{ ansible_user_dir }}/.crc/machines/crc/{{ crc_ssh_keypair }}"
        ansible_ssh_user: core
        cifmw_molecule_ci_nmstate_crc_mac: "{{ cifmw_molecule_ci_nmstate_crc_mac }}"

    # Hot plugging a single interface is possible, but more interfaces will face a PCI limitation.
    - name: Add a dummy ethernet interface to target the crc NMstate
      become: true
      ansible.builtin.command: >-
        virsh attach-interface --type bridge --source crc
        --model virtio crc --mac {{ cifmw_molecule_ci_nmstate_crc_mac }}

- name: Get CRC facts
  hosts: crc
  gather_facts: false
  tasks:
    - name: Fetch crc network facts
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - network
          - dns
          - pkg_mgr

- name: Converge
  hosts: instance
  gather_facts: false
  vars:
    cifmw_path: "{{ ansible_user_dir }}/.crc/bin:{{ ansible_user_dir }}/.crc/bin/oc:{{ ansible_user_dir }}/bin:{{ ansible_env.PATH }}"
    cifmw_openshift_kubeconfig: "{{ ansible_user_dir }}/.crc/machines/crc/kubeconfig"
    cifmw_ci_nmstate_namespace: openshift-nmstate
  tasks:

    - name: Set common molecule test facts
      ansible.builtin.set_fact:
        _ci_nmstate_molecule_instance_target_mtu: "{{ (ansible_default_ipv4.mtu - 50) | int }}"

    # device (eth0): interface index 69 renamed iface from 'eth0' to 'enp6s0'
    - name: Get NetworkManager logs - before networking mapper
      ansible.builtin.shell: >
        mkdir -p {{ ansible_user_dir }}/ci-framework-data/logs;
        ssh -i ~/.crc/machines/crc/id_ed25519
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        core@192.168.130.11 journalctl -u NetworkManager > {{ ansible_user_dir }}/ci-framework-data/logs/NetworkManager-before-mapper.log
      ignore_errors: true

    - name: Prepare the Networking Env Definition for ci_nmstate role
      vars:
        cifmw_networking_definition:
          networks:
            default:
              network: >-
                {{
                  ansible_default_ipv4.network +
                  '/' + hostvars.crc.ansible_default_ipv4.prefix
                }}
              gateway: "{{ ansible_default_ipv4.gateway }}"
              dns:
                - 1.1.1.1
                - 9.9.9.9
              mtu: "{{ _ci_nmstate_molecule_instance_target_mtu }}" # Set a non-default MTU to test
            testing-untagged:
              network: "172.17.20.0/24"
              dns: "{{ hostvars.crc.ansible_dns.nameservers }}"
              mtu: "{{ hostvars.crc.ansible_default_ipv4.mtu | int }}"
            testing-vlan:
              network: "172.17.21.0/24"
              vlan: 21
          instances:
            crc:
              networks:
                testing-untagged:
                  ip: "172.17.20.5"
                testing-vlan:
                  ip: "172.17.21.5"
                  trunk-parent: testing-untagged
            instance:
              networks:
                default:
                  ip: "{{ ansible_default_ipv4.address }}"
        cifmw_networking_mapper_ifaces_info:
          crc:
            - mac: "{{ hostvars.crc.cifmw_molecule_ci_nmstate_crc_mac }}"
              network: "testing-untagged"
          instance:
            - mac: "{{ ansible_default_ipv4.macaddress }}"
              network: "default"
      ansible.builtin.include_role:
        name: "networking_mapper"

    - name: Configure nmstate interfaces
      block:
        - name: Get NetworkManager logs - before nmstate
          ansible.builtin.shell: >
            mkdir -p {{ ansible_user_dir }}/ci-framework-data/logs;
            ssh -i ~/.crc/machines/crc/id_ed25519
            -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null
            core@192.168.130.11 journalctl -u NetworkManager > {{ ansible_user_dir }}/ci-framework-data/logs/NetworkManager-before-nmstate.log
          ignore_errors: true

        - name: Call the role under test
          ansible.builtin.include_role:
            name: "ci_nmstate"
      rescue:
        - name: Get NetworkManager logs - after nmstate
          ansible.builtin.shell: >
            mkdir -p {{ ansible_user_dir }}/ci-framework-data/logs;
            ssh -i ~/.crc/machines/crc/id_ed25519
            -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null
            core@192.168.130.11 journalctl -u NetworkManager > {{ ansible_user_dir }}/ci-framework-data/logs/NetworkManager-after-nmstate.log
          ignore_errors: true

        - name: Get all pods state
          ansible.builtin.command: |
            oc get pods --all-namespaces
          environment:
            PATH: "{{ ansible_user_dir }}/.crc/bin:{{ ansible_user_dir }}/.crc/bin/oc:{{ ansible_user_dir }}/bin:{{ ansible_env.PATH }}"
          changed_when: false
          failed_when: false

        - name: Get NodeNetworkConfigurationPolicy
          ansible.builtin.command: |
            oc describe NodeNetworkConfigurationPolicy
          environment:
            PATH: "{{ ansible_user_dir }}/.crc/bin:{{ ansible_user_dir }}/.crc/bin/oc:{{ ansible_user_dir }}/bin:{{ ansible_env.PATH }}"
          changed_when: false
          failed_when: false

        - name: Create missing enp6s0
          ansible.builtin.shell: >
            set -o pipefail;
            oc -n openshift-nmstate exec
            -i $(oc -n openshift-nmstate get pod -l component=kubernetes-nmstate-handler -o name | head -n 1)
            -- ip link add enp6s0 type veth
          ignore_errors: true

        - name: Restart handler daemonset
          ansible.builtin.shell: >
            oc -n openshift-nmstate rollout restart daemonset.apps/nmstate-handler

        - name: Wait for handler to be up and ready
          ansible.builtin.shell: >
            oc -n openshift-nmstate wait pod -l component=kubernetes-nmstate-handler --for=condition=Ready


    # Verify the run
    - name: Fetch files stat results
      ansible.builtin.stat:
        path: >-
          {{
            [
              ansible_user_dir,
              'ci-framework-data',
              'artifacts',
              item
            ] | ansible.builtin.path_join
          }}
      register: _ci_nmstate_molecule_stat_out
      loop:
        - nmstate/instance-state.yaml
        - nmstate/instance-final-state.yaml
        - manifests/nmstate/nmstate-operatorgroup-olm.yaml
        - manifests/nmstate/nmstate-subscription-olm.yaml
        - manifests/nmstate/nmstate-nmstate-olm.yaml
        - manifests/nmstate/crc-nncp.yaml

    - name: Assert that all expected files exist
      ansible.builtin.assert:
        that: >-
          _ci_nmstate_molecule_stat_out.results |
          map(attribute="stat.exists") |
          select("equalto", true) |
          length == (_ci_nmstate_molecule_stat_out.results | length)

    - name: Fetch all files content
      ansible.builtin.slurp:
        path: "{{ item }}"
      register: _ci_nmstate_molecule_slurp_out
      loop: >-
        {{
          _ci_nmstate_molecule_stat_out.results |
          map(attribute="stat.path")
        }}

    - name: Assert that all files contains proper YAML data
      ansible.builtin.assert:
        that: "item.content | b64decode | from_yaml | length > 0"
      loop: "{{ _ci_nmstate_molecule_slurp_out.results }}"
      loop_control:
        label: "{{ item.source }}"

    - name: Wait for nsmtate nncp to be ready
      kubernetes.core.k8s_info:
        api_version: nmstate.io/v1
        kind: NodeNetworkConfigurationPolicy
        kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
        name: "{{ hostvars.crc.ansible_hostname }}"
        wait: true
        wait_sleep: 10
        wait_timeout: 120
      register: _ci_nmstate_molecule_nncp_out
      failed_when: >-
        (_ci_nmstate_molecule_nncp_out is not defined) or
        (_ci_nmstate_molecule_nncp_out is failed) or
        (_ci_nmstate_molecule_nncp_out.resources | length == 0) or
        (_ci_nmstate_molecule_nncp_out.resources[0].status.conditions is not defined) or
        (
          _ci_nmstate_molecule_nncp_out.resources[0].status.conditions |
          selectattr("type", "equalto", "Available") |
          selectattr("status", "equalto", "True") | length == 0
        )

    - name: Fetch unmanaged node link statuses
      ansible.builtin.command:
        cmd: "ip -j link"
      register: _ci_nmstate_molecule_links_out

    - name: Check that the unmanaged node MTU change was performed
      vars:
        iface_link_mtu: >-
          {{
            _ci_nmstate_molecule_links_out.stdout |
            from_json |
            selectattr("ifname", "equalto", ansible_default_ipv4.interface) |
            map(attribute="mtu") | first
          }}
      ansible.builtin.assert:
        that: iface_link_mtu == _ci_nmstate_molecule_instance_target_mtu

    - name: Call ci_nmstate cleanup
      ansible.builtin.import_role:
        name: ci_nmstate
        tasks_from: cleanup.yml

    - name: Fetch namespaces
      kubernetes.core.k8s_info:
        kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
        api_key: "{{ cifmw_openshift_token | default(omit)}}"
        context: "{{ cifmw_openshift_context | default(omit)}}"
        kind: Namespace
      register: _ci_nmstate_molecule_ns_out

    - name: Assert that the nmstate ns is gonne
      vars:
        ns_names: >-
          {{
            _ci_nmstate_molecule_ns_out.resources |
            default([]) |
            map(attribute='metadata.name')
          }}
      ansible.builtin.assert:
        that: "cifmw_ci_nmstate_namespace not in ns_names"
