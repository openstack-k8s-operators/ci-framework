---
- name: Retrieve Jobs From iDRAC
  when: not ansible_check_mode
  ansible.builtin.include_role:
    name: idrac_configuration
    tasks_from: retrieve_idrac_jobs

- name: Check If There Populated Jobs
  when: idrac_job['results']
  block:
    - name: Check For Completed BIOS Configuration Jobs
      ansible.builtin.set_fact:
        idrac_previous_bios_jobs: >-
          "{{ idrac_job['results'] |
           selectattr('content', 'contains', 'Job completed successfully.') |
           selectattr('content', 'contains', 'BIOSConfiguration') | list }}"
      when: >-
        idrac_job['results'] |
         selectattr('content', 'contains', 'Job completed successfully.') |
         selectattr('content', 'contains', 'BIOSConfiguration') | list

- name: Deleting Previous BIOS Jobs From Inventory
  # Can not use map filter due to special character '@'
  # Forced to use jinja2 loop
  # Jobs that are being executed will not be able to be deleted, we will attempt to wait
  # for them to finish
  # Also not all iDRAC versions support Deleting Job Queue via Redfish
  when:
    - idrac_previous_bios_jobs is defined
    - idrac_job
  vars:
    idrac_jobs_uris: >-
      {%- set jobs=[] -%}
      {%- for job in idrac_previous_bios_jobs -%}
        {{ jobs.append(cifmw_idrac_configuration_uri_protocol + '://' + inventory_hostname + job['json']['@odata.id']) }}
      {%- endfor -%}
      {{ jobs }}
  ansible.builtin.uri:
    url: "{{ item }}"
    method: 'DELETE'
    user: "{{ cifmw_idrac_configuration_user }}"
    password: "{{ cifmw_idrac_configuration_password }}"
    force_basic_auth: true
    return_content: true
    validate_certs: "{{ cifmw_idrac_configuration_validate_ssl_certs }}"
  register: idrac_previous_bios_job_deletion
  retries: "{{ cifmw_idrac_configuration_task_retries }}"
  delay: 5
  until: >-
    (idrac_previous_bios_job_deletion['status'] == 200) or
    (idrac_previous_bios_job_deletion['status'] == 400 and idrac_previous_bios_job_deletion['json']['error']['@Message.ExtendedInfo'] | selectattr('Message', 'contains', 'Invalid Job ID') | list)
  loop: "{{ idrac_jobs_uris }}"
