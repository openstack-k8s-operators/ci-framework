---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Read rabbitmq-server-0 config for tls
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc exec -n openstack -c rabbitmq -t rabbitmq-server-0 -- bash -c 'cat /etc/rabbitmq/conf.d/90-userDefinedConfiguration.conf|grep listeners.ssl.default'"
  register: cert_verify_rabbitmq_server_config

- name: Check rabbitmq-server-0 for tls
  ansible.builtin.assert:
    that:
      - "'5671' in cert_verify_rabbitmq_server_config.stdout"
    success_msg: "rabbitmq-server-0 is listening on SSL"
    fail_msg: "rabbitmq-server-0 is not SSL"

- name: Read rabbitmq-server-0 tls cert serial
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc exec -n openstack -t openstackclient -- bash -c \"echo 'QUIT'|openssl s_client -showcerts -connect memcached-0.memcached.openstack.svc:11212 2>&1|openssl x509 -noout -serial\""
  register: cert_verify_rabbitmq_cert_serial

- name: Read rabbitmq-0 container key file
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc exec -n openstack -c rabbitmq -t rabbitmq-server-0 -- bash -c 'cat /etc/rabbitmq-tls/tls.key|base64 -w0'"
  register: cert_verify_rabbitmq_key_file

- name: Read rabbitmq-0 container crt file
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc exec -n openstack -c rabbitmq -t rabbitmq-server-0 -- bash -c 'cat /etc/rabbitmq-tls/tls.crt|base64 -w0'"
  register: cert_verify_rabbitmq_crt_file

- name: Read rabbitmq secret key
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc get secret/cert-rabbitmq-svc -o jsonpath=\"{.data['tls\\.key']}\""
  register: cert_verify_rabbitmq_key_secret

- name: Read rabbitmq secret crt
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/bin/oc get secret/cert-rabbitmq-svc -o jsonpath=\"{.data['tls\\.crt']}\""
  register: cert_verify_rabbitmq_crt_secret

- name: Rabbitmq container key/crt match certmanage key/crt
  ansible.builtin.assert:
    that:
      - cert_verify_rabbitmq_key_file.stdout == cert_verify_rabbitmq_key_secret.stdout
      - cert_verify_rabbitmq_crt_file.stdout == cert_verify_rabbitmq_crt_secret.stdout
    success_msg: "rabbitmq container key/crt matches certmanage key/crt"
    fail_msg: "rabbitmqcontainer key/crt does not matches certmanage key/crt"
