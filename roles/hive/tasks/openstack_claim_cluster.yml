---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Claim an OpenShift Cluster
  vars:
    claim_name: "{{ cifmw_hive_openstack_claim_name }}"
    cluster_pool: "{{ cifmw_hive_openstack_pool_name }}"
    rtn_kube: "{{ cifmw_hive_artifacts_dir }}"
    namespace: "{{ cifmw_hive_namespace }}"

  block:
    - name: Check if ClusterPool exists
      when: not cifmw_hive_dry_run | bool
      environment:
        PATH: "{{ cifmw_path }}"
        KUBECONFIG: "{{ cifmw_hive_kubeconfig }}"
      ansible.builtin.command:
        cmd: "oc get ClusterPool {{ cluster_pool }} -n {{ namespace }}"

    - name: Creating the cluster claim
      ansible.builtin.import_tasks:
        file: oc_apply.yml
      vars:
        desc: "cluster_claim"
        dest_file: "cluster_claim.yml"
        template_file: "templates/claim.yml.j2"
        end_time: "{{ cifmw_hive_openstack_claim_life_time }}"

    - name: Post OCP cluster claim initialization
      when: not cifmw_hive_dry_run | bool
      environment:
        PATH: "{{ cifmw_path }}"
        KUBECONFIG: "{{ cifmw_hive_kubeconfig }}"
      block:
        - name: Wait for the claim to be successful
          ansible.builtin.command:
            cmd: "oc wait --for=condition=Pending=False clusterclaim/{{ claim_name }} --timeout {{ cifmw_hive_openstack_claim_timeout }}"
          poll: 30

        - name: Gathering the namespace of created cluster claim
          ansible.builtin.command:
            cmd: "oc get clusterclaim {{ claim_name }} -o jsonpath='{ .spec.namespace }'"
          register: ns

        - name: Gather the kube config reference
          ansible.builtin.command:
            cmd: "oc get clusterdeployment -n {{ ns.stdout }} {{ ns.stdout }} -o jsonpath='{ .spec.clusterMetadata.adminKubeconfigSecretRef.name }' "
          register: kube_ref

        - name: Extracting the kubeconfig to {{ rtn_kube }}
          ansible.builtin.command:
            cmd: "oc extract -n {{ ns.stdout }} secret/{{ kube_ref.stdout }} --to={{ rtn_kube }} --confirm"

        - name: Collect the reference name of adminPassword
          ansible.builtin.command:
            cmd: "oc get clusterdeployment -n {{ ns.stdout }} {{ ns.stdout }}  -o jsonpath='{ .spec.clusterMetadata.adminPasswordSecretRef.name }'"
          register: admin_ref

        - name: Gather the username to be used for authentication against the deployed cluster
          ansible.builtin.command:
            cmd: "oc extract -n {{ ns.stdout }} secret/{{ admin_ref.stdout }} --keys username --to=-"
          register: username_out

        - name: Gather the credentials to be used for authentication against the deployed cluster
          ansible.builtin.command:
            cmd: "oc extract -n {{ ns.stdout }} secret/{{ admin_ref.stdout }} --keys password --to=-"
          register: password_out

        - name: Retrieve the webconsole URI
          ansible.builtin.command:
            cmd: "oc get clusterdeployment -n {{ ns.stdout }} {{ ns.stdout }} -o jsonpath='{ .status.webConsoleURL }' "
          register: web_out

        - name: Defining openshift variables
          ansible.builtin.set_fact:
            cifmw_openshift_web_console_url: "{{ web_out.stdout }}"
            cifmw_openshift_user: "{{ username_out.stdout }}"
            cifmw_openshift_password: "{{ password_out.stdout }}"
            cifmw_openshift_kubeconfig: "{{ cifmw_hive_artifacts_dir }}/kubeconfig"

      rescue:
        - name: Describe the cluster claim
          ansible.builtin.command:
            cmd: "oc describe clusterclaim {{ claim_name }}"
          register: result

        - name: Logging of cluster claim events
          ansible.builtin.debug:
            msg: "{{ result.stdout }}"

        - name: Claim removal on event of failure / timeout
          ansible.builtin.command:
            cmd: "oc delete clusterclaim {{ claim_name }}"
