---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Converge
  hosts: instance
  gather_facts: true
  vars:
    cifmw_run_id: aabbcc11
    cifmw_manage_secrets_reproducer_secrets:
      - content: "my-default-location-place"
        dest: "default.txt"
      - src: "/tmp/ipmi-things"
        dest: "/home/zuul/ipmi-things"
    cifmw_basedir: "/opt/basedir"
    cifmw_install_yamls_repo: "{{ ansible_user_dir }}/src/github.com/openstack-k8s-operators/install_yamls"
    cifmw_path: "{{ ansible_user_dir }}/.crc/bin:{{ ansible_user_dir }}/.crc/bin/oc:{{ ansible_user_dir }}/bin:{{ ansible_env.PATH }}"
    _networks:
      public:
        range: "192.168.101.0/24"
      osp_trunk:
        default: true
        range: "192.168.140.0/24"
        mtu: 1500
    cifmw_use_libvirt: true
    cifmw_reproducer_repositories:
      - src: "{{ lookup('env', 'HOME') }}/src/github.com/openstack-k8s-operators/ci-framework"
        dest: "/home/zuul/src/github.com/openstack-k8s-operators/"
    cifmw_libvirt_manager_configuration:
      vms:
        compute:
          amount: 1
          image_url: "{{ cifmw_discovered_image_url }}"
          sha256_image_name: "{{ cifmw_discovered_hash }}"
          image_local_dir: "{{ cifmw_basedir }}/images/"
          disk_file_name: "centos-stream-9.qcow2"
          disksize: 50
          memory: 4
          cpus: 2
          nets:
            - public
            - osp_trunk
        controller:
          image_url: "{{ cifmw_discovered_image_url }}"
          sha256_image_name: "{{ cifmw_discovered_hash }}"
          image_local_dir: "{{ cifmw_basedir }}/images/"
          disk_file_name: "centos-stream-9.qcow2"
          disksize: 50
          memory: 4
          cpus: 2
          nets:
            - public
            - osp_trunk
        crc:
          admin_user: core
          image_local_dir: "{{ ansible_user_dir }}/.crc/machines/crc/"
          disk_file_name: "crc.qcow2"
          disksize: 150
          memory: 20
          cpus: 12
          nets:
            - public
            - osp_trunk
      networks:
        public: |-
          <network>
            <name>public</name>
            <forward mode='nat'/>
            <bridge name='public' stp='on' delay='0'/>
            <mac address='52:54:00:6a:f2:dc'/>
            <dns enable="no"/>
            <ip family='ipv4' address='{{ _networks.public.range | ansible.utils.nthhost(1) }}' prefix='24'>
            </ip>
          </network>
        osp_trunk: |-
          <network>
            <name>osp_trunk</name>
            <forward mode='nat'/>
            <bridge name='osp_trunk' stp='on' delay='0'/>
            <mac address='52:54:00:fd:be:d0'/>
            <dns enable="no"/>
            <ip family='ipv4' address='{{ _networks.osp_trunk.range | ansible.utils.nthhost(1) }}' prefix='24'>
            </ip>
          </network>

  tasks:
    - name: Use block to ensure we gather logs
      block:
        - name: Load networking definition from scenario file
          ansible.builtin.include_vars:
            file: "./vars/networking-definition.yml"

        - name: Run reproducer
          ansible.builtin.import_role:
            name: reproducer

        - name: Validate content on the controller-0 node
          delegate_to: controller-0
          block:
            - name: Ensure we have appropriate credentials for OpenShift accesses
              register: _kubeconfig
              ansible.builtin.stat:
                path: "{{ ansible_user_dir }}/.kube/config"

            - name: Ensure we have needed inventory files
              register: _inventory_files
              ansible.builtin.find:
                paths: "{{ ansible_user_dir }}/reproducer-inventory/"
                patterns:
                  - "*-group.yml"

            - name: Ensure we have CRC ssh key
              register: _crc_key
              ansible.builtin.stat:
                path: "{{ ansible_user_dir }}/.ssh/crc_key"

            - name: Ensure we have the MAC mapping file
              register: _mac_mapping
              ansible.builtin.stat:
                path: "{{ ansible_user_dir }}/ci-framework-data/parameters/interfaces-info.yml"

            - name: Load crc inventory
              register: _crc_inv
              ansible.builtin.slurp:
                src: "{{ ansible_user_dir }}/reproducer-inventory/crc-group.yml"

            - name: Load compute inventory
              register: _compute_inv
              ansible.builtin.slurp:
                src: "{{ ansible_user_dir }}/reproducer-inventory/compute-group.yml"

            - name: Ensure we can ping compute-0 on osp_trunk net
              register: _cmp0_ping
              failed_when: false
              vars:
                _cmpt: "compute-0"
                _inv: >-
                  {{
                    _compute_inv.content | b64decode | from_yaml
                  }}
                _ip: >-
                  {{ _inv.computes.hosts[_cmpt].ansible_host }}
              ansible.builtin.command:
                cmd: "ping -c1 -w1 {{ _ip }}"

            - name: Ensure we can ping crc-0 on osp_trunk net
              register: _crc_ping
              failed_when: false
              vars:
                _inv: >-
                  {{
                    _crc_inv.content | b64decode | from_yaml
                  }}
                _ip: >-
                  {{ _inv.ocps.hosts['crc-0'].ansible_host }}
              ansible.builtin.command:
                cmd: "ping -c1 -w1 {{ _ip }}"

            - name: Check secret files
              block:
                - name: Check default location secret file
                  register: _default_secret
                  ansible.builtin.stat:
                    path: "{{ ansible_user_dir }}/ci-framework-data/secrets/default.txt"
                  failed_when: not _default_secret.stat.exists

                - name: Check non-default location secret
                  register: _default_secret
                  ansible.builtin.stat:
                    path: "{{ ansible_user_dir }}/ipmi-things"
                  failed_when: not _default_secret.stat.exists

        - name: Assert all of the tests
          vars:
            _inventory_content: >-
              {{
                _inventory_files.files |
                map(attribute='path') |
                map('basename') | sort
              }}
            _expected_files: >-
              {{
                ['all-group.yml',
                 'compute-group.yml',
                 'controller-group.yml',
                 'crc-group.yml'] | sort
              }}
          ansible.builtin.assert:
            quiet: true
            that:
              - _kubeconfig.stat.exists | bool
              - _crc_key.stat.exists | bool
              - _mac_mapping.stat.exists | bool
              - _inventory_files.matched == 4
              - _inventory_content == _expected_files
              - _crc_ping.rc == 0
              - _cmp0_ping.rc == 0

      always:
        - name: Copy all dnsmasq generated content
          vars:
            _log_dest: "{{ ansible_user_dir }}/ci-framework-data/artifacts/dnsmasq"
          block:
            - name: Create dnsmasq dir
              ansible.builtin.file:
                path: "{{ _log_dest }}"
                state: directory
                mode: "0755"

            - name: Get journalctl in a file
              become: true
              register: _dnsmasq_journal
              ansible.builtin.command:
                cmd: journalctl -u cifmw-dnsmasq.service

            - name: Dump journalctl output
              become: true
              ansible.builtin.copy:
                dest: "{{ _log_dest }}/journalctl.log"
                content: "{{ _dnsmasq_journal.stdout }}"
                mode: "0644"

            - name: Copy all dnsmasq config
              ansible.posix.synchronize:
                src: "{{ item }}"
                dest: "{{ _log_dest}}"
              loop:
                - /etc/cifmw-dnsmasq.conf
                - /etc/cifmw-dnsmasq.d/

        - name: Gather logs from nested controller-0
          vars:
            _log_dest: "{{ ansible_user_dir }}/ci-framework-data/logs/controller-0"
          block:
            - name: Create log directory
              ansible.builtin.file:
                path: "{{ _log_dest }}"
                state: directory
                mode: "0755"

            - name: Sync logs from controller-0
              failed_when: false
              ansible.builtin.shell:  # noqa: command-instead-of-module
                cmd: |-
                  rsync -r zuul@controller-0:"*.log" {{ _log_dest }};
                  rsync -r zuul@controller-0:/etc/motd.d {{ _log_dest }};
                  rsync -r --exclude "**/venv" --exclude "**/tmp" \
                    --exclude "**/install_yamls_makes" \
                    zuul@controller-0:ci-framework-data {{ _log_dest }};
