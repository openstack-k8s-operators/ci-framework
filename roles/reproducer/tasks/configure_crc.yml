---
- name: Get the networking-environment-definition from controller-0
  delegate_to: controller-0
  register: _net_conf
  ansible.builtin.slurp:
    path: /etc/ci/env/networking-environment-definition.yml

- name: Configure CRC services
  delegate_to: crc-0
  vars:
    _parsed: "{{ _net_conf.content | b64decode | from_yaml}}"
    _crc: "{{ _parsed.instances['crc-0'].networks.ctlplane }}"
  block:
    - name: Ensure crc-0 knows about its second NIC
      become: true
      vars:
        _ctlplane: "{{ _parsed.networks.ctlplane }}"
      community.general.nmcli:
        autoconnect: true
        conn_name: private_net
        dns4: 127.0.0.1
        ifname: "{{ _crc.interface_name }}"
        type: ethernet
        ip4: "{{ _crc.ip_v4 }}/24"
        never_default4: true
        state: present

    - name: Ensure NetworkManager does not override /etc/resolv.conf
      become: true
      ansible.builtin.copy:
        dest: "/etc/NetworkManager/conf.d/no-resolvconf.conf"
        mode: "0644"
        content: |
          [main]
          rc-manager = unmanaged

    - name: Ensure we use local dnsmasq only
      become: true
      ansible.builtin.copy:
        dest: "/etc/resolv.conf"
        mode: "0644"
        content: |
          # Managed by ansible/cifmw
          nameserver {{ _crc.ip_v4 }}

    - name: Reload NetworkManager to ensure it read the conf changes
      become: true
      ansible.builtin.service:
        name: NetworkManager
        state: "reloaded"

    - name: Check which dnsmasq config we must edit
      register: _dnsmasq
      ansible.builtin.stat:
        path: '/srv/dnsmasq.conf'
        get_attributes: false
        get_checksum: false
        get_mime: false

    - name: Configure local DNS for CRC pod
      become: true
      vars:
        _config_file: >-
          {{
            _dnsmasq.stat.exists |
            ternary(_dnsmasq.stat.path, '/etc/dnsmasq.d/crc-dnsmasq.conf')
          }}
      block:
        - name: Configure dns forwarders
          become: true
          ansible.builtin.blockinfile:
            path: "{{ _config_file }}"
            block: |-
              {% if cifmw_reproducer_dns_servers %}
              {% for dns_server in cifmw_reproducer_dns_servers %}
              server={{ dns_server }}
              {% endfor %}
              {% endif %}

        - name: Configure local DNS for CRC pod
          register: last_modification
          ansible.builtin.replace:
            path: "{{ _config_file }}"
            regexp: "192.168.130.11"
            replace: "{{ _crc.ip_v4 }}"

        - name: Ensure dnsmasq listens on correct interfaces
          ansible.builtin.replace:
            path: "{{ _config_file }}"
            regexp: "listen-address={{ _crc.ip_v4 }}"
            replace: "listen-address={{ _crc.ip_v4 }},127.0.0.1"

    - name: Reboot CRC node
      become: true
      ansible.builtin.reboot:

- name: Ensure hypervisor has the right CRC IP
  become: true
  vars:
    _parsed: "{{ _net_conf.content | b64decode | from_yaml}}"
    _crc: "{{ _parsed.instances['crc-0'].networks.ctlplane }}"
  ansible.builtin.blockinfile:
    path: "/etc/hosts"
    marker: "# {mark}"
    marker_begin: "Added by CRC"
    marker_end: "End of CRC section"
    block: >-
      {{ _crc.ip_v4 }} api.crc.testing
      canary-openshift-ingress-canary.apps-crc.testing
      console-openshift-console.apps-crc.testing
      default-route-openshift-image-registry.apps-crc.testing
      downloads-openshift-console.apps-crc.testing
      oauth-openshift.apps-crc.testing
