---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Discover latest image for CS9
  tags:
    - bootstrap
    - bootstrap_layout
  ansible.builtin.import_role:
    name: discover_latest_image

- name: Assert no conflicting parameters were passed
  ansible.builtin.assert:
    that:
      - (cifmw_libvirt_manager_configuration.vms.crc is defined) or
        (cifmw_libvirt_manager_configuration.vms.ocp is defined)
      - not ((cifmw_libvirt_manager_configuration.vms.crc is defined) and
             (cifmw_libvirt_manager_configuration.vms.ocp is defined))
    quiet: true
    msg: >-
      You cannot get both OpenShift cluster types.
      Please chose between CRC and OCP cluster.

- name: Assert that deprecated cifmw_reproducer_internal_ca parameters was not passed
  ansible.builtin.assert:
    that:
      - cifmw_reproducer_internal_ca is not defined
    msg: >-
      The parameter cifmw_reproducer_internal_ca to install additional CAs is
      deprecated, please use parameters from the install_ca role instead, like
      cifmw_install_ca_url to download from a url or cifmw_install_ca_bundle_src
      to use a file present on the host.

- name: Set _use_crc before layout update
  ansible.builtin.set_fact:
    _use_crc: >-
      {{
        cifmw_libvirt_manager_configuration.vms.crc is defined and
        (
          (cifmw_libvirt_manager_configuration.vms.crc.amount is defined and
           cifmw_libvirt_manager_configuration.vms.crc.amount|int > 0) or
        cifmw_libvirt_manager_configuration.vms.crc.amount is undefined)
      }}

- name: Ensure directories are present
  tags:
    - always
  ansible.builtin.file:
    path: "{{ cifmw_reproducer_basedir }}/{{ item }}"
    state: directory
  loop:
    - artifacts
    - logs

- name: Load CI job environment
  when:
    - cifmw_job_uri is defined
  ansible.builtin.include_tasks: ci_data.yml

- name: Bootstrap libvirt if needed
  when:
    - cifmw_use_libvirt | default(false) | bool
  tags:
    - bootstrap_libvirt
  ansible.builtin.include_role:
    name: libvirt_manager
    apply:
      tags:
        - bootstrap_libvirt

- name: Deploy CRC if needed
  when:
    - _use_crc | bool
  tags:
    - bootstrap
    - bootstrap_layout
    - crc_layout
  ansible.builtin.include_tasks:
    file: crc_layout.yml
    apply:
      tags:
        - bootstrap
        - bootstrap_layout
        - crc_layout

- name: Consume dev-scripts for OCP cluster
  when:
    - cifmw_libvirt_manager_configuration.vms.ocp is defined
    - (
        cifmw_libvirt_manager_configuration.vms.ocp.target is defined and
        cifmw_libvirt_manager_configuration.vms.ocp.target == inventory_hostname
      ) or
      cifmw_libvirt_manager_configuration.vms.ocp.target is undefined
  tags:
    - bootstrap
    - boostrap_layout
    - libvirt_layout
  ansible.builtin.include_tasks:
    file: devscripts_layout.yml
    apply:
      tags:
        - bootstrap
        - bootstrap_layout

- name: Consume libvirt_manager
  when:
    - cifmw_use_libvirt | default(false) | bool
  tags:
    - bootstrap
    - bootstrap_layout
    - bootstrap_env
  ansible.builtin.include_tasks:
    file: libvirt_layout.yml
    apply:
      tags:
        - bootstrap
        - bootstrap_layout

- name: Apply VLAN ids to TAP type interfaces.
  when:
    - cifmw_libvirt_manager_configuration.networks is defined
    - cifmw_libvirt_manager_configuration.vms.ocp is defined
    - (
        cifmw_libvirt_manager_configuration.vms.ocp.target is defined and
        cifmw_libvirt_manager_configuration.vms.ocp.target == inventory_hostname
      ) or
      cifmw_libvirt_manager_configuration.vms.ocp.target is undefined
  tags:
    - bootstrap
    - bootstrap_layout
  become: true
  cifmw.general.bridge_vlan:
    networks: >-
      {{
        cifmw_libvirt_manager_configuration.networks.keys() | list
      }}
  failed_when: false

- name: Run only on hypervisor with controller-0
  when:
    - (
        _layout.vms.controller.target is defined and
        _layout.vms.controller.target == inventory_hostname
      ) or
      _layout.vms.controller.target is undefined
  block:
    - name: Push local code
      tags:
        - bootstrap_repositories
        - bootstrap
      ansible.builtin.include_tasks: push_code.yml

    - name: Group tasks on controller-0
      delegate_to: controller-0
      block:
        - name: Rotate some logs
          tags:
            - always
          ansible.builtin.include_tasks: rotate_log.yml
          loop:
            - "/home/zuul/ansible-bootstrap.log"

        - name: Bootstrap environment on controller-0
          environment:
            ANSIBLE_LOG_PATH: "~/ansible-bootstrap.log"
          no_log: true
          ansible.builtin.command:
            chdir: "/home/zuul/src/github.com/openstack-k8s-operators/ci-framework"
            cmd: >-
              ansible-playbook -i ~/ci-framework-data/artifacts/zuul_inventory.yml
              -e @~/ci-framework-data/parameters/reproducer-variables.yml
              -e @scenarios/reproducers/networking-definition.yml
              playbooks/01-bootstrap.yml
            creates: "/home/zuul/ansible-bootstrap.log"

        - name: Install dev tools from install_yamls on controller-0
          environment:
            ANSIBLE_LOG_PATH: "~/ansible-bootstrap.log"
          no_log: true
          ansible.builtin.command:
            chdir: "/home/zuul/src/github.com/openstack-k8s-operators/install_yamls/devsetup"
            cmd: >-
              ansible-playbook -i ~/ci-framework-data/artifacts/zuul_inventory.yml
              download_tools.yaml --tags kustomize,kubectl
            creates: "/home/zuul/bin/operator-sdk"

        - name: Configure CRC network if needed
          when:
            - _layout.vms.crc is defined
            - (_layout.vms.crc.amount is defined and
               (_layout.vms.crc.amount | int ) > 0) or
              _layout.vms.crc.amount is undefined
          environment:
            KUBECONFIG: "/home/zuul/.kube/config"
            PATH: "{{ cifmw_path }}"
          block:
            - name: Gather network.operator info
              register: _network
              kubernetes.core.k8s_info:
                api_version: "operator.openshift.io/v1"
                kubeconfig: "~/.kube/config"
                kind: Network
                name: cluster

            - name: Patch network operator
              vars:
                _network_backend: >-
                  {{
                    _network.resources |
                    map(attribute="spec.defaultNetwork.type") |
                    first
                  }}
              when:
                - _network_backend == "OVNKubernetes"
              kubernetes.core.k8s_json_patch:
                api_version: "operator.openshift.io/v1"
                kubeconfig: "~/.kube/config"
                kind: Network
                name: cluster
                persist_config: true
                patch:
                  - path: "/spec/defaultNetwork/ovnKubernetesConfig/gatewayConfig/routingViaHost"
                    value: true
                    op: replace
                  - path: "/spec/defaultNetwork/ovnKubernetesConfig/gatewayConfig/ipForwarding"
                    value: "Global"
                    op: replace

    - name: Emulate CI job
      when:
        - cifmw_job_uri is defined
      ansible.builtin.include_tasks: ci_job.yml

    - name: Prepare VA deployment
      when:
        - cifmw_architecture_scenario is defined
      tags:
        - deploy_architecture
      ansible.builtin.include_tasks:
        file: configure_architecture.yml
        apply:
          tags:
            - deploy_architecture

    - name: Prepare ci-like EDPM deploy
      delegate_to: controller-0
      vars:
        run_directory: "src/github.com/openstack-k8s-operators/ci-framework"
        exports:
          ANSIBLE_LOG_PATH: "~/ansible-deploy-edpm.log"
        default_extravars:
          - "@scenarios/centos-9/base.yml"
          - "@scenarios/centos-9/edpm_ci.yml"
          - "cifmw_openshift_password='{{ cifmw_openshift_password }}'"
        extravars: "{{ cifmw_reproducer_play_extravars }}"
        playbook: "deploy-edpm.yml"
      ansible.builtin.template:
        dest: "/home/zuul/deploy-edpm.sh"
        src: "script.sh.j2"
        mode: "0755"
        owner: "zuul"
        group: "zuul"
