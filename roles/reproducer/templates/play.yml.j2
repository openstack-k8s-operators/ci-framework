---
{% if use_content_provider | default(false) | bool -%}
{% raw %}
- name: Load parameters and expose needed data
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Load interfaces-info.yml
      ansible.builtin.include_vars:
        file: "{{ ansible_user_dir }}/ci-framework-data/artifacts/interfaces-info.yml"
        name: cifmw_mac_mapping

    - name: Set cifmw_rp_registry_ip
      ansible.builtin.set_fact:
        cacheable: true
        cifmw_rp_registry_ip: >-
          {{
            ((cifmw_mac_mapping | dict2items |
            selectattr('key', 'match', '.*controller-0') |
            first)['value'] |
            selectattr('network', 'match', '.*osp_trunk') |
            first)['IP']
          }}


- name: Configure CRC for insecure registry
  hosts: crcs
  vars:
    content_provider_registry_ip: "{{ hostvars['localhost']['cifmw_rp_registry_ip'] }}"
  tasks:
    - name: Wait for CRC to be ready
      register: wait_crc
      ansible.builtin.command: >-
        oc login api.crc.testing:6443
        -u kubeadmin
        -p 12345678
        --insecure-skip-tls-verify=true
      retries: 60
      delay: 10
      until:
        - wait_crc is defined
        - wait_crc.rc is defined
        - wait_crc.rc == 0

    - name: Set insecure registry on crc node
      ansible.builtin.import_tasks: ci/playbooks/tasks/set_crc_insecure_registry.yml
{% endraw %}

- name: "Content Provider"
  hosts: localhost
  gather_facts: false
  vars:
    cifmw_rp_registry_firewall: false
    job_id: "{{ job_id }}"
  tasks:
{% raw %}
    - name: Load env variables
      ansible.builtin.include_vars:
        file: "{{ item }}"
      loop:
        - "{{ ansible_user_dir }}/ci-framework-data/artifacts/interfaces-info.yml"
        - "{{ ansible_user_dir }}/{{ job_id }}-params/zuul-params.yml"
        - "./scenarios/centos-9/base.yml"
        - "./scenarios/centos-9/content_provider.yml"

    - name: Install necessary tools
      ansible.builtin.import_role:
        name: install_yamls_makes
        tasks_from: make_download_tools

    - name: Deploy registry
      ansible.builtin.import_role:
        name: registry_deploy

    # Imported from the ci/playbooks/content_provider/content_provider.yml play
    # Ensure we get consistent name for the operator, linked to
    # https://github.com/openstack-k8s-operators/ci-framework/pull/621
    - name: Set var for cifmw_operator_build_operators var
      when:
        - zuul is defined
        - "'project' in zuul"
        - "'short_name' in zuul.project"
      ansible.builtin.set_fact:
        cifmw_operator_build_operators:
          - name: "openstack-operator"
            src: "~/src/github.com/{{ cifmw_operator_build_org }}/openstack-operator"
            image_base: >-
              {{ zuul.project.short_name | split('-') | reject('search','operator') | join('-') }}

    - name: Build Operators
      ansible.builtin.include_role:
        name: operator_build

    - name: Get the containers list from container registry
      ansible.builtin.uri:
        url: "http://{{ cifmw_rp_registry_ip }}:5001/v2/_catalog"
        return_content: true
      register: cp_imgs

    - name: Add the container list to file
      ansible.builtin.copy:
        content: "{{ cp_imgs.content }}"
        dest: "{{ ansible_user_dir }}/local_registry.log"
        mode: "0644"

    - name: Output needed content into consumable environment
      ansible.builtin.copy:
        dest: "{{ ansible_user_dir }}/{{ job_id }}-params/content-provider.yml"
        content: |-
          {{
            {'cifmw_operator_build_output': cifmw_operator_build_output,
             'content_provider_registry_ip': cifmw_rp_registry_ip
            } | to_nice_yaml
          }}
{% endraw %}
{% endif %}

{% raw %}
- name: Configure NetworkManager on controller-0
  hosts: localhost
  gather_facts: false
  become: true
  tasks:
    - name: Instruct NetworkManager to not manage DNS
      community.general.ini_file:
        path: "/etc/NetworkManager/NetworkManager.conf"
        option: dns
        section: main
        value: none

    - name: Restart NetworkManager
      ansible.builtin.service:
        name: NetworkManager
        state: restarted

    - name: Inject proper DNS resolver
      vars:
        _net: "{{ cifmw_rp_registry_ip }}/24"
        _crc_resolver: >-
          {{
            _net | ansible.utils.ipaddr('host/prefix') |
            ansible.utils.nthhost(80)
          }}
        _pub_resolver: >-
          {{
            _net | ansible.utils.ipaddr('host/prefix') |
            ansible.utils.nthhost(1)
          }}
      ansible.builtin.copy:
        dest: "/etc/resolv.conf"
        content: |
          # Managed by ansible/cifmw reproducer role
          nameserver {{ _crc_resolver }}
          nameserver {{ _pub_resolver }}
{% endraw %}

{% for play in zuul_plays %}
- name: "Reproducer for {{ job_id }}: {{ play }}"
  vars:
    cifmw_extras:
      - '@~/{{ job_id }}-params/custom-params.yml'
      - '@~/{{ job_id }}-params/install-yamls-params.yml'
      - '@~/{{ job_id }}-params/reproducer_params.yml'
{% if use_content_provider | bool %}
      - '@~/{{ job_id }}-params/content-provider.yml'
{% endif %}
      - cifmw_zuul_target_host=controller-0
      - cifmw_openshift_user=kubeadmin
      - cifmw_openshift_kubeconfig=/home/zuul/.kube/config
      - cifmw_openshift_login_skip_tls_verify=true
      - cifmw_openshift_setup_skip_internal_registry_tls_verify=true
    cifmw_zuul_target_host: controller-0
  ansible.builtin.import_playbook: {{ play }}
{% endfor %}
