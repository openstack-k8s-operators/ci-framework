---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create the support files for test
  ansible.builtin.include_tasks: create_test_files.yml

- name: Trigger the ping test
  when:
    - cifmw_update_ping_test | bool
    - not cifmw_update_run_dryrun | bool

  block:
    - name: Create Test instance before update
      ansible.builtin.include_tasks: create_instance.yml

    - name: Start ping test
      ansible.builtin.include_tasks: l3_agent_connectivity_check_start.yml

- name: Trigger the continuous control plane test
  when:
    - cifmw_update_control_plane_check | bool
    - not cifmw_update_run_dryrun | bool
  ansible.builtin.shell: |
    {{ cifmw_update_artifacts_basedir }}/control_plane_test_start.sh

- name: Wait for Unapproved Update InstallPlan Creation
  kubernetes.core.k8s_info:
    kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
    api_key: "{{ cifmw_openshift_token | default(omit) }}"
    context: "{{ cifmw_openshift_context | default(omit) }}"
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: openstack-operators
  register: _cifmw_update_install_plans
  until: _cifmw_update_install_plans.resources | selectattr('spec.approval', 'equalto', 'Manual') | selectattr('spec.approved', 'equalto', false) | length > 0
  retries: 30
  delay: 10

- name: Collect Update InstallPlan Name
  set_fact:
    cifmw_update_installplan_name: >-
      {{
      (_cifmw_update_install_plans.resources
      | selectattr('spec.approval', 'equalto', 'Manual')
      | selectattr('spec.approved', 'equalto', false)
      | first)
      .metadata.name
      }}
- name: Approve the Update InstallPlan
  kubernetes.core.k8s:
    kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
    api_key: "{{ cifmw_openshift_token | default(omit) }}"
    context: "{{ cifmw_openshift_context | default(omit) }}"
    state: present
    namespace: openstack-operators
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: InstallPlan
      metadata:
        name: "{{ cifmw_update_installplan_name }}"
      spec:
        approved: true

- name: Display debug
  ansible.builtin.debug:
    msg: "{{ cifmw_update_installplan_name }}"

- name: Wait for the Update InstallPlan to complete
  kubernetes.core.k8s_info:
    kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
    api_key: "{{ cifmw_openshift_token | default(omit) }}"
    context: "{{ cifmw_openshift_context | default(omit) }}"
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: openstack-operators
    name: "{{ cifmw_update_installplan_name }}"
  register: _cifmw_update_installplan
  until: _cifmw_update_installplan.resources[0].status.phase == 'Complete'
  retries: 120
  delay: 10

- name: Make sure we get a new version available, block until we do.
  kubernetes.core.k8s_info:
    kubeconfig: "{{ cifmw_openshift_kubeconfig }}"
    api_key: "{{ cifmw_openshift_token | default(omit) }}"
    context: "{{ cifmw_openshift_context | default(omit) }}"
    api_version: core.openstack.org/v1beta1
    kind: OpenStackVersion
    namespace: openstack
  register: openstackversion_info
  until: openstackversion_info.resources[0].spec.targetVersion != openstackversion_info.resources[0].status.availableVersion
  retries: 20  # Adjust the number of retries as needed
  delay: 15  # Adjust delay between retries as needed

- name: Capture the .status.availableVersion in cifmw_update_available_version fact
  set_fact:
    cifmw_update_available_version: "{{ openstackversion_info.resources[0].status.availableVersion }}"

- name: Display message about the update
  debug:
    msg: "About to update to {{ cifmw_update_available_version }}"

- name: Set openstack_update_run Makefile environment variables
  tags:
    - always
  ansible.builtin.set_fact:
    _make_openstack_update_run_params: |
      TIMEOUT: {{ cifmw_update_openstack_update_run_timeout }}
      {% if not cifmw_update_openstack_update_run_operators_updated | bool -%}
      FAKE_UPDATE: true
      CONTAINERS_NAMESPACE: {{ cifmw_update_openstack_update_run_containers_namespace }}
      CONTAINERS_TARGET_TAG: {{ cifmw_update_openstack_update_run_containers_target_tag }}
      OPENSTACK_VERSION: {{ cifmw_update_openstack_update_run_target_version }}
      {% else -%}
      OPENSTACK_VERSION: {{ cifmw_update_available_version }}
      {% endif -%}


- name: Run make openstack_update_run
  vars:
    make_openstack_update_run_env: "{{ cifmw_install_yamls_environment | combine({'PATH': cifmw_path }) }}"
    make_openstack_update_run_params: "{{ _make_openstack_update_run_params | from_yaml }}"
    make_openstack_update_run_dryrun: "{{ cifmw_update_run_dryrun | bool }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_openstack_update_run'

- name: Stop the ping test
  ansible.builtin.include_tasks: l3_agent_connectivity_check_stop.yml
  when:
    - cifmw_update_ping_test | bool
    - not cifmw_update_run_dryrun | bool

- name: Stop the continuous control plane test
  when:
    - cifmw_update_control_plane_check | bool
    - not cifmw_update_run_dryrun | bool
  ansible.builtin.command: |
    {{ cifmw_update_artifacts_basedir }}/control_plane_test_stop.sh

- name: Reboot the compute nodes
  ansible.builtin.include_tasks: reboot_computes.yml
  when:
    - cifmw_update_reboot_test | bool
