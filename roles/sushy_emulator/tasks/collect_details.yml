---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Get ingresses domain
  environment:
    KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
    PATH: "{{ cifmw_path }}"
  ansible.builtin.command:
    cmd: 'oc get ingresses.config/cluster -o jsonpath={.spec.domain}'
  register: _ingress_domain
  when: cifmw_sushy_emulator_install_type == 'ocp'

- name: Set sushy url for ocp installation
  ansible.builtin.set_fact:
    ocp_sushy_uri: "http://sushy-emulator.{{ _ingress_domain.stdout }}"
  when: cifmw_sushy_emulator_install_type == 'ocp'

- name: Create ssh key for Sushy Emulator
  register: _sushy_emulator_key
  community.crypto.openssh_keypair:
    path: "{{ cifmw_sushy_emulator_sshkey_path }}"
    type: "{{ cifmw_sushy_emulator_sshkey_type }}"
    size: "{{ cifmw_sushy_emulator_sshkey_size }}"
    comment: "cifmw-sushy_emulator"
    regenerate: full_idempotence

- name: Slurp private ssh key for later use
  ansible.builtin.slurp:
    src: "{{ cifmw_sushy_emulator_sshkey_path }}"
  register: _sushy_emulator_private_key

- name: Allow Sushy Emulator key
  ansible.posix.authorized_key:
    user: "{{ cifmw_sushy_emulator_libvirt_user }}"
    key: "{{ _sushy_emulator_key.public_key }}"
    state: present
    comment: "cifmw-sushy_emulator"
  delegate_to: "{{ cifmw_sushy_emulator_hypervisor_target }}"

- name: Run ssh-keyscan
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      ssh-keyscan -H {{ cifmw_sushy_emulator_hypervisor_address | default(hostvars[cifmw_sushy_emulator_hypervisor_target].ansible_host) }} 2>/dev/null | base64 -w 0
  register: _cifmw_sushy_emulator_ssh_known_hosts_b64

- name: Write known hosts for later use
  ansible.builtin.copy:
    content: "{{ _cifmw_sushy_emulator_ssh_known_hosts_b64.stdout | b64decode }}"
    dest: "{{ cifmw_sushy_emulator_resource_directory }}/known_hosts"
    mode: '0644'

- name: Load cifmw_libvirt_manager_uuids fact from file
  vars:
    _uuid_file: "{{ cifmw_sushy_emulator_basedir }}/artifacts/libvirt-uuids.yml"
  when:
    - cifmw_libvirt_manager_uuids is not defined
  block:
    - name: "Slurp content of: {{ _uuid_file }}"
      ansible.builtin.slurp:
        src: "{{ _uuid_file }}"
      register: _libvirt_uuids_file

    - name: "Set cifmw_libvirt_manager_uuids fact from {{ _uuid_file }}"
      vars:
        _yaml: "{{ _libvirt_uuids_file.content | b64decode | from_yaml }}"
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_uuids: "{{ _yaml.libvirt_uuid }}"

- name: Set fact related to Libvirt driver
  when:
    - cifmw_sushy_emulator_driver == 'libvirt'
  block:
    - name: Generate list of filtered VMs
      vars:
        _matching_vms: >-
          {% set matching_vms = [] -%}
          {% for host, uuid in cifmw_libvirt_manager_uuids.items() -%}
          {%   if host | regex_search(cifmw_sushy_emulator_vm_prefix_filter | default('') + '.*') -%}
          {%     set _ = matching_vms.append(uuid) -%}
          {%   endif -%}
          {% endfor -%}
          {{ matching_vms }}
      ansible.builtin.set_fact:
        _cifmw_sushy_emulator_instances: "{{ _matching_vms | regex_replace('\n(?!.*\n)', ', ')}}"
      when:
        - _matching_vms | length > 0

# todo(Lewis): The OpenStack driver is currently untested waiting for changes being implemented upstream by sbaker.
- name: Gather details for Openstack driver
  when:
    - cifmw_sushy_emulator_driver == 'openstack'
  block:
    - name: Get Openstack instance UUIDs
      ansible.builtin.command:
        cmd: "openstack --os-cloud={{ cifmw_sushy_emulator_driver_openstack_cloud }} server list --name {{ cifmw_sushy_emulator_vm_prefix_filter }}.* -f json -c ID | jq -c [.[].ID])"
      register: _openstack_server_list_uuid

    - name: Set instance_uuid variable for openstack driver
      ansible.builtin.set_fact:
        _cifmw_sushy_emulator_instances: "{{ _openstack_server_list_uuid }}"

    - name: Base64 encode openstack clouds.yaml file
      ansible.builtin.slurp:
        src: "{{ cifmw_sushy_emulator_driver_openstack_client_config_file }}"
      register: _cifmw_sushy_emulator_driver_openstack_client_config_file_b64
