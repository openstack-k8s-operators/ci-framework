---

# Workaround since Ansible modules lock the database similar to `configure exclusive`
- name: "Random duration pause"
  delegate_to: localhost
  ansible.builtin.pause:
    seconds: "{{ 90 | random(step=6) }}"

- name: "Check If Junos Database Is Open"
  junipernetworks.junos.junos_config:
    lines:
      - set system license keys
  register: junos_config_db_check
  retries: "{{ cifmw_switch_config_task_retries }}"
  delay: "{{ cifmw_switch_config_task_retry_delay }}"
  # Not filtering specific database issue or taking into account other errors
  until: (junos_config_db_check['msg'] is not defined)

- name: Junos configuration block
  block:
    - name: Set login banner
      junipernetworks.junos.junos_banner:
        banner: motd
        text: "{{ switch_vars['switch_banner'] }}"
        state: present
      when: "'switch_banner' in switch_vars"

    - name: Set VLANs
      vars:
        vlans: |
          {% for vlan in vlan_list %}
            - name: "vlan{{ vlan }}"
              vlan_id: "{{ vlan }}"
          {% endfor %}
      junipernetworks.junos.junos_vlans:
        config: "{{ vlans | from_yaml }}"
        state: merged

    - name: Clear interfaces ether-options
      when: "'interfaces' in switch_vars"
      vars:
        interface_config: |
          {% for interface in switch_vars['interfaces'] %}
          - delete interfaces "{{ interface.iface }}" ether-options
          {% endfor %}
      junipernetworks.junos.junos_config:
        lines: '{{ interface_config | from_yaml }}'

    - name: Configure interfaces - description, mode (access/trunk), vlans
      when: "'interfaces' in switch_vars"
      vars:
        interface_config: |
          {% for interface in switch_vars['interfaces'] %}
          {% set helper_var = interface['vlan'].split(',') %}
          - name: "{{ interface.iface }}"
            {{ interface.iface_mode }}:
          {% if interface.iface_mode == 'trunk' and interface.native_vlan is defined %}
              native_vlan: "{{ interface.native_vlan }}"
          {% endif %}
          {% if interface.iface_mode == 'trunk' %}
              allowed_vlans:
          {% for vlan_range in helper_var %}
          {% if '-' in vlan_range %}
          {% for vlan in range(vlan_range.split('-')[0] | int, vlan_range.split('-')[1] | int + 1) %}
              - "vlan{{ vlan }}"
          {% endfor %}
          {% else %}
              - "vlan{{ vlan_range }}"
          {% endif %}
          {% endfor %}
          {% endif %}
          {% if interface.iface_mode == 'access' %}
              vlan: "vlan{{ interface.vlan }}"
          {% endif %}
          {% endfor %}
      junipernetworks.junos.junos_l2_interfaces:
        config: "{{ interface_config | from_yaml }}"
        state: replaced

    - name: Set MTU and description for the interfaces
      vars:
        interface_config: |
          {% for interface in switch_vars['interfaces'] %}
          - name: "{{ interface.iface }}"
            description: "{{ interface.description }}"
            mtu: "{{ interface.mtu | default(omit) }}"
          {% endfor %}
      junipernetworks.junos.junos_interfaces:
        config: '{{ interface_config | from_yaml }}'
        state: merged
    - name: Configure AE
      when: switch_vars['interfaces'] | selectattr('aggr_members', 'defined') | list != []
      block:
        - name: Empty nic config before adding to ae
          vars:
            interface_config: |
              {% for interface in switch_vars['interfaces'] %}
              {% if interface.aggr_members is defined %}
              {% for member in interface.aggr_members %}
              - name: "{{ member }}"
                trunk: {}
              {% endfor %}
              {% endif %}
              {% endfor %}
          junipernetworks.junos.junos_l2_interfaces:
            config: '{{ interface_config | from_yaml }}'
            state: replaced

        # eshulman: Due to module issue resorted to commands :(
        - name: Clear interfaces MTU before adding to ae
          vars:
            interface_config: |
              {% for interface in switch_vars['interfaces'] %}
              {% if interface.aggr_members is defined %}
              {% for member in interface.aggr_members %}
              - delete interfaces "{{ member }}" mtu
              - delete interfaces "{{ member }}" unit 0
              {% endfor %}
              {% endif %}
              {% endfor %}
          junipernetworks.junos.junos_config:
            lines: '{{ interface_config | from_yaml }}'

        - name: Set aggregation for the interface
          vars:
            interface_config: |
              {% for interface in switch_vars['interfaces'] %}
              {% if interface.aggr_members is defined %}
              - name: "{{ interface.iface }}"
                members:
              {% for member in interface.aggr_members %}
                  - member: "{{ member }}"
              {% endfor %}
                mode: active
              {% endif %}
              {% endfor %}
          junipernetworks.junos.junos_lag_interfaces:
            config: '{{ interface_config | from_yaml }}'
            state: replaced


    # For each vlan for which igmp snooping is configured, remove previous
    # configuration if it exists to ensure that applied configuration is
    # as specified in configuration file
    - name: Configure IGMP snooping
      when: switch_vars.igmp_snooping is defined
      block:
        - name: Reset IGMP snooping for each defined vlan
          junipernetworks.junos.junos_config:
            lines:
              - delete protocols igmp-snooping vlan vlan{{ item.vlan }}
          loop: "{{ switch_vars.igmp_snooping }}"
          when: item.vlan is defined

        - name: Create IGMP querier for each defined vlan
          junipernetworks.junos.junos_config:
            lines:
              - "set protocols igmp-snooping vlan vlan{{ item.vlan }}
                 l2-querier source-address {{ item.ip_address }}"
          loop: "{{ switch_vars.igmp_snooping }}"
          when: item.vlan is defined and item.ip_address is defined

        - name: Configure interfaces in which IGMP queries are broadcasted
          junipernetworks.junos.junos_config:
            lines:
              - "set protocols igmp-snooping vlan vlan{{ item.0.vlan }}
                 interface {{ item.1 }}"
          loop: "{{ switch_vars.igmp_snooping | default([]) |
                 subelements('interfaces', 'skip_missing=True') }}"
          when: item.0.vlan is defined and item.0.interfaces is defined

    - name: Configure Layer3(irb) Interfaces
      when: "'layer3_interfaces' in switch_vars"
      block:
        - name: Ensure irb Interfae is configured
          vars:
            irb_interfaces: |
              {% for interface in switch_vars['layer3_interfaces'] %}
              - name: irb
                unit: "{{ interface['unit'] }}"
              {% if interface['ipv4_address'] is defined %}
                ipv4:
                  - address: {{ interface['ipv4_address'] }}
              {% endif %}
              {% endfor %}
          junipernetworks.junos.junos_l3_interfaces:
            config: "{{ irb_interfaces | from_yaml }}"
            state: replaced

        - name: Assign irb Interface To VLAN Interface
          vars:
            vlan_interfaces: |
              {% for interface in switch_vars['layer3_interfaces'] %}
              - name: "{{ interface['vlan_interface'] }}"
                l3_interface: "irb.{{ interface['unit'] }}"
                vlan_id: "{{ interface['unit'] }}"
              {% endfor %}
          junipernetworks.junos.junos_vlans:
            config: "{{ vlan_interfaces | from_yaml }}"
            state: replaced

    - name: Save configuration
      junipernetworks.junos.junos_config:
        confirm_commit: true

  rescue:
    - name: Configuration rollback
      junipernetworks.junos.junos_config:
        rollback: 1

    - name: Fail Play
      ansible.builtin.fail:
        msg: "Configuration was rollbacked, failing play."
