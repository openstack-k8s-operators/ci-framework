---
# source: shiftstack/edpm-nodeset-values/values.yaml.j2
{% set instances_names = []                                                            %}
{% set _original_nodeset = (original_content.data | default({})).nodeset | default({}) %}
{% set _original_nodes = _original_nodeset.nodes | default({})                         %}
{% set _original_services = _original_nodeset['services'] | default([])                %}
{% set _vm_type = (_original_nodes.keys() | first).split('-')[1]                       %}
{% if _vm_type.startswith('ceph')                                                      %}
{%     set _vm_names = cifmw_networking_env_definition.instances.keys()                %}
{% else                                                                                %}
{%     set _vm_names = cifmw_baremetal_hosts.keys()                                    %}
{% endif                                                                               %}
{% for _inst in _vm_names                                                              %}
{%     if _inst.startswith(_vm_type)                                                   %}
{%         set _ = instances_names.append(_inst)                                       %}
{%     endif                                                                           %}
{% endfor                                                                              %}
data:
  ssh_keys:
    authorized: {{ cifmw_ci_gen_kustomize_values_ssh_authorizedkeys | b64encode }}
    private: {{ cifmw_ci_gen_kustomize_values_ssh_private_key | b64encode }}
    public: {{ cifmw_ci_gen_kustomize_values_ssh_public_key | b64encode }}

{% if _vm_type.startswith('compute')                                                   %}
  nova:
    migration:
      ssh_keys:
        private: {{ cifmw_ci_gen_kustomize_values_migration_priv_key | b64encode }}
        public: {{ cifmw_ci_gen_kustomize_values_migration_pub_key | b64encode }}
{% endif                                                                               %}

  nodeset:
    ansible:
      ansibleUser: "zuul"
      ansibleVars:
        edpm_fips_mode: "{{ 'enabled' if cifmw_fips_enabled | default(false) | bool else 'check' }}"
        timesync_ntp_servers:
          - hostname: "{{ cifmw_ci_gen_kustomize_values_ntp_srv | default('pool.ntp.org') }}"
        edpm_network_config_os_net_config_mappings:
{% if _vm_type.startswith('ceph')                                                      %}
{%   for instance in instances_names                                                   %}
          edpm-{{ instance }}:
{%     if hostvars[instance] is defined                                                %}
            nic1: "{{ hostvars[instance].ansible_default_ipv4.macaddress }}"
{%     endif                                                                           %}
            nic2: "{{ cifmw_networking_env_definition.instances[instance].networks.ctlplane.mac_addr }}"
{%   endfor                                                                            %}
{% else                                                                                %}
{%   for _bm in cifmw_baremetal_hosts.keys()                                           %}
          edpm-{{ _bm }}:
            nic1: "{{ cifmw_baremetal_hosts[_bm]['nics'][0]['mac'] }}"
            nic2: "{{ cifmw_baremetal_hosts[_bm]['nics'][1]['mac'] }}"
{%   endfor                                                                            %}
{% endif                                                                               %}

{% if cifmw_ci_gen_kustomize_values_sshd_ranges | default([]) | length > 0             %}
        edpm_sshd_allowed_ranges:
{%   for range in cifmw_ci_gen_kustomize_values_sshd_ranges                            %}
          - "{{ range }}"
{%   endfor                                                                            %}
{% endif                                                                               %}

{% if ('repo-setup' not in (_original_nodeset['services'] | default([]))) and
      ('repo-setup' in ci_gen_kustomize_edpm_nodeset_predeployed_services)             %}
    services:
      - "repo-setup"
{%   for svc in _original_services                                                     %}
      - "{{ svc }}"
{%   endfor                                                                            %}
{% endif                                                                               %}

    nodes:
{% for instance in instances_names                                                     %}
      edpm-{{ instance }}:
        hostName: {{ instance }}
{%   if _vm_type.startswith('ceph')                                                    %}
        ansible:
          host: {{ cifmw_networking_env_definition.instances[instance].networks.ctlplane.ip_v4 }}
        networks:
{%     for net in cifmw_networking_env_definition.instances[instance].networks.keys()  %}
          - name: {{ net }}
            subnetName: subnet1
{%       if net is match('ctlplane')                                                   %}
            defaultRoute: true
            fixedIP: {{ cifmw_networking_env_definition.instances[instance].networks.ctlplane.ip_v4 }}
{%       elif net is match('external')                                                 %}
            fixedIP: {{ hostvars[instance].ansible_default_ipv4.address }}
{%       endif                                                                         %}
{%     endfor                                                                          %}
{%   else                                                                              %}
        ansible:
          host: {{ "192.168.122.10" ~ loop.index0 }}
        networks:
          - defaultRoute: true
            fixedIP: {{ "192.168.122.10" ~ loop.index0 }}
            name: ctlplane
            subnet: subnet1
          - name: internalapi
            subnet: subnet1
          - name: storage
            subnetName: subnet1
          - name: tenant
            subnetName: subnet1
          - name: external
            subnetName: subnet1
{%   endif                                                                             %}
{% endfor                                                                              %}
