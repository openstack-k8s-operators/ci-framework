---
- name: Initialize empty _lm_dhcp_entries fact
  ansible.builtin.set_fact:
    _lm_dhcp_entries: []

# We match ^ctlplane networks mostly for the DCN case,
# where they have multiple ctlplane networks in the form:
# ctlplane_dcn1
# ctlplane_dcn2
# ...
# Using the selectattr + match, then selecting the first
# matched network should cover most of the cases if not all.
- name: Try/catch block with common variables
  block:
    - name: Reserve IPs on networks
      ansible.builtin.include_tasks: reserve_dnsmasq_ips.yml
      loop: "{{ cifmw_networking_env_definition.networks.keys() }}"
      loop_control:
        loop_var: "net_name"
        label: "{{ net_name }}"

    - name: "Inject DHCP entries for net {{ net_name }}"
      vars:
        cifmw_dnsmasq_dhcp_entries: "{{ _lm_dhcp_entries }}"
      ansible.builtin.include_role:
        name: "dnsmasq"
        tasks_from: "manage_host.yml"

    - name: Create per-network and .utility DNS entries
      vars:
        _ctlplane_net: >-
          {{
            vm.value.networks | dict2items |
            selectattr('key', 'match', '^ctlplane')
          }}
        _pub_net_data: >-
          {{
            vm.value.networks | dict2items |
            selectattr('key', 'match', cifmw_libvirt_manager_pub_net)
          }}
        _utility_net: >-
          {{
            (_ctlplane_net | length > 0 ) |
            ternary(_ctlplane_net, _pub_net_data)
          }}
        _ocp_name: >-
          {{
            vm.key |
            replace('ocp-', '')
          }}
        _hostname: >-
          {{
            (vm.key is match('^ocp.*')) |
            ternary(_ocp_name, vm.key)
          }}
        _compat_name: >-
          {%- set _id = vm.key | regex_replace('^.*-([0-9]+)$', '\\1') -%}
          {%- set _type = hostvars[vm.key].vm_type -%}
          {{ (_type, _id) | join('-') }}
        _domain: >-
          {{
             cifmw_reproducer_domain | default('local')
          }}
        _utility:
          - names:
              - "{{ _hostname }}.utility"
              - "{{ _hostname }}.{{ inventory_hostname }}"
              - "{{ _compat_name }}.utility"
              - "{{ _compat_name }}.{{ inventory_hostname }}"
            ips:
              - "{{ _utility_net.0.value.ip_v4 | default('') }}"
              - "{{ _utility_net.0.value.ip_v6 | default('') }}"
            state: present
        _entry: >-
          {%- for network in vm.value.networks | dict2items -%}
          {%- set _fqdn = [_hostname, network.key, _domain] | join('.') -%}
          {%- set _compat_fqdn = [_compat_name, network.key, _domain] |
                                 join('.')                              -%}
          {%- set _fqdns = [_fqdn, _compat_fqdn] -%}
          {%- set _ips = [network.value.ip_v4 | default(''),
                          network.value.ip_v6 | default('') ]-%}
          {%- set _rec = {'names': _fqdns, 'ips': _ips, 'state': 'present'} -%}
          {%- set _ = _utility.append(_rec) -%}
          {%- endfor -%}
          {{ _utility }}
      ansible.builtin.set_fact:
        _vm_records: "{{ _vm_records | default([]) + _entry }}"
      loop: "{{ cifmw_networking_env_definition.instances | dict2items }}"
      loop_control:
        loop_var: vm
        label: "{{ vm.key }}"

    - name: Inject VMs in the .utility zone
      vars:
        cifmw_dnsmasq_host_record: "{{ _vm_records }}"
      ansible.builtin.include_role:
        name: "dnsmasq"
        tasks_from: "manage_host_record.yml"
