---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# The below tasks reserves an IP from the dhcp range and assigns it to the
# specified mac address and vm

# The below information are required
#   vm_name       Name of the virtual machine/domain
#   mac_address   Associated MAC address
#   network
#     name        virtual network name
#     cidr        network notation

# The nth host is determined by looking to the vm_name
#   master/crc/ocp  10
#   worker          13
#   extraworker     100
#   compute         100      # Has the same index of extraworker

- name: "Dump net XML for {{ network.name }}"
  vars:
    _net_name: >-
      {{
        (network.name is match('^(ocp|default)')) |
        ternary(network.name, 'cifmw-' ~ network.name)
      }}
  register: _net_xml
  community.libvirt.virt_net:
    command: "get_xml"
    name: "{{ _net_name }}"

- name: "Parse XML for {{ network.name }}"
  failed_when: false
  register: _reserved
  community.general.xml:
    xmlstring: "{{ _net_xml.get_xml }}"
    xpath: "/network/ip/dhcp/host"
    content: "attribute"

- name: "Check for existing reservation for {{ vm_name }} in {{ network.name }}"  # noqa: name[template]
  vars:
    _reservation: >-
      {{
        _reserved.matches | default([]) |
        selectattr('host.name', 'equalto', vm_name) |
        first
      }}
  ansible.builtin.set_fact:
    reserved: >-
      {{
        _reservation.host.mac | default('')
      }}

- name: "Override MAC for {{ vm_name }} on {{ network.name }}"  # noqa: name[template]
  when:
    - reserved != ''
  ansible.builtin.set_fact:
    mac_address: "{{ reserved }}"

- name: "Generate IP address for {{ vm_name }}"
  vars:
    _net_ip_set: >-
      {{
        cifmw_libvirt_manager_vm_net_ip_set_default |
        combine(cifmw_libvirt_manager_vm_net_ip_set)
      }}
    _vm_name: >-
      {{
        vm_name |
        replace('cifmw-', '') |
        replace('-', '_') |
        split('_')
      }}
    _ip_index: >-
      {{
        _net_ip_set[_vm_name[0]] +
        (_vm_name[1] | default(0)) | int
      }}
  ansible.builtin.set_fact:
    _lm_ip_address: "{{ network.cidr | ansible.utils.nthhost(_ip_index) }}"

- name: Inject data in cifmw_libvirt_manager_mac_map
  vars:
    _net_name: >-
      {{
        (network.name is match('^(ocp|default)')) |
        ternary(network.name, 'cifmw-' ~ network.name)
      }}
    _dataset: >-
      {{
        {vm_name: [{'mac': mac_address,
                    'ip': _lm_ip_address,
                    'network': _net_name}]}
      }}
  ansible.builtin.set_fact:
    cifmw_libvirt_manager_mac_map: >-
      {{
        cifmw_libvirt_manager_mac_map | default({}) |
        combine(_dataset, recursive=true)
      }}

- name: Reserve IP address
  when:
    - reserved == ''
  block:
    - name: "Reserve IP for {{ vm_name }} on {{ network.name }}"  # noqa: name[template]
      vars:
        _vm_name: "{{ vm_name | replace('^cifmw-', '') }}"
        _net_name: >-
          {{
            (network.name is match('^(ocp|default)')) |
            ternary(network.name, 'cifmw-' ~ network.name)
          }}
      community.libvirt.virt_net:
        command: modify
        name: "{{ _net_name }}"
        uri: "qemu:///system"
        xml: |
          <host mac='{{ mac_address }}' name='{{ _vm_name }}' ip='{{ _lm_ip_address }}'>
            <lease expiry='60' unit='minutes'/>
          </host>
