---
# Reserve IPs in dnsmasq service, based on:
# - networking_mapper output (provides IPs and MAC)
# - networks configured on the host (_network_data fact built
#   in the create_networks.yml tasks)

- name: Loop on host IPs
  when:
    - host_data.value.networks[_cleaned_netname] is defined
  vars:
    _net_name: >-
      {{ (net.name is match '.*osp_trunk$') | ternary('ctlplane', net.name) }}
    _cleaned_netname: "{{ _net_name | regex_replace('^cifmw[_-]', '') }}"
    _net_data: "{{ host_data.value.networks[_cleaned_netname] }}"
    _ocp_name: >-
      {{
        host_data.key | replace('_', '-') |
        replace('ocp-worker', 'worker') |
        replace('ocp', 'master')
      }}
    _hostname: >-
      {{
        (host_data.key is match('^ocp.*')) |
        ternary(_ocp_name, host_data.key)
      }}
    cifmw_dnsmasq_host_network: "{{ net.name }}"
    cifmw_dnsmasq_host_name: "{{ _hostname }}"
    cifmw_dnsmasq_host_state: 'present'
    cifmw_dnsmasq_host_mac: "{{ _net_data.mac_addr }}"
    cifmw_dnsmasq_host_ips: >-
      {{
        [
          _net_data.ip_v4 | default(''),
          _net_data.ip_v6 | default('')
        ]
      }}
  ansible.builtin.include_role:
    name: "dnsmasq"
    tasks_from: "manage_host.yml"
  loop: "{{ cifmw_networking_env_definition.instances | dict2items }}"
  loop_control:
    label: "{{ host_data.key }} - {{ net.name }}"
    loop_var: "host_data"

- name: Manage common parameters
  vars:
    _translate: >-
      {{ cifmw_networking_mapper_interfaces_info_translations | default({}) }}
    _net_domain: >-
      {{
        (net.name in _translate) |
        ternary(_translate[net.name], [net.name])
      }}
    _net_name: >-
      {{ _net_domain | first }}
    _cleaned_netname: "{{ _net_name | regex_replace('^cifmw[_-]', '') }}"
  block:
    - name: Create host records
      when:
        - host_data.value.networks[_cleaned_netname] is defined
      vars:
        _net_data: "{{ host_data.value.networks[_cleaned_netname] }}"
        _ocp_name: >-
          {{
            host_data.key | replace('_', '-') |
            replace('ocp-worker', 'worker') |
            replace('ocp', 'master')
          }}
        _hostname: >-
          {{
            (host_data.key is match('^ocp.*')) |
            ternary(_ocp_name, host_data.key)
          }}
        _fqdn: >-
          {%- if net.name == cifmw_libvirt_manager_pub_net -%}
          {{ [_hostname ~ '.' ~ cifmw_reproducer_domain | default('local')] }}
          {%- else -%}
          {{
            [_hostname] | product(_net_domain) |
            map('join', '.') |
            product([cifmw_reproducer_domain | default('local')]) |
            map('join', '.')
          }}
          {%- endif -%}
        _record:
          - state: present
            ips: >-
              {{
                [
                  _net_data.ip_v4 | default(''),
                  _net_data.ip_v6 | default('')
                ]
              }}
            names: "{{ _fqdn }}"
      ansible.builtin.set_fact:
        host_records: "{{ host_records | default([]) + _record }}"
      loop: "{{ cifmw_networking_env_definition.instances | dict2items }}"
      loop_control:
        label: "{{ host_data.key }} - {{ net.name }}"
        loop_var: "host_data"

    - name: Debugging block/rescue
      block:
        - name: Assert we have records
          ansible.builtin.assert:
            that:
              - host_records is defined

      rescue:
        - name: Debug net.name
          ansible.builtin.debug:
            msg: "net.name: {{ net.name }}"

        - name: Debug _translate
          ansible.builtin.debug:
            var: _translate

        - name: Debug _net_domain
          ansible.builtin.debug:
            var: _net_domain

        - name: Debug _net_name
          ansible.builtin.debug:
            var: _net_name

        - name: Debug _cleaned_netname
          ansible.builtin.debug:
            var: _cleaned_netname

        - name: Fail for good
          ansible.builtin.fail:
            msg: "Error detected, please check debug above"

- name: Inject host records
  vars:
    cifmw_dnsmasq_host_record: "{{ host_records }}"
  ansible.builtin.include_role:
    name: "dnsmasq"
    tasks_from: "manage_host_record.yml"
