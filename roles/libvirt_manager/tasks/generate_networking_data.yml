---
# Pre-generate MAC addresses for future fixed IP support
- name: Pre-generate MAC addresses
  vars:
    _nic_info: >-
      {{
        (cifmw_libvirt_manager_basedir,
         'artifacts/interfaces-info.yml') |
         path_join
      }}
  block:
    - name: Ensure fact is existing, and empty
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_mac_map: {}

    - name: Check if we get an existing interfaces-info.yml
      register: _nic_exists
      ansible.builtin.stat:
        path: "{{ _nic_info }}"
        get_attributes: false
        get_checksum: false
        get_mime: false

    - name: Load file if exists
      when:
        - _nic_exists.stat.exists | bool
      register: _existing_nic_info
      ansible.builtin.slurp:
        path: "{{ _nic_info }}"

    - name: Update fact with existing content
      when:
        - _nic_exists.stat.exists | bool
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_mac_map: >-
          {{ _existing_nic_info.content | b64decode | from_yaml }}

    - name: Generate VM list
      vars:
        vm_list: >-
          {% set _vm_list = [] -%}
          {% set _range = [] -%}
          {% for _type in _cifmw_libvirt_manager_layout.vms.keys() -%}
          {%   set _range = range(0, _cifmw_libvirt_manager_layout.vms[_type].amount | default(1) | int) -%}
          {%   set _vms = [_type] | product(_range) | map('join', '-') -%}
          {%   set _ = _vm_list.append(_vms) -%}
          {% endfor -%}
          {{ _vm_list | list | flatten }}
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_all_vms: "{{ vm_list }}"

    - name: Generate VM list and associate MAC address
      ansible.builtin.import_tasks: generate_macs.yml

    - name: Dump MAC mapping
      ansible.builtin.copy:
        dest: "{{ _nic_info }}"
        content: "{{ cifmw_libvirt_manager_mac_map | to_nice_yaml }}"
# END MAC pre-generation management
#
# START generate all IPs using networking_mapper role/module
- name: Inject all VMs in the inventory
  vars:
    _vm_type: "{{ item.key | regex_replace('(cifmw\\-)?([a-z]+)\\-[0-9]+', '\\2') }}"
    _group: "{{ (_vm_type == 'crc') | ternary('ocp', _vm_type) }}"
  ansible.builtin.add_host:
    name: "{{ item.key }}"
    groups: "{{ _group }}s"
  loop: "{{ cifmw_libvirt_manager_mac_map | dict2items }}"

## TODO(cjeanner) Call networking_mapper now to get fixed IPs

- name: Manage networks if needed
  when:
    - _cifmw_libvirt_manager_layout.networks is defined
  ansible.builtin.include_tasks: create_networks.yml

# TODO(cjeanner) inject reserved IPs in dnsmasq, based
# on networking_mapper output
