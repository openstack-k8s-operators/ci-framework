---
# Pre-generate MAC addresses for future fixed IP support
- name: Pre-generate MAC addresses
  vars:
    _nic_info: >-
      {{
        (cifmw_libvirt_manager_basedir,
         'artifacts/interfaces-info.yml') |
         path_join
      }}
  block:
    - name: Ensure fact is existing, and empty
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_mac_map: {}

    - name: Check if we get an existing interfaces-info.yml
      register: _nic_exists
      ansible.builtin.stat:
        path: "{{ _nic_info }}"
        get_attributes: false
        get_checksum: false
        get_mime: false

    - name: Load file if exists
      when:
        - _nic_exists.stat.exists | bool
      register: _existing_nic_info
      ansible.builtin.slurp:
        path: "{{ _nic_info }}"

    - name: Update fact with existing content
      when:
        - _nic_exists.stat.exists | bool
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_mac_map: >-
          {{ _existing_nic_info.content | b64decode | from_yaml }}

    - name: Generate VM list
      vars:
        vm_list: >-
          {% set _vm_list = [] -%}
          {% set _range = [] -%}
          {% for _type in _cifmw_libvirt_manager_layout.vms.keys() -%}
          {%   set _range = range(0, _cifmw_libvirt_manager_layout.vms[_type].amount | default(1) | int) -%}
          {%   set _vms = [_type] | product(_range) | map('join', '-') -%}
          {%   set _ = _vm_list.append(_vms) -%}
          {% endfor -%}
          {{ _vm_list | list | flatten }}
      ansible.builtin.set_fact:
        cifmw_libvirt_manager_all_vms: "{{ vm_list }}"

    - name: Generate VM list and associate MAC address
      ansible.builtin.import_tasks: generate_macs.yml

    - name: Dump MAC mapping
      ansible.builtin.copy:
        dest: "{{ _nic_info }}"
        content: "{{ cifmw_libvirt_manager_mac_map | to_nice_yaml }}"
# END MAC pre-generation management
#
# START generate all IPs using networking_mapper role/module
- name: Inject all VMs in the inventory
  when:
    - (_cifmw_libvirt_manager_layout.vms[_vm_type].amount | default(1) | int) > 0
  vars:
    _vm_type: "{{ item.key | regex_replace('(cifmw\\-)?([a-z]+)\\-[0-9]+', '\\2') }}"
    _std_group: "{{ (_vm_type == 'crc') | ternary('ocp', _vm_type) }}"
    _group: >-
      {{
        (cifmw_baremetal_hosts is defined and
         cifmw_baremetal_hosts[item.key] is defined) |
        ternary('baremetal', _std_group)
      }}
  ansible.builtin.add_host:
    name: "{{ item.key }}"
    groups: "{{ _group }}s"
  loop: "{{ cifmw_libvirt_manager_mac_map | dict2items }}"
  loop_control:
    label: "Adding {{ item.key }} to {{ _group }}s"

- name: Generate all IPs based on MAC and networks
  vars:
    cifmw_networking_mapper_ifaces_info: >-
      {{ cifmw_libvirt_manager_mac_map }}
    cifmw_networking_mapper_network_name: "{{ cifmw_libvirt_manager_pub_net }}"
    cifmw_networking_mapper_gather_facts: false
  ansible.builtin.import_role:
    name: networking_mapper
# END networking_mapper

- name: Manage networks if needed
  when:
    - _cifmw_libvirt_manager_layout.networks is defined
  ansible.builtin.include_tasks: create_networks.yml

- name: Push debugging files
  vars:
    _dirname: >-
      {{
        (cifmw_libvirt_manager_basedir, 'artifacts') |
        ansible.builtin.path_join
      }}
  block:
    - name: Output _network_data
      ansible.builtin.copy:
        dest: "{{ _dirname }}/debug_network_data.yml"
        mode: "0644"
        content: "{{ _network_data | to_nice_yaml }}"

    - name: Output pub_net
      ansible.builtin.copy:
        dest: "{{ _dirname }}/debug_pub_net_value.txt"
        mode: "0644"
        content: "{{ cifmw_libvirt_manager_pub_net }}"

    - name: Output _cifmw_libvirt_manager_layout
      ansible.builtin.copy:
        dest: "{{ _dirname }}/debug_cifmw_libvirt_manager_layout.yml"
        mode: "0644"
        content: "{{ _cifmw_libvirt_manager_layout | to_nice_yaml }}"

- name: Craft patch for cifmw_networking_definition
  vars:
    _match: "^.*{{ cifmw_libvirt_manager_pub_net }}$"
    _lnet_data: >-
      {{
        _network_data |
        selectattr('name', 'match', _match) | first
      }}
    _dataset: |
      {% set ns = namespace(ip_start=30) %}
      networks:
        {{ _lnet_data.name | replace('cifmw_', '') }}:
      {% if _lnet_data.ranges[0].start_v4 is defined and _lnet_data.ranges[0].start_v4 | length > 0                     %}
        {% set net_4 = _lnet_data.ranges[0].start_v4 | ansible.utils.ipsubnet(_lnet_data.ranges[0].prefix_length_v4)    %}
          network-v4: {{ net_4}}
      {% endif                                                                                                          %}
      {% if _lnet_data.ranges[0].start_v6 is defined and _lnet_data.ranges[0].start_v6 | length > 0                     %}
          {% set net_6 = _lnet_data.ranges[0].start_v6 | ansible.utils.ipsubnet(_lnet_data.ranges[0].prefix_length_v6)  %}
          network-v6: {{ net_6 }}
      {% endif %}
      group-templates:
      {% for group in _cifmw_libvirt_manager_layout.vms.keys() if group != 'controller' and
          ((_cifmw_libvirt_manager_layout.vms[group].amount is defined and
            (_cifmw_libvirt_manager_layout.vms[group].amount | int) > 0) or
          _cifmw_libvirt_manager_layout.vms[group].amount is undefined) %}
      {% set _gr = (group == 'crc') | ternary('ocp', group)                                                             %}
        {{ _gr }}s:
          networks:
            {{ _lnet_data.name | replace('cifmw_', '') }}:
      {% if cifmw_networking_definition['group-templates'][_gr ~ 's']['network-template'] is undefined %}
      {%   if net_4 is defined %}
              range-v4:
                start: {{  net_4 | ansible.utils.nthhost(ns.ip_start | int ) }}
                length: {{ _cifmw_libvirt_manager_layout.vms[group].amount | default(1) }}
      {%   endif %}
      {%   if net_6 is defined %}
              range-v6:
                start: {{  net_6 | ansible.utils.nthhost(ns.ip_start | int) }}
                length: {{ _cifmw_libvirt_manager_layout.vms[group].amount | default(1) }}
      {%   endif %}
      {%   set ns.ip_start = ns.ip_start|int + (_cifmw_libvirt_manager_layout.vms[group].amount | default(1) | int ) + 1 %}
      {% endif %}
      {% endfor %}
      {% if cifmw_baremetal_hosts is defined and cifmw_baremetal_hosts | length > 0 %}
        baremetals:
          networks:
            {{ cifmw_libvirt_manager_pub_net }}:
      {%   if net_4 is defined and cifmw_networking_definition['group-templates']['baremetals']['network-template'] is undefined %}
              range-v4:
                start: {{  net_4 | ansible.utils.nthhost(ns.ip_start) }}
                length: {{ cifmw_baremetal_hosts | length }}
      {%   endif %}
      {%   if net_6 is defined and cifmw_networking_definition['group-templates']['baremetals']['network-template'] is undefined %}
              range-v6:
                start: {{  net_6 | ansible.utils.nthhost(ns.ip_start) }}
                length: {{ cifmw_baremetal_hosts | length }}
      {%   endif %}
      {% endif %}
      {% if _cifmw_libvirt_manager_layout.vms.controller is defined %}
      instances:
        controller-0:
          networks:
            {{ _lnet_data.name | replace('cifmw_', '') }}:
      {%   if net_4 is defined %}
              ip-v4: "{{ net_4 | ansible.utils.nthhost(9) }}"
      {%   endif %}
      {%   if net_6 is defined %}
              ip-v6: "{{ net_6 | ansible.utils.nthhost(9) }}"
      {%   endif %}
      {% endif %}
  block:
    - name: Expose patch for networking_mapper
      vars:
        _filtered: >-
          {{
            _dataset | from_yaml | dict2items |
            selectattr('value', '!=', none) | items2dict
          }}
      ansible.builtin.set_fact:
        cifmw_networking_mapper_definition_patch_01_libvirt: >-
          {{  _filtered }}

  rescue:
    - name: Failure detected - output _network_data
      ansible.builtin.debug:
        var: _network_data

    - name: Failure detected - output _match
      ansible.builtin.debug:
        var: _match

    - name: Set molecule fact
      ansible.builtin.set_fact:
        molecule_failure_block: "net_map_patch"

    - name: Finally fail for goof
      ansible.builtin.fail:
        msg: >-
          Failure detected. Check the debug outputs above

- name: Save networking_mapper patch
  ansible.builtin.copy:
    dest: >-
      {{
        (cifmw_libvirt_manager_basedir, 'artifacts', 'net-map-def-patch.yml') |
        ansible.builtin.path_join
      }}
    mode: "0644"
    content: >-
      {{ cifmw_networking_mapper_definition_patch_01_libvirt | to_nice_yaml }}

- name: Re-run networking_mapper with new network
  vars:
    cifmw_networking_mapper_ifaces_info: >-
      {{ cifmw_libvirt_manager_mac_map }}
    cifmw_networking_mapper_network_name: "{{ cifmw_libvirt_manager_pub_net }}"
    cifmw_networking_mapper_gather_facts: false
  ansible.builtin.import_role:
    name: networking_mapper

- name: Be sure to save current state of networking_mapper environment
  ansible.builtin.set_fact:
    _libvirt_manager_networking: "{{ cifmw_networking_env_definition }}"

- name: Unset patch
  ansible.builtin.set_fact:
    cifmw_networking_mapper_definition_patch_01_libvirt: {}

# START inject reserved IPs in dnsmasq, based on networking_mapper output
- name: Reserve IPs on networks
  when:
    - net.name not in _no_dnsmasq
  vars:
    _no_dnsmasq: >-
      {{
        cifmw_libvirt_manager_no_dnsmasq_nets_defaults +
        cifmw_libvirt_manager_no_dnsmasq_nets
      }}
  ansible.builtin.include_tasks: reserve_dnsmasq_ips.yml
  loop: "{{ _network_data }}"
  loop_control:
    loop_var: "net"
    label: "{{ net.name }}"

# We match ^ctlplane networks mostly for the DCN case,
# where they have multiple ctlplane networks in the form:
# ctlplane_dcn1
# ctlplane_dcn2
# ...
# Using the selectattr + match, then selecting the first
# matched network should cover most of the cases if not all.
- name: Create .utility zone entries
  when:
    - _net | length > 0
  vars:
    _ctlplane_net: >-
      {{
        vm.value.networks | dict2items |
        selectattr('key', 'match', '^ctlplane')
      }}
    _pub_net_data: >-
      {{
        vm.value.networks | dict2items |
        selectattr('key', 'match', cifmw_libvirt_manager_pub_net)
      }}
    _net: >-
      {{
        (_ctlplane_net | length > 0 ) |
        ternary(_ctlplane_net, _pub_net_data)
      }}
    _entry:
      - names:
          - "{{ vm.key }}.utility"
        ips:
          - "{{ _net.0.value.ip_v4 | default('') }}"
          - "{{ _net.0.value.ip_v6 | default('') }}"
        state: present
  ansible.builtin.set_fact:
    _vm_utility: "{{ _vm_utility | default([]) + _entry }}"
  loop: "{{ _libvirt_manager_networking.instances | dict2items }}"
  loop_control:
    loop_var: vm
    label: "{{ vm.key }}"

# This task might also be done via the reproducer/prepare_networking.yml
# but, depending on how we call the libvirt_manager, we might not have it.
# Using the same filename/permissions/content, we can ensure it's there without
# re-doing the same tasks.
# For the record, `local` ensures dnsmasq won't try to resolve names from other places.
- name: Ensure .utility is local
  become: true
  notify: "Restart dnsmasq"
  ansible.builtin.copy:
    dest: "/etc/cifmw-dnsmasq.d/utility.conf"
    mode: "0644"
    content: |
      local=/utility/
    validate: "/usr/sbin/dnsmasq -C %s --test"

- name: Inject VMs in the .utility zone
  vars:
    cifmw_dnsmasq_host_record: "{{ _vm_utility }}"
  ansible.builtin.include_role:
    name: "dnsmasq"
    tasks_from: "manage_host_record.yml"

- name: Ensure dnsmasq is reloaded now
  ansible.builtin.meta: flush_handlers
# END inject reserved IPs
