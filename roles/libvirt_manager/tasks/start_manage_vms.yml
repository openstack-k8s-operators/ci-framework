---
# Start and manage VMs, such as injecting SSH configurations,
# inject the VMs in the live inventory for later reference, and so on.
# In case we create a "blank" VM, without any OS, it shouldn't be known by
# ansible, so no access should be done.
- name: "Start VMs for type {{ vm_type }}"
  community.libvirt.virt:
    state: running
    name: "cifmw-{{ vm_type }}-{{ vm_id }}"
    uri: "qemu:///system"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: "Grab IPs for nodes type {{ vm_type }}"  # noqa: risky-shell-pipe
  register: vm_ips
  ansible.builtin.shell:
    cmd: >-
      virsh -c qemu:///system -q
      domifaddr --source arp
      cifmw-{{ nic.host }} | grep "{{ nic.mac }}"
  loop: "{{ public_net_nics }}"
  loop_control:
    loop_var: nic
    label: "{{ nic.host }}"
  retries: 20
  delay: 5
  until:
    - vm_ips.rc == 0
    - vm_ips.stdout != ''

- name: "Assert we have IPs for {{ vm_type }}"
  ansible.builtin.assert:
    that:
      - vm_ips.results | length > 0
    msg: >-
      There seems to be an error in the virtual network, no IP were
      detected.

- name: "(localhost) Inject ssh jumpers for {{ vm_type }}"
  when:
    - inventory_hostname != 'localhost'
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
    proxy_hostname: "{{ ansible_host | default(inventory_hostname) }}"
  ansible.builtin.blockinfile:
    create: true
    path: "{{ lookup('env', 'HOME') }}/.ssh/config"
    marker: "## {mark} {{ vm_ip.nic.host }}"
    mode: "0600"
    block: |-
      Host {{ vm_ip.nic.host }} cifmw-{{ vm_ip.nic.host }} {{ extracted_ip }}
        ProxyJump {{ ansible_user | default(lookup('env', 'USER')) }}@{{ proxy_hostname }}
        Hostname {{ extracted_ip }}
        User {{ 'core' if vm_ip.nic.host is match('^(crc|ocp).*') else 'zuul' }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: "({{ inventory_hostname }}) Inject ssh jumpers for {{ vm_type }}"  # noqa: name[template]
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
    identity_file: >-
      {{
        cifmw_libvirt_manager_basedir ~ '/artifacts/cifmw_ocp_access_key' if vm_type == 'ocp' else
        ansible_user_dir ~ '/.crc/machines/crc/id_ecdsa' if vm_type == 'crc' else
        ansible_user_dir ~ '/.ssh/cifmw_reproducer_key'
      }}
  ansible.builtin.blockinfile:
    create: true
    path: "{{ ansible_user_dir }}/.ssh/config"
    marker: "## {mark} {{ vm_ip.nic.host }}"
    mode: "0600"
    block: |-
      Host {{ vm_ip.nic.host }} cifmw-{{ vm_ip.nic.host }} {{ extracted_ip }}
        Hostname {{ extracted_ip }}
        User {{ 'core' if vm_ip.nic.host is match('^(crc|ocp)') else 'zuul' }}
        IdentityFile {{ identity_file }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: Inject nodes in the ansible inventory
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.add_host:
    name: "{{ vm_ip.nic.host }}"
    groups: "{{ (vm_type == 'crc') | ternary('ocp', vm_type) }}s"
    ansible_host: "{{ extracted_ip }}"
    ansible_ssh_user: "{{ _layout.vms[vm_type].admin_user | default(_init_admin_user) }}"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: "Create group inventory for {{ vm_type }}"
  vars:
    hosts: "{{ vm_ips.results }}"
    admin_user: "{{ vm_data.value.admin_user | default('zuul') }}"
  ansible.builtin.template:
    dest: "{{ cifmw_libvirt_manager_basedir }}/reproducer-inventory/{{ vm_type }}-group.yml"
    src: inventory.yml.j2

- name: "Wait for SSH on VMs type {{ vm_type }}"
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.wait_for:
    host: "{{ extracted_ip }}"
    port: 22
    delay: 5
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ extracted_ip }}"

- name: "Configure ssh access on type {{ vm_type }}"
  vars:
    _user: >-
      {{
        (vm_type is match('^(crc|ocp).*$')) |
        ternary('core', _init_admin_user)
      }}
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail;
      cat ~/.ssh/authorized_keys |
      ssh {{ _user }}@{{ vm_ip.nic.host }} "cat >> ~/.ssh/authorized_keys"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Configure VMs type {{ vm_type }}"
  when:
    - vm_type is not match('^(crc|ocp).*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |-
      test -d /home/zuul && exit 0;
      set -xe -o pipefail;
      echo "{{ vm_ip.nic.host }}" | sudo tee /etc/hostname;
      sudo hostname -F /etc/hostname;
      sudo useradd -m -d /home/zuul zuul;
      echo "zuul ALL=(ALL)  NOPASSWD: ALL" | sudo tee /etc/sudoers.d/zuul;
      sudo -u zuul mkdir -p /home/zuul/.ssh /home/zuul/src/github.com/openstack-k8s-operators;
      sudo cp ${HOME}/.ssh/authorized_keys /home/zuul/.ssh/;
      chown -R zuul: /home/zuul/.ssh;
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Inject private key on hosts {{ vm_type }}"
  when:
    - vm_type is match('^controller.*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_cifw"
    content: "{{ priv_key }}"
    owner: zuul
    group: zuul
    mode: "0400"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Inject public key on hosts {{ vm_type }}"
  when:
    - vm_type is match('^controller.*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_cifw.pub"
    content: "{{ pub_key }}"
    owner: zuul
    group: zuul
    mode: "0444"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: Update inventory to consume correct user
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.add_host:
    name: "{{ vm_ip.nic.host }}"
    groups: "{{ (vm_type == 'crc') | ternary('ocp', vm_type) }}s"
    ansible_host: "{{ extracted_ip }}"
    ansible_ssh_user: "{{ _layout.vms[vm_type].admin_user | default('zuul') }}"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"
