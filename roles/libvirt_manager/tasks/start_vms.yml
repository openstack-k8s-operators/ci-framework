---
- name: Refresh oooq_pool before starting VMs
  when:
    - "item.value.status == 'running'"
  community.libvirt.virt_pool:
    command: refresh
    name: "{{ item.key }}"
  loop: "{{ ansible_libvirt_pools | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "Start VMs for type {{ vm_type }}"
  when:
    - vm_data.start | default(true) | bool
    - vm_data.disk_file_name != 'blank'
  vars:
    _matcher: >-
      {{
        '(cifmw-)?' ~
        '([a-z0-9]+)-[0-9]+'
      }}
    vm_type: "{{ vm | regex_replace(_matcher, '\\2') }}"
    vm_data: >-
      {{
        _cifmw_libvirt_manager_layout.vms[vm_type]
      }}
  community.libvirt.virt:
    state: running
    name: "cifmw-{{ vm }}"
    uri: "qemu:///system"
  loop: "{{ cifmw_libvirt_manager_all_vms }}"
  loop_control:
    loop_var: vm
    pause: 1

- name: "Wait for SSH on started VMs"
  register: _async_wait_ssh
  when:
    - vm_data.start | default(true) | bool
    - vm_data.disk_file_name != 'blank'
  vars:
    _matcher: >-
      {{
        '(cifmw-)?' ~
        '([a-z0-9]+)-[0-9]+'
      }}
    vm_type: "{{ vm | regex_replace(_matcher, '\\2') }}"
    vm_data: >-
      {{
        _cifmw_libvirt_manager_layout.vms[vm_type]
      }}
    extracted_ip: >-
      {{
        _libvirt_manager_networking.instances[vm].networks[cifmw_libvirt_manager_pub_net]['ip_v4']
      }}
  ansible.builtin.wait_for:
    host: "{{ extracted_ip }}"
    port: 22
    delay: 2
  loop: "{{ cifmw_libvirt_manager_all_vms }}"
  loop_control:
    loop_var: vm
  async: 120
  poll: 0

- name: Ensure we get SSH on nodes
  when:
    - a_result.ansible_job_id is defined
  ansible.builtin.async_status:
    jid: "{{ a_result.ansible_job_id }}"
  loop: "{{ _async_wait_ssh.results }}"
  loop_control:
    loop_var: a_result
  register: a_poll_result
  until: a_poll_result.finished
  retries: 60
  delay: 2
