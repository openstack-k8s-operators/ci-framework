---
- name: "Grab IPs for nodes type {{ vm_type }}"  # noqa: risky-shell-pipe
  register: vm_ips
  when:
    - host.key is match(vm_type)
  vars:
    _mac: >-
      {{
        host.value |
        selectattr('network', 'equalto', cifmw_libvirt_manager_pub_net) |
        map(attribute='mac') | first
      }}
  ansible.builtin.shell:
    cmd: >-
      virsh -c qemu:///system -q
      domifaddr --source arp
      cifmw-{{ host.key }} | grep "{{ _mac }}"
      {% if cifmw_openshift_api_ip_address | default(false) %}
      | grep -v "{{ cifmw_openshift_api_ip_address }}/"
      {% endif %}
      {% if cifmw_openshift_ingress_ip_address | default(false) %}
      | grep -v "{{ cifmw_openshift_ingress_ip_address }}/"
      {% endif %}
  loop: "{{ cifmw_libvirt_manager_mac_map | dict2items }}"
  loop_control:
    loop_var: host
    label: "{{ host.key }}"
  retries: 20
  delay: 5
  until:
    - vm_ips.rc == 0
    - vm_ips.stdout != ''

- name: "Assert we have IPs for {{ vm_type }}"
  ansible.builtin.assert:
    that:
      - vm_ips.results | length > 0
    msg: >-
      There seems to be an error in the virtual network, no IP were
      detected.

- name: "Add the IP to the libvirt host port details fact for {{ vm_type }}"
  when:
    - vm_ip.skipped is undefined or not vm_ip.skipped | bool
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
    _mac: >-
      {{
        vm_ip.host.value |
        selectattr('network', 'equalto', cifmw_libvirt_manager_pub_net) |
        map(attribute='mac') | first
      }}
    entry:
      mac: "{{ _mac }}"
      host: "{{ vm_ip.host.key }}"
      ip: "{{ extracted_ip }}"
  ansible.builtin.set_fact:
    cifmw_hosts_ports: >-
      {{
        cifmw_hosts_ports | default({}) |
        combine({
          vm_ip.host.key : {
            cifmw_libvirt_manager_pub_net: entry
          }
        }, recursive=true)
      }}
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.host.key }}"

- name: "(localhost) Inject ssh jumpers for {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - inventory_hostname != 'localhost'
    - inventory_hostname != 'instance'  # needed for molecule
    - _need_start | bool
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
    proxy_hostname: "{{ ansible_host | default(inventory_hostname) }}"
    vm_name: "{{ vm_ip.host.key }}"
  ansible.builtin.blockinfile:
    create: true
    path: "{{ lookup('env', 'HOME') }}/.ssh/config"
    marker: "## {mark} {{ vm_name }} {{ inventory_hostname }}"
    mode: "0600"
    block: |-
      Host {{ vm_name }} {{ vm_name }}.{{ inventory_hostname }} cifmw-{{ vm_name }} {{ extracted_ip }}
        ProxyJump {{ ansible_user | default(lookup('env', 'USER')) }}@{{ proxy_hostname }}
        Hostname {{ extracted_ip }}
        User {{ 'core' if vm_name is match('^(crc|ocp).*') else 'zuul' }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_name }}"

- name: "({{ inventory_hostname }}) Inject ssh jumpers for {{ vm_type }}"  # noqa: name[template]
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - _need_start | bool
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
    identity_file: >-
      {{
        cifmw_libvirt_manager_basedir ~ '/artifacts/cifmw_ocp_access_key' if vm_type is match('^ocp.*') else
        ansible_user_dir ~ '/.crc/machines/crc/id_ecdsa' if vm_type == 'crc' else
        ansible_user_dir ~ '/.ssh/cifmw_reproducer_key'
      }}
    vm_name: "{{ vm_ip.host.key }}"
  ansible.builtin.blockinfile:
    create: true
    path: "{{ ansible_user_dir }}/.ssh/config"
    marker: "## {mark} {{ vm_name }}"
    mode: "0600"
    block: |-
      Host {{ vm_name }} {{ vm_name }}.{{ inventory_hostname }} cifmw-{{ vm_name }} {{ extracted_ip }}
        Hostname {{ extracted_ip }}
        User {{ 'core' if vm_name is match('^(crc|ocp)') else 'zuul' }}
        IdentityFile {{ identity_file }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_name }}"

- name: Inject nodes in the ansible inventory
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
  delegate_to: localhost
  ansible.builtin.add_host:
    name: "{{ vm_ip.host.key }}"
    groups: "{{ (vm_type == 'crc') | ternary('ocp', vm_type) }}s"
    ansible_host: "{{ vm_ip.host.key }}.{{ inventory_hostname }}"
    ansible_ssh_user: >-
      {{
        _cifmw_libvirt_manager_layout.vms[vm_type].admin_user |
        default(_init_admin_user)
      }}
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.host.key }}"

- name: "Create group inventory for {{ vm_type }}"
  vars:
    hosts: >-
      {{
        vm_ips.results | selectattr('host.key', 'match', vm_type)
      }}
    admin_user: "{{ vm_data.value.admin_user | default('zuul') }}"
  ansible.builtin.template:
    dest: "{{ cifmw_libvirt_manager_basedir }}/reproducer-inventory/{{ vm_type }}-group.yml"
    src: inventory.yml.j2

- name: "Wait for SSH on VMs type {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.wait_for:
    host: "{{ extracted_ip }}"
    port: 22
    delay: 5
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.host.key }}"

- name: "Configure ssh access on type {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - _need_start | bool
  vars:
    _user: >-
      {{
        (vm_type is match('^(crc|ocp).*$')) |
        ternary('core', _init_admin_user)
      }}
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail;
      cat ~/.ssh/authorized_keys |
      ssh -v {{ _user }}@{{ vm_ip.host.key }}.{{ inventory_hostname }} "cat >> ~/.ssh/authorized_keys"
  retries: 5
  delay: 10
  register: _ssh_access
  until: _ssh_access.rc == 0
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.host.key }}"

- name: "Configure VMs type {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - vm_type is not match('^(crc|ocp).*$')
    - _need_start | bool
  delegate_to: "{{ vm_ip.host.key }}.{{ inventory_hostname }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |-
      test -d /home/zuul && exit 0;
      set -xe -o pipefail;
      echo "{{ vm_ip.host.key }}" | sudo tee /etc/hostname;
      sudo hostname -F /etc/hostname;
      sudo useradd -m -d /home/zuul zuul;
      echo "zuul ALL=(ALL)  NOPASSWD: ALL" | sudo tee /etc/sudoers.d/zuul;
      sudo -u zuul mkdir -p /home/zuul/.ssh /home/zuul/src/github.com/openstack-k8s-operators;
      sudo cp ${HOME}/.ssh/authorized_keys /home/zuul/.ssh/;
      chown -R zuul: /home/zuul/.ssh;
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.host.key }}"

- name: "Inject private key on hosts {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - vm_type is match('^controller.*$')
    - _need_start | bool
  delegate_to: "{{ vm_ip.host.key }}.{{ inventory_hostname }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_cifw"
    content: "{{ priv_key }}"
    owner: zuul
    group: zuul
    mode: "0400"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.host.key }}"

- name: "Inject public key on hosts {{ vm_type }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
    - vm_type is match('^controller.*$')
    - _need_start | bool
  delegate_to: "{{ vm_ip.host.key }}.{{ inventory_hostname }}"
  remote_user: "{{ _init_admin_user }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_cifw.pub"
    content: "{{ pub_key }}"
    owner: zuul
    group: zuul
    mode: "0444"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.host.key }}"

- name: Update inventory to consume correct user
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  when:
    - vm_ip.host.key is match(vm_type ~ '.*')
  ansible.builtin.add_host:
    name: "{{ vm_ip.host.key }}"
    groups: "{{ (vm_type == 'crc') | ternary('ocp', vm_type) }}s"
    ansible_host: "{{ vm_ip.host.key }}.{{ inventory_hostname }}"
    ansible_ssh_user: "{{ _cifmw_libvirt_manager_layout.vms[vm_type].admin_user | default('zuul') }}"
    host_ip: "{{ extracted_ip }}"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.host.key }}"
