---
- name: "Create VM overlays or images for {{ vm_type }}"
  become: true
  vars:
    _base_img_name: >-
      {{
        (vm_data.value.image_local_dir | default(ansible_user_dir),
         vm_data.value.disk_file_name) |
         path_join
      }}
    _img: >-
      {{
        (vm_type is match('.*ocp.*')) |
        ternary(_base_img_name ~ "_" ~ vm_id ~ ".qcow2",
                _base_img_name)
      }}
    _workload: "{{ cifmw_libvirt_manager_basedir }}/workload"
    _ocp_pool: "{{ ansible_libvirt_pools['oooq_pool']['path'] | default('') }}"
    _chdir: >-
      {{ (vm_type is match('.*ocp.*')) | ternary(_ocp_pool, _workload) }}
  block:
    - name: "Create VM overlay for {{ vm_type }}"
      vars:
        _vm_img: "{{ vm_type }}-{{ vm_id }}.qcow2"
      ansible.builtin.command:
        cmd: >-
          qemu-img create
          {% if vm_data.value.disk_file_name != 'blank' %}
          -o backing_file={{ _img }},backing_fmt=qcow2
          {% endif %}
          -f qcow2
          "{{ _vm_img }}"
          "{{ vm_data.value.disksize|default ('40') }}G"
        creates: "{{ vm_type }}-{{ vm_id }}.qcow2"
        chdir: "{{ _chdir }}"
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"

    - name: "Ensure file ownership and rights for {{ vm_type }}"
      become: true
      vars:
        _vm_img: "{{ vm_type }}-{{ vm_id }}.qcow2"
      ansible.builtin.file:
        path: "{{ (_chdir, _vm_img) | path_join }}"
        group: "qemu"
        mode: "0664"
        owner: "{{ ansible_user_id }}"
        state: file
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"

- name: "Manipulate XMLs and load them if provided for {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is defined
  block:
    - name: Load OCP VMs
      ansible.builtin.include_tasks: ocp_xml.yml
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        loop_var: "_xml"
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"

- name: "Define the requested virtual machines {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is undefined
  block:
    - name: "Create the requested extra disks for {{ vm_type }}"
      when:
        - vm_data.value.extra_disks_num is defined
        - vm_data.value.extra_disks_num | int != 0
      vars:
        vol_prefix: "cifmw-{{ vm_type }}-{{ vm_id }}"
        vol_num: "{{ vm_data.value.extra_disks_num }}"
        vol_size: "{{ vm_data.value.extra_disks_size }}"
      ansible.builtin.include_tasks: volumes.yml
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"
        loop_var: vms_id

    - name: "Define VMs with default template for type {{ vm_type }}"
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'domain.xml.j2') }}"
        uri: "qemu:///system"
      loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"

- name: "Attach listed networks to the VMs {{ vm_type }}"
  vars:
    vm_item: "{{ vm_type }}-{{ vm_id }}"
    networks: "{{ vm_data.value.nets }}"
  ansible.builtin.include_tasks: net_to_vms.yml
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: "Fetch per-vm ports for {{ vm_type }}"
  register: _vm_ports
  ansible.builtin.command:
    cmd: >-
      virsh -c qemu:///system -q
      domiflist cifmw-{{ vm_type }}-{{ vm_id }}
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: "Format port list to something more consumable for {{ vm_type }}"
  vars:
    _prefixed_net_names: >-
      {{
        _virt_nets.list_nets |
        map('regex_replace', '^', 'cifmw-')
      }}
    _vals: >-
      {{
        item.stdout_lines |
        product([' ' ~ vm_type ~ '-' ~ index]) |
        map('join') |
        map('split')
      }}
    _macs: >-
      {{
        _vals |
        map('zip', ['nic', 'type', 'network', 'driver', 'mac', 'host' ]) |
        map('map', 'reverse') |
        map('community.general.dict')
      }}
  ansible.builtin.set_fact:
    macs: >-
      {{
        (macs | default([]) + _macs) |
        selectattr('network', 'in', _virt_nets.list_nets + _prefixed_net_names)
      }}
    public_net_nics: >-
      {{
        (public_net_nics | default([]) + _macs) |
        selectattr('network',
                   'match', '^(cifmw-)?' ~ cifmw_libvirt_manager_pub_net) |
        selectattr('host', 'match', '.*' ~ vm_type ~ '.*')
      }}
  loop: "{{ _vm_ports.results }}"
  loop_control:
    index_var: index
    label: "{{ vm_type }}-{{ index }}"

- name: "Assert we have public_net_nics and macs data for {{ vm_type }}"
  ansible.builtin.assert:
    that:
      - macs | length > 0
      - public_net_nics | length > 0
    msg: >-
      Something went wrong while trying to extract interfaces associated to
      cifmw_libvirt_manager_pub_net ({{ cifmw_libvirt_manager_pub_net }}).
      Please double-check your scenario!

- name: "Start and grab IP if image is not blank for {{ vm_type }}"
  when:
    - vm_data.value.disk_file_name != 'blank'
  ansible.builtin.include_tasks: start_manage_vms.yml
