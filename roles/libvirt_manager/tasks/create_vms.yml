---
- name: "Create VM overlays or images for {{ vm_type }}"
  become: true
  vars:
    _base_img_name: >-
      {{
        (vm_data.value.image_local_dir | default(ansible_user_dir),
         vm_data.value.disk_file_name) |
         path_join
      }}
    _img: >-
      {{
        (vm_type is match('.*ocp.*')) |
        ternary(_base_img_name ~ "_" ~ vm_id ~ ".qcow2",
                _base_img_name)
      }}
  ansible.builtin.command:
    cmd: >-
      qemu-img create
      {% if vm_data.value.disk_file_name != 'blank' %}
      -o backing_file={{ _img }},backing_fmt=qcow2
      {% endif %}
      -f qcow2
      "{{ vm_type }}-{{ vm_id }}.qcow2"
      "{{ vm_data.value.disksize|default ('40') }}G"
    creates: "{{ vm_type }}-{{ vm_id }}.qcow2"
    chdir: "{{ cifmw_libvirt_manager_basedir }}/workload"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Ensure file ownership and rights
  become: true
  ansible.builtin.file:
    path: >-
      {{
        (cifmw_libvirt_manager_basedir, 'workload',
        vm_type ~ '-' ~ vm_id ~ '.qcow2') |
        path_join
      }}
    group: "qemu"
    mode: "0664"
    owner: "{{ ansible_user_id }}"
    state: file
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Manipulate XMLs and load them if provided
  when:
    vm_data.value.xml_paths is defined
  block:
    - name: "Set disk path for {{ vm_type }}"
      community.general.xml:
        path: "{{ _xml }}"
        xpath: "/domain/devices/disk/source"
        attribute: "file"
        value: >-
          {{ (cifmw_libvirt_manager_basedir,
              'workload',
              vm_type ~ '-' ~ _xml_id ~ '.qcow2') |
              path_join
          }}
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        loop_var: "_xml"
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"

    - name: "Remove document description header for type ${{ vm_type }}"
      ansible.builtin.replace:
        path: "{{ _xml }}"
        regexp: "<\\?xml version='1.0' encoding='UTF-8'\\?>\n"
        replace: ""
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        loop_var: "_xml"
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"
    - name: "Load VM XMLs for type {{ vm_type }}"
      register: _vm_xmls
      ansible.builtin.slurp:
        path: "{{ item }}"
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"

    - name: "Define VMs with custom XML for type {{ vm_type }}"
      community.libvirt.virt:
        command: define
        xml: "{{ _xml['content'] | b64decode }}"
        uri: "qemu:///system"
      loop: "{{ _vm_xmls.results }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"
        loop_var: '_xml'


- name: "Define VMs with default template for type {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is undefined
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'domain.xml.j2') }}"
    uri: "qemu:///system"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Attach listed networks to the VMs
  vars:
    vm_item: "{{ vm_type }}-{{ vm_id }}"
    networks: "{{ vm_data.value.nets }}"
  ansible.builtin.include_tasks: net_to_vms.yml
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Fetch per-vm ports
  register: _vm_ports
  ansible.builtin.command:
    cmd: >-
      virsh -c qemu:///system -q
      domiflist cifmw-{{ vm_type }}-{{ vm_id }}
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Format port list to something more consumable
  vars:
    _fixed_net_name: >-
      {{
        _fixed_ip_nets | dict2items |
        map(attribute='key') |
        map('regex_replace', '^', 'cifmw-')
      }}
    _vals: >-
      {{
        item.stdout_lines |
        product([' ' ~ vm_type ~ '-' ~ index]) |
        map('join') |
        map('split')
      }}
    _macs: >-
      {{
        _vals |
        map('zip', ['nic', 'type', 'network', 'driver', 'mac', 'host' ]) |
        map('map', 'reverse') |
        map('community.general.dict')
      }}
  ansible.builtin.set_fact:
    macs: >-
      {{
        (macs | default([]) + _macs) |
        selectattr('network', 'in', _fixed_net_name)
      }}
    public_net_nics: >-
      {{
        (public_net_nics | default([]) + _macs) |
        selectattr('network', 'match', '^(cifmw-)?' ~ cifmw_libvirt_manager_pub_net) |
        selectattr('host', 'match', '.*' ~ vm_type ~ '.*')
      }}
  loop: "{{ _vm_ports.results }}"
  loop_control:
    index_var: index
    label: "{{ vm_type }}-{{ index }}"

- name: Fix IPs for selected networks and VMs
  vars:
    vm_name: "cifmw-{{ mac_node.host }}"
    net_name: "{{ mac_node.network | replace('cifmw-', '') }}"
    network:
      cidr: "{{ _fixed_ip_nets[net_name]['range'] }}"
      name: "{{ net_name }}"
    mac_address: "{{ mac_node.mac }}"
  ansible.builtin.include_tasks: reserve_ip.yml
  loop: "{{ macs }}"
  loop_control:
    loop_var: mac_node
    label: "{{ mac_node.host }}"

- name: Start and grab IP if image is not blank
  when:
    - vm_data.value.disk_file_name != 'blank'
  ansible.builtin.include_tasks: start_manage_vms.yml
