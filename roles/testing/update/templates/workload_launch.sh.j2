#!/bin/bash
#
# Script that spawns an instance
# Has 5 operational modes:
#   - workload: spawn VM with floating ip (default) or external ip in case of
#               SRIOV
#   - sanity:   spawn VM with floating/external ip assert it's ssh'able,
#               delete VM and associated resources
#   - sanityfast: same than sanity but fails faster
#
#   - workload_traffic: spawn a vm and generate traffic to it before
#     anything else so that the interface counters are near 0.
#
#   - cleanup:  clean up VM and other elements created previously
#
set -o pipefail
set -x

IN_TEARDOWN=false
FAST=""
SSH="ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
WKL_MODE=${WKL_MODE:-}

if [[ -n ${1} ]]; then
    MODE="${1}"
else
    MODE="workload"
fi

if [ -n "${WKL_MODE}" ]; then
    MODE="${WKL_MODE}"
fi

# Run openstack command with an error check. This will trigger the
# cleanup_on_exit trap for sanity and sanityfast mode. This doesn't
# work for command expansion - $(...) expression.
function os_cmd {
    set -e
    openstack "$@"
    set +e
}

function set_vm_ip {
    ## assign floating ip or external ip
    local workload_sriov={{workload_sriov|default(false) | bool | ternary("True", "")}}
    if [ -n "${workload_sriov}" ]; then
        EXTERNAL_IP=$(os_cmd port show "${SRIOV_PORT}" -f yaml -c fixed_ips | awk '/ip_address/{print $3;exit}')
        VM_IP=${EXTERNAL_IP}
    else
        INSTANCE_FIP=$(os_cmd floating ip create -f value -c floating_ip_address "${EXTERNAL_NET_NAME}")
        if [ -z "${INSTANCE_FIP}" ]; then
            echo "Cannot get a new FIP"
            exit 66
        fi
        echo "Assign FIP[${INSTANCE_FIP}] to server ${INSTANCE_NAME}"
        os_cmd server add floating ip ${INSTANCE_NAME} ${INSTANCE_FIP}
        VM_IP="${INSTANCE_FIP}"
    fi
}

# This function get installed as a trap in sanity and sanityfast.
cleanup_on_exit() {
    RC=$?
    echo "Tearing down with rc=$RC"
    set +e
    # We guard against failure during teardown.
    if ! ${IN_TEARDOWN}; then
        if [ -n "${FAST}" ]; then
            sanity_teardown $FAST
        else
            sanity_teardown
        fi
    else
        # We are in teardown, just abort.
        echo "Failed during Teardown."
        exit 64
    fi
    if [ -n "${INSTANCE_NAME}" -a -e "${HOME}/${INSTANCE_NAME}" ]; then
        echo "Deleting ~/${INSTANCE_NAME}"
        rm -f "${HOME}/${INSTANCE_NAME}"
    fi
    exit $RC
}

function generate_traffic {
    if [ -z "${VM_IP}" ]; then
        set_vm_ip
    fi
    if ! ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} test -e ${IPERF_BIN}; then
        NS_FIXUP=false
        # We only test the grep part, hence the +o pipefail.
        if (set +o pipefail; \
            ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} nslookup -type=a github.com 2>&1 | \
                grep 'no servers could be reached'); then
            NS_FIXUP=true
            # we have a name resolution issue in the vm. Work around it.
            ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} cat /etc/resolv.conf > resolv.back
            cat /etc/resolv.conf | ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} sudo tee /etc/resolv.conf
        fi
        ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} curl -L -k -O "${IPERF_STATIC_URL}"
        if $NS_FIXUP; then
            cat resolv.back | ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} sudo tee /etc/resolv.conf
            rm -f resolv.back
        fi
        if ! ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} chmod +x ${IPERF_BIN}; then
            echo "We could not get the file, abort traffic generation."
            return 0
        fi
    fi
    if ! ${SSH} -i "${SSH_KEY_FILE}" cirros@${VM_IP} ps fauxw | grep -q ${IPERF_BIN}; then
        ${SSH} -i "${SSH_KEY_FILE}" -T cirros@${VM_IP} ./${IPERF_BIN} -D -s
    fi
    if ! openstack security group show ${SECGROUP_NAME} | grep -q 'port_range.*=.5201'; then
        openstack security group rule create --proto tcp --dst-port 5201 ${SECGROUP_NAME}
    fi
    if ! rpm -qa | grep iperf3; then
        sudo dnf -y install iperf3
    fi
    if [ ! -e iperf3.log ]; then
        echo -n "Generating traffic ...."
        iperf3 -c ${VM_IP} -t 60  --connect-timeout 3000 --logfile iperf3.log
        rc=$?
        if [ "${rc}" -ne 0 ]; then
            echo "Error: Problem generating traffic using iperf: ${rc}"
            cat iperf3.log
            exit 1
        fi
        echo " done"
    fi
}

function prepare_env {

    export IMAGE_URL='{{ workload_image_url|default("http://download.cirros-cloud.net/0.5.2/cirros-0.5.2-x86_64-disk.img") }}'
    export IMAGE_NAME="{{ workload_image_name|default('upgrade_workload_${SUFFIX}')}}"
    export IMAGE_FILE="$(mktemp -d )/upgrade_workload_image.qcow2"
    export INSTANCE_NAME="instance_${SUFFIX}"
    export INSTANCE_USER='{{ workload_user|default("cirros") }}'
    export KEYPAIR_NAME="userkey_${SUFFIX}"
    export FLAVOR_NAME="v1-{{ workload_memory|default('512') }}M-{{ workload_disk|default('10') }}G-${SUFFIX}"
    export SECGROUP_NAME="allow-icmp-ssh-${SUFFIX}"
    export TENANT_NET_NAME="internal_net_${SUFFIX}"
    export EXTERNAL_NET_NAME='{{ external_network_name|default("public") }}'
    export SRIOV_PORT="sriov_port_${SUFFIX}"
    export DPDK_PORT="dpdk_port_${SUFFIX}"
    export INSTANCE_FILE="${HOME}/{{ cifmw_update_artifacts_basedir_suffix }}/vm_info.sh"
    export WORKLOAD_FILE="${HOME}/{{ cifmw_update_artifacts_basedir_suffix }}/workload_suffix"
    export SSH_KEY_FILE="${HOME}/.ssh/${KEYPAIR_NAME}"
    mkdir -p "${HOME}/{{ cifmw_update_artifacts_basedir_suffix }}"
}

function sanity_check {
    local timeout_seconds=${1:-180}
    local elapsed_seconds=0

    echo "Waiting for compute services to be up"

    while ! ( openstack compute service list --service nova-compute -f value -c State && openstack network agent list -f value -c Alive ); do
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: clients commands not working."
            openstack compute service list --service nova-compute
            openstack network agent list
            exit 1
        fi
        sleep 5
        elapsed_seconds=$(( elapsed_seconds + 5 ))
    done

    elapsed_seconds=0

    while openstack compute service list --service nova-compute -f value -c State | grep -q 'down' || openstack network agent list -f value -c Alive | grep -q 'false'; do
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Some nova-compute or network agent services are down"
            openstack compute service list --service nova-compute
            openstack network agent list
            exit 1
        fi
        sleep 5
        elapsed_seconds=$(( elapsed_seconds + 5 ))
    done
    echo "All compute and networking services are up and running"
}

function sanity_teardown {
    IN_TEARDOWN=true
    # remove auxiliary resources

    local timeout_seconds=${1:-180}
    local elapsed_seconds=0
    {% if workload_sriov|default(false) | bool -%}
    openstack port delete "${SRIOV_PORT}"
    {% elif workload_dpdk|default(false) | bool -%}
    openstack port delete "${DPDK_PORT}"
    {% else -%}
    if [ -n "${INSTANCE_FIP}" ]; then
        echo "Remove ${INSTANCE_FIP} from ${INSTANCE_NAME}"
        openstack server remove floating ip ${INSTANCE_NAME} ${INSTANCE_FIP}
        grep "${INSTANCE_FIP}" "${INSTANCE_FILE}"  && rm "${INSTANCE_FILE}"

        echo "Delete floating ip ${INSTANCE_FIP}"
        openstack floating ip delete ${INSTANCE_FIP}
    fi

    {%- endif %}

    {% if cifmw_update_create_volume | default(True) | bool -%}
    echo "Removing volume from the VM"
    openstack server remove volume ${INSTANCE_NAME} ${CINDER_VOL_ID}
    {%- endif %}

    echo "Remove VM ${INSTANCE_NAME}"
    openstack server delete "${INSTANCE_NAME}"
    while true; do
        openstack server list -f value -c Name | grep -q "${INSTANCE_NAME}"
        if [[ ${?} -eq 1 ]]; then
            echo "Instance ${INSTANCE_NAME} successfully removed"
            break
        fi
        sleep 5
        elapsed_seconds=$(( elapsed_seconds + 5 ))
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Failed to remove instance ${INSTANCE_NAME}"
            exit 1
        fi
    done

    {% if cifmw_update_create_volume | default(True) | bool -%}
    if [ -n "${CINDER_VOL_ID}" ]; then
        echo "Remove cinder volume ${CINDER_VOL_ID}"
        openstack volume delete --force ${CINDER_VOL_ID}

        elapsed_seconds=0
        while true; do
            openstack volume list -f value -c ID | grep -q ${CINDER_VOL_ID}
            if [[ ${?} -eq 1 ]]; then
                echo "The volume ${CINDER_VOL_ID} successfully removed"
                break
            fi

            sleep 5
            elapsed_seconds=$((elapsed_seconds + 5 ))

            if [ $elapsed_seconds -ge $timeout_seconds ]; then
                echo "FAILURE: Failed to remove the volume ${CINDER_VOL_ID}"
                exit 1
            fi
        done
    fi
    {%- endif %}

    echo "Clear default gateway from ${TENANT_NET_NAME}_router"
    openstack router unset --external-gateway "${TENANT_NET_NAME}"_router

    echo "Remove subnet ${TENANT_NET_NAME}_subnet from router ${TENANT_NET_NAME}_router"
    openstack router remove subnet "${TENANT_NET_NAME}"_router "${TENANT_NET_NAME}"_subnet

    echo "Remove router ${TENANT_NET_NAME}_router"
    openstack router delete "${TENANT_NET_NAME}_router"

    echo "Remove subnet ${TENANT_NET_NAME}_subnet"
    openstack subnet delete "${TENANT_NET_NAME}_subnet"

    echo "Remove network ${TENANT_NET_NAME}"
    openstack network delete "${TENANT_NET_NAME}"

    echo "Remove security group ${SECGROUP_NAME}"
    openstack security group delete "${SECGROUP_NAME}"

    echo "Remove keypair ${KEYPAIR_NAME}"
    openstack keypair delete "${KEYPAIR_NAME}"

    echo "Remove image ${IMAGE_NAME}"
    openstack image delete "${IMAGE_NAME}"

    echo "Remove flavor ${FLAVOR_NAME}"
    openstack flavor delete "${FLAVOR_NAME}"

    echo "Remove file ${IMAGE_FILE}"
    rm -Rf "$(dirname ${IMAGE_FILE})"
    IN_TEARDOWN=false
}

function workload_launch {
    # create workload
    timeout_seconds=${1:-120}
    ssh_timeout_seconds=${1:-180}
    local workload_sriov={{workload_sriov|default(false) | bool | ternary("True", "")}}
    local workload_dpdk={{workload_dpdk|default(false) | bool | ternary("True", "")}}

    ## create image
    openstack image list | grep ${IMAGE_NAME}
    if [ $? -ne 0 ]; then
        echo "Downloading image ${IMAGE_URL}"
        curl -4fsSLk --retry 5 -o ${IMAGE_FILE} ${IMAGE_URL}

        if [ $? -ne 0 ]; then
            echo "Failed to download ${IMAGE_URL}"
            exit 1
        fi

        echo "Uploading ${IMAGE_NAME} to Glance"
        openstack image create \
            --file ${IMAGE_FILE} \
            --disk-format qcow2 \
            --container-format bare \
            ${IMAGE_NAME}
    fi

    ## create user key
    openstack keypair list | grep ${KEYPAIR_NAME}
    ## create user key
    if ! openstack keypair list | grep "${KEYPAIR_NAME}"; then
        echo "Creating keypair ${KEYPAIR_NAME}"
        ssh-keygen -t ecdsa -C "${KEYPAIR_NAME}" -f "${SSH_KEY_FILE}" -N ''
        cat "${SSH_KEY_FILE}"
        os_cmd keypair create --public-key "${SSH_KEY_FILE}.pub" "${KEYPAIR_NAME}"
    fi

    ## create flavor
    openstack flavor list | grep ${FLAVOR_NAME}
    if [ $? -ne 0 ]; then
        echo "Creating flavor ${FLAVOR_NAME}"
        if [ -n "${workload_dpdk}" ]; then
            os_cmd flavor create --vcpus {{ workload_vcpu|default(1) }} \
                --ram {{ workload_memory|default(512) }} \
                --disk {{ workload_disk|default(10) }} \
                --swap {{ workload_swap|default(1) }} \
                --property hw:mem_page_size=large \
                --property hw:cpu_policy=dedicated \
                --property hw:emulator_threads_policy=share \
                $FLAVOR_NAME
        else
            os_cmd flavor create --vcpus {{ workload_vcpu|default(1) }} \
                --ram {{ workload_memory|default(512) }} \
                --disk {{ workload_disk|default(10) }} \
                --swap {{ workload_swap|default(1) }} \
                $FLAVOR_NAME
        fi
    fi

    ## create networking
    openstack network list | grep ${TENANT_NET_NAME}
    if [ $? -ne 0 ]; then
        NAMESERVER=$(grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' /etc/resolv.conf  | head -1)
        echo "Creating router ${TENANT_NET_NAME}_router"
        os_cmd router create ${TENANT_NET_NAME}_router

        echo "Creating network ${TENANT_NET_NAME}"
        if [ -n "${workload_dpdk}" ]; then
            os_cmd network create ${TENANT_NET_NAME} --provider-network-type geneve
        else
            os_cmd network create ${TENANT_NET_NAME}
        fi

        echo "Creating subnet ${TENANT_NET_NAME}_subnet"
        os_cmd subnet create \
            --subnet-range 192.168.0.0/24 \
            --allocation-pool start=192.168.0.10,end=192.168.0.100 \
            --gateway 192.168.0.254 \
            --dns-nameserver ${NAMESERVER} \
            --network ${TENANT_NET_NAME} \
            ${TENANT_NET_NAME}_subnet

        echo "Add subnet ${TENANT_NET_NAME}_subnet to router ${TENANT_NET_NAME}_router"
        os_cmd router add subnet  ${TENANT_NET_NAME}_router ${TENANT_NET_NAME}_subnet

        echo "Set external-gateway for ${TENANT_NET_NAME}_router"
        os_cmd router set --external-gateway ${EXTERNAL_NET_NAME} ${TENANT_NET_NAME}_router
    fi

    ## create security group
    openstack security group list | grep ${SECGROUP_NAME}
    if [ $? -ne 0 ]; then
        echo "Creating security group ${SECGROUP_NAME}"
        os_cmd security group create ${SECGROUP_NAME}

        echo "Creating rules for ports 22,80,443 in security group ${SECGROUP_NAME}"
        os_cmd security group rule create --proto icmp ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 22 ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 80 ${SECGROUP_NAME}
        os_cmd security group rule create --proto tcp --dst-port 443 ${SECGROUP_NAME}
    fi

    ## create sriov port
    {% if workload_sriov|default(false) | bool -%}
    openstack port create --vnic-type direct --network "${EXTERNAL_NET_NAME}" \
        --binding-profile trusted=true "${SRIOV_PORT}"
    {%- endif %}

    ## create dpdk port
    {% if workload_dpdk|default(false) | bool -%}
    openstack port create --vnic-type normal --network "${TENANT_NET_NAME=}" "${DPDK_PORT}"
    {%- endif %}


    ## create instance
    TENANT_NET_ID=$( openstack network show -f value -c id "${TENANT_NET_NAME}" )

    echo "Creating overcloud instance ${INSTANCE_NAME}"
    {% if workload_sriov|default(false) | bool -%}
    os_cmd server create  \
        --image "${IMAGE_NAME}" \
        --flavor "${FLAVOR_NAME}" \
        --key-name "${KEYPAIR_NAME}" \
        --port "${SRIOV_PORT}" \
        "${INSTANCE_NAME}"
    {% else -%}
    os_cmd server create  \
        --image "${IMAGE_NAME}" \
        --flavor "${FLAVOR_NAME}" \
        --security-group "${SECGROUP_NAME}" \
        --key-name  "${KEYPAIR_NAME}" \
        --nic net-id="${TENANT_NET_ID}" \
        "${INSTANCE_NAME}"
    {%- endif %}

    elapsed_seconds=0
    while true; do
        INSTANCE_STATUS=$(os_cmd server show -f value -c status "${INSTANCE_NAME}")
        case "${INSTANCE_STATUS}" in
            "ACTIVE")
                echo "${INSTANCE_NAME} reached 'ACTIVE' status"
                break
                ;;
            "ERROR")
                echo "${INSTANCE_NAME} failed"
                exit 1
        esac
        sleep 3
        elapsed_seconds=$((elapsed_seconds + 3))
        if [ $elapsed_seconds -ge $timeout_seconds ]; then
            echo "FAILURE: Instance failed to boot within ${elapsed_seconds} seconds"
            openstack server show ${INSTANCE_NAME} -f json 2>&1
            exit 1
        fi
    done

    set_vm_ip

    {% if cifmw_update_create_volume | default(true) | bool -%}
    ## create and attach a volume
    ## The cinder resource must be created and available to be attach
    CINDER_VOL_ID=$(os_cmd volume create --size 1 "vol_${SUFFIX}" -f value -c id)

    elapsed_seconds=0
    if [ -n "${CINDER_VOL_ID}" ]; then
        while true; do
            VOL_STATUS=$(os_cmd volume show ${CINDER_VOL_ID} -f value -c status)
            if [[ ${VOL_STATUS} == "available" ]]; then
                echo "The volume ${CINDER_VOL_ID} successfully created and available"
                break
            fi

            sleep 5
            elapsed_seconds=$((elapsed_seconds + 5))

            if [ $elapsed_seconds -ge $timeout_seconds ]; then
                echo "FAILURE: Failed to create the volume ${CINDER_VOL_ID}"
                exit 1
            fi
        done
    else
        echo "FAILURE: could not create the volume."
        exit 65
    fi

    echo "Attach volume vol_${SUFFIX} to instance ${INSTANCE_NAME}"
    os_cmd server add volume ${INSTANCE_NAME} ${CINDER_VOL_ID}
    {%- endif %}

    ## SSH to VM through it's floating ip or external ip
    elapsed_seconds=0
    while true; do
        # assert instance is reachable via ssh
        echo "  [$(date)] Trying to ssh to ${VM_IP}"
        ${SSH} -i "${SSH_KEY_FILE}" \
            ${INSTANCE_USER}@${VM_IP} 'whoami'
        if [[ ${?} -eq 0 ]]; then
            echo "Write VM_IP ${VM_IP} to file"
            echo "export VM_IP=${VM_IP}" > "${INSTANCE_FILE}"
            break
        fi
        sleep 3
        elapsed_seconds=$((elapsed_seconds + 3))
        if [ $elapsed_seconds -ge $ssh_timeout_seconds ]; then
            echo "FAILURE: Instance failed to boot."
            exit 1
        fi
    done
}

if [[ "${MODE}" == "workload" ]]; then
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check
    workload_launch
    echo "export SUFFIX=${SUFFIX}" > "${WORKLOAD_FILE}"
    {% if cifmw_update_create_volume | default(true) | bool -%}
    echo "export CINDER_VOL_ID=${CINDER_VOL_ID}" >> "${WORKLOAD_FILE}"
    {% endif -%}
    echo "export INSTANCE_FIP=${INSTANCE_FIP}" >> "${WORKLOAD_FILE}"
fi

if [[ "${MODE}" == "workload_traffic" ]]; then
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check
    workload_launch
    echo "export SUFFIX=${SUFFIX}" > ~/workload_suffix
    echo "export CINDER_VOL_ID=${CINDER_VOL_ID}" >> ~/workload_suffix
    echo "export INSTANCE_FIP=${INSTANCE_FIP}" >> ~/workload_suffix
    echo "export VM_IP=${VM_IP}" > ~/vm_ip.sh
    generate_traffic
fi

if [[ "${MODE}" == "cleanup" ]]; then
    # obtain SUFFIX value generated during workload_launch
    source "${WORKLOAD_FILE}"
    prepare_env
    sanity_check
    # cleanup workload
    sanity_teardown
fi

if [[ "${MODE}" == "sanity" ]]; then
    trap cleanup_on_exit EXIT
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check
    workload_launch
fi

if [[ "${MODE}" == "sanityfast" ]]; then
    FAST=20
    trap cleanup_on_exit EXIT
    SUFFIX=$(openssl rand -hex 5)
    prepare_env
    sanity_check $FAST
    workload_launch $FAST $FAST
fi
