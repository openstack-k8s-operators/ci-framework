#!/bin/bash

set -e
set -o pipefail

servers=(
{% for server in hypervisor_hostnames %}
{{ server.split('.')[0] }}
{% endfor %}
)

log_file="{{ cifmw_update_artifacts_basedir }}/monitor_servers.log"
pid_file="{{ cifmw_update_artifacts_basedir }}/monitor_servers.pid"

# Write the script's PID to the file
echo $$ > "$pid_file"

# Function to check server status via SSH
# TODO: ping always replies even if server is down, so using SSH instead.
check_servers() {
    for server in "${servers[@]}"; do
        if ssh -i {{ cifmw_update_ansible_ssh_private_key_file }} -o BatchMode=yes -o ConnectTimeout=5 "$server" "exit" &> /dev/null; then
            # Server is up
            if [ "${server_status[$server]}" == "down" ]; then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - $server is UP" | tee -a "$log_file"
                server_status[$server]="up"
            fi
        else
            # Server is down
            if [ "${server_status[$server]}" != "down" ]; then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - $server is DOWN" | tee -a "$log_file"
                server_status[$server]="down"
            fi
        fi
    done
}

# Function to handle script termination
cleanup() {
    TERMINATE=true
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Termination signal received, waiting for check_servers to complete..." | tee -a "$log_file"
}

# Trap signals and call cleanup function
trap cleanup SIGINT SIGTERM

# Initialize server status array
declare -A server_status
for server in "${servers[@]}"; do
    server_status[$server]="unknown"
done

# Main loop to continuously check server status
while true; do
    check_servers
    # Handle signal
    if [ "$TERMINATE" = true ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Script terminated" | tee -a "$log_file"
        rm -f "$pid_file"
        exit 0
    fi
    sleep 1
done
