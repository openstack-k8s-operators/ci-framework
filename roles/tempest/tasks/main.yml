---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Ensure podman is installed
  become: true
  ansible.builtin.package:
    name: podman
    state: present

- name: Create tempest directories
  ansible.builtin.file:
    path: "{{ cifmw_tempest_artifacts_basedir }}"
    state: directory

- name: Setup tempest tests
  ansible.builtin.include_tasks: tempest-tests.yml

- name: Create clouds.yaml
  ansible.builtin.include_tasks: create-clouds-file.yml
  when: not cifmw_tempest_dry_run | bool

- name: Configure tempest
  ansible.builtin.include_tasks: configure-tempest.yml
  when: not cifmw_tempest_dry_run | bool

- name: Copy CA bundle to cifmw_tempest_artifacts_basedir
  ansible.builtin.copy:
    src: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
    dest: "{{ cifmw_tempest_artifacts_basedir }}"
    mode: '0444'
    owner: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    group: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    remote_src: true

- name: Set proper permission for tempest directory
  ansible.builtin.command:
    cmd: "podman unshare chown 42480:42480 -R {{ cifmw_tempest_artifacts_basedir }}"
  when: not cifmw_tempest_dry_run | bool

- name: Ensure we have tempest container image
  register: _tempest_fetch_img
  containers.podman.podman_image:
    name: "{{ cifmw_tempest_image }}:{{ cifmw_tempest_image_tag }}"
  retries: 5
  delay: 5
  until: _tempest_fetch_img is success

    # are there molecule tests for tempest?
- name: ELF Define new container image name"
  ansible.builtin.set_fact:
    telemetry_tempest_image: "localhost/openstack-tempest-all"
    telemetry_tempest_image_tag: "telemetry-tempest-plugins"

- name: ELF Create a new image to use the newer version of telemetry_tempest_plugin containers.podman.
  # This section runs the container.
  # I could pre-create the container and re-attach here...
  # Or make a list of dirs to add on for extra plugins.
  # Where do these happen?
  # I could also update the contaienr image here, and point to a local one...
  # pre_test: create a new image from a docker file and point to it here. instead of using the cifmw_tempest_image above.
  # Q How does the cifmw_tempest_container that I passed to the job relate to this cifmw_tempest_image?
  #     cifmw_tempest_container is a string like "openstack-tempest" or "openstack-tempest-all"
  # ELF: I need to create a Dockerfile here.
  # I can create one locally...
  # Then paste it in here.
  ansible.builtin.shell:
    cmd: |
      podman build -t {{ telemetry_tempest_image }}:{{ telemetry_tempest_image_tag }} -f - <<EOF
      FROM {{ cifmw_tempest_image }}:{{ cifmw_tempest_image_tag }}
      RUN whoami
      USER root
      RUN dnf install -y python3-pip
      USER tempest
      RUN pip freeze | grep tempest
      RUN pip install git+http://github.com/openstack/telemetry-tempest-plugin@master
      RUN pip freeze | grep tempest
      EOF

- name: Run tempest
  ignore_errors: true
  containers.podman.podman_container:
    name: tempest
    #image: "{{ cifmw_tempest_image }}:{{ cifmw_tempest_image_tag }}"
    image: "{{ telemetry_tempest_image }}:{{ telemetry_tempest_image_tag }}"
    state: started
    auto_remove: "{{ cifmw_tempest_remove_container }}"
    network: host
    volume:
      - "{{ cifmw_tempest_artifacts_basedir }}/:/var/lib/tempest/external_files:Z"
      - "{{ cifmw_tempest_artifacts_basedir }}/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:Z"
    detach: false
    dns: "{{ cifmw_tempest_dns_servers }}"
    env:
      CONCURRENCY: "{{ cifmw_tempest_concurrency | default(omit) }}"
  when: not cifmw_tempest_dry_run | bool
  register: tempest_run_output

- name: Change tempest directory permission back to original
  become: true
  ansible.builtin.file:
    path: "{{ cifmw_tempest_artifacts_basedir }}"
    state: directory
    recurse: true
    owner: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    group: "{{ ansible_user | default(lookup('env', 'USER')) }}"

- name: Save logs from podman
  when: not cifmw_tempest_dry_run | bool
  ansible.builtin.copy:
    dest: "{{ cifmw_tempest_artifacts_basedir }}/podman_tempest.log"
    content: |
      "{{ tempest_run_output.stdout }}"

- name: Fail if podman container did not succeed
  when: not cifmw_tempest_dry_run | bool
  ansible.builtin.assert:
    that:
      - "tempest_run_output.failed == false"
