---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Load the Network Definition from file if not given
  when: "cifmw_networking_definition is not defined"
  block:
    - name: Check for Networking Definition file existence
      ansible.builtin.stat:
        path: "{{ cifmw_networking_mapper_networking_def_path }}"
      register: _net_def_stat

    - name: Load the Networking Definition from file
      when: "_net_def_stat.stat.exists"
      ansible.builtin.include_vars:
        file: "{{ cifmw_networking_mapper_networking_def_path }}"
        name: cifmw_networking_definition

- name: Load the interfaces info from file if not given
  when: "cifmw_networking_mapper_ifaces_info is not defined"
  block:
    - name: Check for interfaces info file existence
      ansible.builtin.stat:
        path: "{{ cifmw_networking_mapper_ifaces_info_path }}"
      register: _ifaces_info_stat

    - name: Load the interfaces info from file
      when: "_ifaces_info_stat.stat.exists"
      ansible.builtin.include_vars:
        file: "{{ cifmw_networking_mapper_ifaces_info_path }}"
        name: cifmw_networking_mapper_ifaces_info

- name: Set the input Networking Definition and patch it if needed
  vars:
    _net_def_patches: >-
      {{
        hostvars[inventory_hostname] |
        dict2items |
        selectattr("key", "match", "^cifmw_networking_mapper_definition_patch.*") |
        sort(attribute='key') |
        map(attribute='value') |
        list
      }}
  ansible.builtin.set_fact:
    _cifmw_networking_mapper_definition: >-
      {{
        _cifmw_networking_mapper_definition |
        default({}) |
        combine(item, recursive=True)
      }}
  loop: "{{ [cifmw_networking_definition] + _net_def_patches }}"

- name: Gather needed networking facts
  vars:
    _net_def_instances_filtered: >-
      {{
        (
          _cifmw_networking_mapper_definition.instances | default({})
        ).keys() |
        select("in", hostvars.keys() | list) |
        list
      }}
    _net_def_groups_filtered: >-
      {{
        (
          _cifmw_networking_mapper_definition['group-templates'] | default({})
        ).keys() |
        select("in", groups.keys() | list) |
        list
      }}
    _net_def_groups_instances: >-
      {% set _instances = [] -%}
      {% for group_name in _net_def_groups_filtered -%}
      {%   set _ = _instances.extend(groups[group_name] | list) -%}
      {% endfor -%}
      {% set _instances = _instances | unique -%}
      {{ _instances }}
    _networking_mapper_instance_names: >-
      {{
        _net_def_groups_instances + _net_def_instances_filtered
      }}
  block:
    - name: Gather the facts
      ansible.builtin.setup:
        gather_subset:
          - network
          - platform
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ _networking_mapper_instance_names }}"

    - name: Save instaces refreshed facts for troubleshooting purposes
      ansible.builtin.copy:
        dest: >-
          {{
            [
              cifmw_networking_mapper_basedir,
              'artifacts',
              'networking-mapper-instances-facts.yml'
            ] | path_join
          }}
        content: >-
          {{
            dict(hostvars) |
            dict2items |
            selectattr('key', 'in', _networking_mapper_instance_names) |
            items2dict |
            to_nice_yaml
          }}

- name: Call the networking mapper
  cifmw.general.ci_net_map:
    networking_definition: "{{ _cifmw_networking_mapper_definition }}"
    interfaces_info: >-
      {{
        cifmw_networking_mapper_ifaces_info |
        default(omit)
      }}
    search_domain_base: >-
      {{
        cifmw_networking_mapper_search_domain_base |
        default(omit)
      }}
    network_name: >-
      {{
        cifmw_networking_mapper_network_name | default(omit)
      }}
  register: _networking_mapper_out

- name: Set networking mapper facts
  ansible.builtin.set_fact:
    # Set is as a fact in case it was not
    cifmw_networking_definition: "{{ _cifmw_networking_mapper_definition }}"
    cifmw_networking_env_definition: >-
      {{
        _networking_mapper_out.networking_env_definition
      }}

- name: Write mapping outputs to file
  become: true
  block:
    - name: Ensure CI infrastructure dir exists
      ansible.builtin.file:
        path: "{{ cifmw_networking_mapper_infra_dir }}"
        state: directory
        mode: '0755'

    - name: Write the Networking Definition to file
      ansible.builtin.copy:
        dest: "{{ cifmw_networking_mapper_networking_def_path }}"
        content: "{{ _cifmw_networking_mapper_definition | to_nice_yaml }}"
        mode: '0644'

    - name: Write the Networking Environment Definition to file
      when: not _networking_mapper_out.failed
      ansible.builtin.copy:
        dest: "{{ cifmw_networking_mapper_networking_env_def_path }}"
        content: "{{ _networking_mapper_out.networking_env_definition | to_nice_yaml }}"
        mode: '0644'
