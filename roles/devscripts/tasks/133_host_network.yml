---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Remove default virt-net from the system.
  when: cifmw_devscripts_remove_libvirt_net_default | bool
  vars:
    net_name: "default"
  ansible.builtin.include_role:
    name: libvirt_manager
    tasks_from: delete_network.yml

- name: Ensure the required network configurations are applied.
  when:
    - cifmw_ci_nmstate_instance_config is defined
    - "inventory_hostname in cifmw_ci_nmstate_instance_config"
  ansible.builtin.include_role:
    name: ci_nmstate

- name: Ensure local DNS settings are configured.
  when:
    - cifmw_network_dnsmasq_config is defined
  block:
    - name: Configure local DNS
      ansible.builtin.include_role:
        name: ci_network
        tasks_from: apply-dnsmasq.yml

    - name: Set the facts related to OpenShift ingress and api addresses.
      ansible.builtin.include_tasks: get_ocp_vips.yml

- name: Create and apply virtual network configuration.
  become: true
  when:
    - cifmw_devscripts_config.manage_br_bridge is defined
    - cifmw_devscripts_config.manage_br_bridge == 'n'
  vars:
    _nets: >-
      {{
        cifmw_libvirt_manager_configuration.networks |
        dict2items |
        map(attribute='key') |
        list
      }}
  block:
    - name: Ensure firewalld is installed
      ansible.builtin.package:
        name:
          - firewalld

    - name: Ensure br_netfilter module is loaded.
      community.general.modprobe:
        name: br_netfilter
        state: present

    - name: Ensure IP forwarding is enabled.
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: Ensure the required parameters are loaded.
      ansible.posix.sysctl:
        name: "net.bridge.bridge-nf-call-{{ item }}"
        value: 0
        state: present
      loop:
        - arptables
        - iptables
        - ip6tables
      loop_control:
        label: "{{ item }}"

    - name: Ensure firewall service is enabled and started.
      ansible.builtin.service:
        name: firewalld
        enabled: true
        state: started

    - name: Create the virtual networks.
      vars:
        cifmw_libvirt_manager_net_prefix_add: false
        _cifmw_libvirt_manager_layout:
          networks: "{{ cifmw_libvirt_manager_configuration.networks }}"
      ansible.builtin.include_role:
        name: libvirt_manager
        tasks_from: create_networks.yml

    - name: Ensure masquerading for external network
      become: true
      vars:
        ext_interface: >-
          {{
            ansible_default_ipv4.interface
            if cifmw_devscripts_config.ip_stack == 'v4'
            else
            ansible_default_ipv6.interface
          }}
      ansible.builtin.iptables:
        action: "insert"
        chain: "POSTROUTING"
        out_interface: "{{ ext_interface }}"
        state: present
        table: "nat"
        jump: "MASQUERADE"

    - name: Ensure forwarding of traffic to all networks.
      become: true
      ansible.builtin.iptables:
        action: "insert"
        chain: "FORWARD"
        in_interface: "{{ item }}"
        jump: "ACCEPT"
        state: present
      loop: "{{ _nets }}"
      loop_control:
        label: "{{ item }}"
