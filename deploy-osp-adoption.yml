---
# Purpose of this playbook:
# This playbook deploy OSP 17.1 on previously created
# infra for adoption. The main goal of this playbook
# is to be called as a standalone piece of a bigger
# job, mostly in the adoption context.
#
# You would typically run this playbook after the
# "create-infra.yml"

- name: Deploy 17.1 for adoption
  hosts: 'localhost'
  gather_facts: true
  vars:
    cifmw_basedir: "{{ ansible_user_dir }}/ci-framework-data"
    _adoption_source_scenario_file: >-
      {{
        [cifmw_adoption_source_scenario_path,
         cifmw_architecture_scenario ~ '.yaml'] | path_join
      }}
  tasks:
    - name: Inherit from parent scenarios if needed
      ansible.builtin.include_tasks:
        file: "ci/playbooks/tasks/inherit_parent_scenario.yml"

    - name: Ensure networking data is loaded
      ansible.builtin.include_role:
        name: networking_mapper
        tasks_from: load_env_definition.yml
        apply:
          delegate_to: "{{ cifmw_target_host | default('localhost') }}"

    - name: Load source adoption scenario
      ansible.builtin.include_vars:
        file: "{{ _adoption_source_scenario_file }}"
        name: _adoption_source_scenario

    - name: Gather ansible_user_id from {{ cifmw_target_host }}
      delegate_to: "{{ cifmw_target_host }}"
      ansible.builtin.setup:
        gather_subset:
          - user_id
          - user_dir

    - name: Read inventory groups
      delegate_to: "{{ cifmw_target_host }}"
      ansible.builtin.slurp:
        path: "{{ ansible_user_dir }}/ci-framework-data/reproducer-inventory/all-group.yml"
      register: "_all_groups"

    - name: Generate groups
      vars:
        _parsed_all_groups: "{{ _all_groups['content'] | b64decode | from_yaml }}"
      block:
        - name: Read groups inventory
          delegate_to: "{{ cifmw_target_host | default('localhost') }}"
          vars:
            _group_name: "{{ item.key[:-1] }}"
            _path_inventories: "{{ ansible_user_dir }}/ci-framework-data/reproducer-inventory"
          ansible.builtin.slurp:
            path: "{{ _path_inventories }}/{{ _group_name }}-group.yml"
          register: _files
          loop: >-
            {{
              _parsed_all_groups.all.children | dict2items
            }}

        - name: Set groups fact
          when: "'all' != _group_name"
          vars:
            _content: "{{ _inventory_file.content | b64decode | from_yaml }}"
            _group_name: "{{ _inventory_file.source | basename | regex_replace('-group.yml', '') }}"
            _nodes: "{{ _content[_group_name~'s']['hosts'].keys() }}"
            _group_nodes: >-
              {%- set group = {} -%}
              {%- set _ = group.update({_group_name~'s': _nodes}) -%}
              {{ group }}
          ansible.builtin.set_fact:
            _vm_groups: >-
              {{ _vm_groups | default({}) | combine(_group_nodes) }}
          loop: "{{ _files.results }}"
          loop_control:
            loop_var: "_inventory_file"

    - name: Ensure parameters folder exists
      ansible.builtin.file:
        path: "{{ cifmw_basedir }}/artifacts/parameters"
        state: "directory"

    - name: Save variables for use with hooks
      ansible.builtin.copy:
        dest: "{{ cifmw_basedir }}/artifacts/parameters/adoption_osp.yml"
        content: |
          ---
          cifmw_adoption_osp_deploy_ntp_server: {{ cifmw_adoption_osp_deploy_ntp_server }}
          cifmw_adoption_source_scenario_path: {{ cifmw_adoption_source_scenario_path }}
          _adoption_source_scenario:
            {{ _adoption_source_scenario | to_nice_yaml(indent=2) | indent(width=2) }}
          _vm_groups:
            {{ _vm_groups | to_nice_yaml(indent=2) | indent(width=2) }}

    - name: Set inventory_file for localhost to use with hooks
      ansible.builtin.set_fact:
        inventory_file: "{{ hostvars[cifmw_target_host]['inventory_file'] }}"

    - name: Deploy source osp environment
      ansible.builtin.import_role:
        name: "adoption_osp_deploy"
