---
- hosts: crc
  name: "Tweak CRC node"
  gather_facts: false
  tasks:

    - name: Load network parameters
      register: _cifmw_multinode_customizations_crc_net_env_slurp
      ansible.builtin.slurp:
        src: "/etc/ci/env/networking-info.yml"

    - name: Harcode crc-pre script
      become: true
      vars:
        _decoded_net_env: "{{ _cifmw_multinode_customizations_crc_net_env_slurp['content'] | b64decode | from_yaml }}"
        _crc_default_net_ip: >-
          {{
            _decoded_net_env.crc_ci_bootstrap_networks_out.crc.default.ip | ansible.utils.ipaddr('address')
          }}
        _crc_default_net_dns: "{{ _decoded_net_env.crc_ci_bootstrap_provider_dns | default([]) }}"
      ansible.builtin.copy:
        dest: "/usr/local/bin/configure-pre-crc.sh"
        mode: '0755'
        owner: root
        group: root
        content: |-
          #!/bin/bash

          set -x

          cat << EOL | sudo tee /var/srv/dnsmasq.conf
          user=root
          port=53
          bind-interfaces
          expand-hosts
          log-queries
          no-negcache
          local=/crc.testing/
          domain=crc.testing
          address=/apps-crc.testing/{{ _crc_default_net_ip }}
          address=/api.crc.testing/{{ _crc_default_net_ip }}
          address=/api-int.crc.testing/{{ _crc_default_net_ip }}
          address=/crc-74q6p-master-0.crc.testing/{{ _crc_default_net_ip }}
          {% for dns_server in _crc_default_net_dns -%}
          server={{ dns_server }}
          {% endfor %}
          EOL

          cat << EOL | sudo tee /etc/resolv.conf
          nameserver {{ _crc_default_net_ip }}
          EOL

          # stop overwriting /etc/resolv.conf after reboot
          cat << EOL | sudo tee /etc/NetworkManager/conf.d/00-custom-crc.conf
          [main]
          dns=none
          EOL

          sudo systemctl reload NetworkManager

    - name: Restart the service because zuul base job is overwriting /etc/resolv.conf
      become: true
      ansible.builtin.systemd:
        state: restarted
        name: crc-pre

    - name: Restart dnsmasq
      become: true
      ansible.builtin.systemd:
        state: restarted
        name: crc-dnsmasq

    - name: Wait for CRC to be ready
      register: wait_crc
      ansible.builtin.command: >-
        oc login {{ cifmw_openshift_api }}
        -u {{ cifmw_openshift_user }}
        -p "{{ cifmw_openshift_password }}"
        {%- if cifmw_openshift_skip_tls_verify | default(false) |bool %}
        --insecure-skip-tls-verify=true
        {%- endif %}
      retries: 60
      delay: 10
      until:
        - wait_crc is defined
        - wait_crc.rc is defined
        - wait_crc.rc == 0

    - name: Set insecure registry on crc node
      ansible.builtin.include_tasks: tasks/set_crc_insecure_registry.yml
      when: content_provider_registry_ip is defined

- hosts: controller
  name: "Tweak Controller"
  gather_facts: true
  tasks:
    - name: Install other packages
      become: true
      ansible.builtin.package:
        name:
          - ansible-core
          - make
        state: present

    - name: Ensure we know compute host keys
      ansible.builtin.shell:
        cmd: |
          ssh-keyscan {{ hostvars[item].ansible_host }} >> ~/.ssh/known_hosts
      loop: >-
        {{
          hostvars | dict2items |
          selectattr("value.ansible_host", "defined") |
          map(attribute="key")
        }}
      loop_control:
        label: "{{ item }}"

    - name: Generate an ssh keypair
      ansible.builtin.command:
        cmd: ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -P ''

    - name: Get public key
      register: pub_key_slurp
      ansible.builtin.slurp:
        path: "{{ ansible_user_dir }}/.ssh/id_ed25519.pub"

    - name: Register pub key as a fact
      ansible.builtin.set_fact:
        persistent_ssh_key: "{{ pub_key_slurp['content'] | b64decode }}"

    - name: Check if cloud-init is overriding NM settings
      become: true
      ansible.builtin.stat:
        path: "/etc/NetworkManager/conf.d/99-cloud-init.conf"
      register: _cloud_init_nm_override_stat

    - name: Remove cloud-init DNS override if present and reload
      become: true
      when: _cloud_init_nm_override_stat.stat.exists
      block:
        - name: Remove cloud-init DNS override if present
          community.general.ini_file:
            path: "/etc/NetworkManager/conf.d/99-cloud-init.conf"
            section: main
            option: dns
            state: absent

        - name: Reload the NetworkManager to pick the changes
          ansible.builtin.service:
            name: NetworkManager
            state: "reloaded"

    - name: Get the default iface connection
      register: controller_default_connection_out
      ansible.builtin.command:
        cmd: "nmcli -g general.connection device show eth0"

    - name: Add the deployment DNS in the controller resolv.conf
      vars:
        dns_servers_string: "192.168.122.10 {{ ansible_facts['dns']['nameservers'][0:1] | join(' ') }}"
      become: true
      ansible.builtin.shell:
        cmd: |-
          nmcli con mod '{{ controller_default_connection_out.stdout | trim }}' ipv4.dns '{{ dns_servers_string }}' ipv4.route-metric 100;
          nmcli con up '{{ controller_default_connection_out.stdout | trim }}';

- name: "Ensure persistent SSH access"
  hosts: all
  tasks:
    - name: Inject key in ansible_user
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ hostvars['controller']['persistent_ssh_key'] }}"

    - name: Inject key in root
      become: true
      ansible.posix.authorized_key:
        user: "root"
        key: "{{ hostvars['controller']['persistent_ssh_key'] }}"

- name: "Add cloud-admin user on Compute"
  hosts: computes
  tasks:
    - name: Create cloud-admin
      become: true
      ansible.builtin.user:
        name: cloud-admin
        shell: /bin/bash

    - name: Inject key in cloud-admin
      become: true
      ansible.posix.authorized_key:
        user: "cloud-admin"
        key: "{{ hostvars['controller']['persistent_ssh_key'] }}"

    - name: Allow cloud-admin on sudo
      become: true
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/cloud-admin"
        content: |-
          cloud-admin ALL=(ALL) NOPASSWD:ALL
        mode: "0640"

- name: Set some fancy hostname
  hosts: all,!crc
  tasks:
    - name: Inject hostname in configuration file
      become: true
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}.ci-rdo.local"
        use: "systemd"
