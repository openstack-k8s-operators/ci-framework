---
- hosts: crc
  name: "Tweak CRC node"
  gather_facts: false
  tasks:
    - name: Harcode crc-pre script
      become: true
      ansible.builtin.copy:
        dest: "/usr/local/bin/configure-pre-crc.sh"
        mode: '0755'
        owner: root
        group: root
        content: |-
          #!/bin/bash

          set -x

          HOST_IP=$(ip route get 1.2.3.4 | awk '{print $7}' | head -n1)
          HOST_DEF_INT=$(ip -br -4 a sh | grep $HOST_IP | awk '{print $1}')
          ALL_DNS=$(nmcli -g IP4.DNS device show $HOST_DEF_INT)

          DNS1=$(echo $ALL_DNS| cut -f1 -d'|')
          DNS2=$(echo $ALL_DNS| cut -f2 -d'|')

          if [ -z $DNS1 ]; then
              echo "DNS1 is empty. Setting 1.1.1.1"
              DNS1='1.1.1.1'
          fi

          if [ -z $DNS2 ]; then
              echo "DNS2 is empty. Setting 8.8.8.8"
              DNS2='8.8.8.8'
          fi

          cat << EOL | sudo tee /var/srv/dnsmasq.conf
          user=root
          port=53
          bind-interfaces
          expand-hosts
          log-queries
          no-negcache
          local=/crc.testing/
          domain=crc.testing
          address=/apps-crc.testing/192.168.122.10
          address=/api.crc.testing/192.168.122.10
          address=/api-int.crc.testing/192.168.122.10
          address=/crc-74q6p-master-0.crc.testing/192.168.121.10
          server=$DNS1
          server=$DNS2
          EOL

          cat << EOL | sudo tee /etc/resolv.conf
          nameserver 127.0.0.1
          EOL

          # stop overwriting /etc/resolv.conf after reboot
          cat << EOL | sudo tee /etc/NetworkManager/conf.d/00-custom-crc.conf
          [main]
          dns=none
          EOL

          sudo systemctl reload NetworkManager

    - name: Restart the service because zuul base job is overwriting /etc/resolv.conf
      become: true
      ansible.builtin.systemd:
        state: restarted
        name: crc-pre

    - name: Restart dnsmasq
      become: true
      ansible.builtin.systemd:
        state: restarted
        name: crc-dnsmasq

    - name: Wait for CRC to be ready
      register: wait_crc
      ansible.builtin.command: >-
        oc login {{ cifmw_openshift_api }}
        -u {{ cifmw_openshift_user }}
        -p "{{ cifmw_openshift_password }}"
        {%- if cifmw_openshift_skip_tls_verify | default(false) |bool %}
        --insecure-skip-tls-verify=true
        {%- endif %}
      retries: 20
      delay: 60
      until:
        - wait_crc is defined
        - wait_crc.rc is defined
        - wait_crc.rc == 0

    - name: Set insecure registry on crc node
      ansible.builtin.include_tasks: set_crc_insecure_registry.yml
      when: content_provider_registry_ip is defined

- hosts: controller
  name: "Tweak Controller"
  gather_facts: true
  tasks:
    - name: Create zuul-output directory
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/ci-framework-data/artifacts"
        state: directory

    - name: Save zuul inventory
      ansible.builtin.copy:
        dest: "{{ ansible_user_dir }}/ci-framework-data/artifacts/zuul_inventory.yml"
        src: "{{ inventory_file }}"

    - name: Install other packages
      become: true
      ansible.builtin.package:
        name:
          - ansible-core
          - make
        state: present

    - name: Generate an ssh keypair
      ansible.builtin.command:
        cmd: ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -P ''

    - name: Get public key
      register: pub_key_slurp
      ansible.builtin.slurp:
        path: "{{ ansible_user_dir }}/.ssh/id_ed25519.pub"

    - name: Register pub key as a fact
      ansible.builtin.set_fact:
        persistent_ssh_key: "{{ pub_key_slurp['content'] | b64decode }}"

    - name: Get the default iface connection
      register: controller_default_connection_out
      ansible.builtin.command:
        cmd: "nmcli -g general.connection device show eth0"

    - name: Add the deployment DNS in the controller resolv.conf
      vars:
        dns_servers_string: "192.168.122.10 {{ ansible_facts['dns']['nameservers'][0:1] | join(' ') }}"
      become: true
      ansible.builtin.shell:
        cmd: |-
          nmcli con mod '{{ controller_default_connection_out.stdout | trim }}' ipv4.dns '{{ dns_servers_string }}' ipv4.route-metric 100;
          nmcli con up '{{ controller_default_connection_out.stdout | trim }}';

- name: "Ensure persistent SSH access"
  hosts: all
  tasks:
    - name: Inject key in ansible_user
      ansible.posix.authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ hostvars['controller']['persistent_ssh_key'] }}"

    - name: Inject key in root
      become: true
      ansible.posix.authorized_key:
        user: "root"
        key: "{{ hostvars['controller']['persistent_ssh_key'] }}"
