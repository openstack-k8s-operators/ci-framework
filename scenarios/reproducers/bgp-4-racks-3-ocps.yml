---
cifmw_run_tests: true
cifmw_run_tempest: true
cifmw_run_test_role: test_operator
cifmw_test_operator_timeout: 7200
cifmw_test_operator_tempest_include_list: |
  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps

cifmw_use_devscripts: true
cifmw_use_libvirt: true
cifmw_virtualbmc_daemon_port: 50881
cifmw_libvirt_manager_compute_amount: 3
cifmw_libvirt_manager_pub_net: ocpbm
cifmw_libvirt_manager_spineleaf_setup: true
cifmw_libvirt_manager_network_interface_types:
  l00-s0: network
  l01-s0: network
  l00-s1: network
  l01-s1: network
  l10-s0: network
  l11-s0: network
  l10-s1: network
  l11-s1: network
  l20-s0: network
  l21-s0: network
  l20-s1: network
  l21-s1: network
  l30-s0: network
  l31-s0: network
  l30-s1: network
  l31-s1: network
  l00-node0: network
  l01-node0: network
  l10-node0: network
  l11-node0: network
  l20-node0: network
  l21-node0: network
  l30-ocp0: network
  l31-ocp0: network
  l30-ocp1: network
  l31-ocp1: network
  l30-ocp2: network
  l31-ocp2: network

cifmw_libvirt_manager_configuration:
  networks:
    osp_trunk: |
      <network>
        <name>osp_trunk</name>
        <forward mode='nat'/>
        <bridge name='osp_trunk' stp='on' delay='0'/>
        <ip family='ipv4'
        address='{{ cifmw_networking_definition.networks.ctlplane.network |
                    ansible.utils.nthhost(1) }}'
        prefix='{{ cifmw_networking_definition.networks.ctlplane.network |
                   ansible.utils.ipaddr('prefix') }}'>
        </ip>
      </network>
    ocpbm: |
      <network>
        <name>ocpbm</name>
        <forward mode='nat'/>
        <bridge name='ocpbm' stp='on' delay='0'/>
        <dns enable="no"/>
        <ip family='ipv4' address='192.168.111.1' prefix='24'>
        </ip>
      </network>
    ocppr: |
      <network>
        <name>ocppr</name>
        <forward mode='bridge'/>
        <bridge name='ocppr'/>
      </network>
    # leafs to spines networks
    ## rack0
    l00-s0: |
      <network>
        <name>l00-s0</name>
        <bridge name='l00-s0' stp='on' delay='0'/>
      </network>
    l00-s1: |
      <network>
        <name>l00-s1</name>
        <bridge name='l00-s1' stp='on' delay='0'/>
      </network>
    l01-s0: |
      <network>
        <name>l01-s0</name>
        <bridge name='l01-s0' stp='on' delay='0'/>
      </network>
    l01-s1: |
      <network>
        <name>l01-s1</name>
        <bridge name='l01-s1' stp='on' delay='0'/>
      </network>
    ## rack1
    l10-s0: |
      <network>
        <name>l10-s0</name>
        <bridge name='l10-s0' stp='on' delay='0'/>
      </network>
    l10-s1: |
      <network>
        <name>l10-s1</name>
        <bridge name='l10-s1' stp='on' delay='0'/>
      </network>
    l11-s0: |
      <network>
        <name>l11-s0</name>
        <bridge name='l11-s0' stp='on' delay='0'/>
      </network>
    l11-s1: |
      <network>
        <name>l11-s1</name>
        <bridge name='l11-s1' stp='on' delay='0'/>
      </network>
    ## rack2
    l20-s0: |
      <network>
        <name>l20-s0</name>
        <bridge name='l20-s0' stp='on' delay='0'/>
      </network>
    l20-s1: |
      <network>
        <name>l20-s1</name>
        <bridge name='l20-s1' stp='on' delay='0'/>
      </network>
    l21-s0: |
      <network>
        <name>l21-s0</name>
        <bridge name='l21-s0' stp='on' delay='0'/>
      </network>
    l21-s1: |
      <network>
        <name>l21-s1</name>
        <bridge name='l21-s1' stp='on' delay='0'/>
      </network>
    ## rack3
    l30-s0: |
      <network>
        <name>l30-s0</name>
        <bridge name='l30-s0' stp='on' delay='0'/>
      </network>
    l30-s1: |
      <network>
        <name>l30-s1</name>
        <bridge name='l30-s1' stp='on' delay='0'/>
      </network>
    l31-s0: |
      <network>
        <name>l31-s0</name>
        <bridge name='l31-s0' stp='on' delay='0'/>
      </network>
    l31-s1: |
      <network>
        <name>l31-s1</name>
        <bridge name='l31-s1' stp='on' delay='0'/>
      </network>
    # leafs to nodes
    ## rack0
    l00-node0: |
      <network>
        <name>l00-node0</name>
        <bridge name='l00-node0' stp='on' delay='0'/>
      </network>
    l01-node0: |
      <network>
        <name>l01-node0</name>
        <bridge name='l01-node0' stp='on' delay='0'/>
      </network>
    ## rack1
    l10-node0: |
      <network>
        <name>l10-node0</name>
        <bridge name='l10-node0' stp='on' delay='0'/>
      </network>
    l11-node0: |
      <network>
        <name>l11-node0</name>
        <bridge name='l11-node0' stp='on' delay='0'/>
      </network>
    ## rack2
    l20-node0: |
      <network>
        <name>l20-node0</name>
        <bridge name='l20-node0' stp='on' delay='0'/>
      </network>
    l21-node0: |
      <network>
        <name>l21-node0</name>
        <bridge name='l21-node0' stp='on' delay='0'/>
      </network>
    # leafs to ocp
    ## rack3
    l30-ocp0: |
      <network>
        <name>l30-ocp0</name>
        <bridge name='l30-ocp0' stp='on' delay='0'/>
      </network>
    l30-ocp1: |
      <network>
        <name>l30-ocp1</name>
        <bridge name='l30-ocp1' stp='on' delay='0'/>
      </network>
    l30-ocp2: |
      <network>
        <name>l30-ocp2</name>
        <bridge name='l30-ocp2' stp='on' delay='0'/>
      </network>
    l31-ocp0: |
      <network>
        <name>l31-ocp0</name>
        <bridge name='l31-ocp0' stp='on' delay='0'/>
      </network>
    l31-ocp1: |
      <network>
        <name>l31-ocp1</name>
        <bridge name='l31-ocp1' stp='on' delay='0'/>
      </network>
    l31-ocp2: |
      <network>
        <name>l31-ocp2</name>
        <bridge name='l31-ocp2' stp='on' delay='0'/>
      </network>
  vms:
    controller:
      root_part_id: "{{ cifmw_root_partition_id }}"
      uefi: "{{ cifmw_use_uefi }}"
      image_url: "{{ cifmw_discovered_image_url }}"
      sha256_image_name: "{{ cifmw_discovered_hash }}"
      image_local_dir: "{{ cifmw_basedir }}/images/"
      disk_file_name: "base-os.qcow2"
      disksize: 50
      memory: 8
      cpus: 4
      nets:
        - ocpbm
        - osp_trunk
    compute:
      amount: "{{Â cifmw_libvirt_manager_compute_amount }}"
      root_part_id: "{{ cifmw_root_partition_id }}"
      uefi: "{{ cifmw_use_uefi }}"
      image_url: "{{ cifmw_discovered_image_url }}"
      sha256_image_name: "{{ cifmw_discovered_hash }}"
      image_local_dir: "{{ cifmw_basedir }}/images/"
      disk_file_name: "centos-stream-9.qcow2"
      disksize: 50
      memory: 8
      cpus: 4
      nets:
        - ocpbm
        - osp_trunk
      spineleafnets:
        - # rack0 - compute0
          - "l00-node0"
          - "l01-node0"
        - # rack1 - compute1
          - "l10-node0"
          - "l11-node0"
        - # rack2 - compute2
          - "l20-node0"
          - "l21-node0"
    ocp:
      amount: 3
      admin_user: core
      cpus: 10
      memory: 16
      root_part_id: 4
      uefi: true
      image_local_dir: "{{ cifmw_basedir }}/images/"
      disk_file_name: "ocp_master"
      disksize: "105"
      nets:
        - ocppr
        - ocpbm
        - osp_trunk
      spineleafnets:
        - # rack3 - ocp0
          - "l30-ocp0"
          - "l31-ocp0"
        - # rack3 - ocp1
          - "l30-ocp1"
          - "l31-ocp1"
        - # rack3 - ocp2
          - "l30-ocp2"
          - "l31-ocp2"
    spine:
      amount: 2
      root_part_id: "{{ cifmw_root_partition_id }}"
      uefi: "{{ cifmw_use_uefi }}"
      image_url: "{{ cifmw_discovered_image_url }}"
      sha256_image_name: "{{ cifmw_discovered_hash }}"
      image_local_dir: "{{ cifmw_basedir }}/images/"
      disk_file_name: "spine-centos-stream-9.qcow2"
      disksize: 25
      memory: 4
      cpus: 2
      nets:
        - ocpbm
      spineleafnets:
        - # spine0
          - "l00-s0"
          - "l01-s0"
          - "l10-s0"
          - "l11-s0"
          - "l20-s0"
          - "l21-s0"
          - "l30-s0"
          - "l31-s0"
        - # spine1
          - "l00-s1"
          - "l01-s1"
          - "l10-s1"
          - "l11-s1"
          - "l20-s1"
          - "l21-s1"
          - "l30-s1"
          - "l31-s1"
    leaf:
      amount: 8
      root_part_id: "{{ cifmw_root_partition_id }}"
      uefi: "{{ cifmw_use_uefi }}"
      image_url: "{{ cifmw_discovered_image_url }}"
      sha256_image_name: "{{ cifmw_discovered_hash }}"
      image_local_dir: "{{ cifmw_basedir }}/images/"
      disk_file_name: "leaf-centos-stream-9.qcow2"
      disksize: 25
      memory: 4
      cpus: 2
      nets:
        - ocpbm
      spineleafnets:
        - # rack0 - leaf00
          - "l00-s0"
          - "l00-s1"
          - "l00-node0"
        - # rack0 - leaf01
          - "l01-s0"
          - "l01-s1"
          - "l01-node0"
        - # rack1 - leaf10
          - "l10-s0"
          - "l10-s1"
          - "l10-node0"
        - # rack1 - leaf11
          - "l11-s0"
          - "l11-s1"
          - "l11-node0"
        - # rack2 - leaf20
          - "l20-s0"
          - "l20-s1"
          - "l20-node0"
        - # rack2 - leaf21
          - "l21-s0"
          - "l21-s1"
          - "l21-node0"
        - # rack3 - leaf30
          - "l30-s0"
          - "l30-s1"
          - "l30-ocp0"
          - "l30-ocp1"
          - "l30-ocp2"
        - # rack3 - leaf31
          - "l31-s0"
          - "l31-s1"
          - "l31-ocp0"
          - "l31-ocp1"
          - "l31-ocp2"

# Required for egress traffic from pods to the osp_trunk network
cifmw_devscripts_enable_ocp_nodes_host_routing: true

# Automation section. Most of those parameters will be passed to the
# controller-0 as-is and be consumed by the `deploy-va.sh` script.
# Please note, all paths are on the controller-0, meaning managed by the
# Framework. Please do not edit them!
_arch_repo: "/home/zuul/src/github.com/openstack-k8s-operators/architecture"
cifmw_architecture_scenario: bgp
cifmw_kustomize_deploy_architecture_examples_path: "examples/dt/"
