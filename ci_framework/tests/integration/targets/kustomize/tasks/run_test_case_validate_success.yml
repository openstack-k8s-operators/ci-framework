---
- name: "[{{ kustomize_tc_name }}] Assert the expected labels and values are in place" # noqa: name[template]
  when: "kustomize_tc_should_have_labels is defined"
  ansible.builtin.assert:
    that:
      - "item.not_found is not defined"
      - "item.value == item.expected"
    quiet: true
  loop: >-
      {#  This jinja2 makes the tedious task of fetching from the kustomization output, that's a list,             -#}
      {#  all the labels and their values that are selected by the kustomize_tc_should_have_labels list            -#}
      {#  That list tells this jinja2 script from what manifest validate the given labels by matching              -#}
      {#  them by apiVersion, kind and name.                                                                       -#}
      {#  The result is a list of a ternary with the label name, it's value and the expected value, that can be    -#}
      {#  easy used in the taks assertion itself by comparing the expected to the actual value.                    -#}
      {% set expected = [] -%}
      {% for label_req in kustomize_tc_should_have_labels | default([]) -%}
      {%   set assert_data = None  -%}
      {%   for manifest in output.result | default([]) -%}
      {%     if (manifest.apiVersion == label_req.apiVersion) and (manifest.kind == label_req.kind) and (manifest.metadata.name == label_req.name) -%}
      {%       set manifest_labels = ((manifest.metadata | default({'labels': {}})).labels | default({})) -%}
      {%         for req_label_kv in (label_req.labels | default({})) | dict2items -%}
      {%           set assert_data = {'label': req_label_kv.key, 'value': manifest_labels[req_label_kv.key] | default('<missing>'), 'expected': req_label_kv.value} -%}
      {%           set _ = expected.append(assert_data) -%}
      {%         endfor -%}
      {%     endif -%}
      {%   endfor -%}
      {%   if assert_data is not none -%}
      {%     set _ = expected.append({'not_found': label_req, 'value':'', 'expected': ''}) -%}
      {%   endif -%}
      {% endfor -%}
      {{ expected }}

- name: "[{{ kustomize_tc_name }}] Assert that the expected number of resources has been outputed" # noqa: name[template]
  when: "kustomize_tc_should_output_count is defined"
  ansible.builtin.assert:
    that: "output['result'] | length == (kustomize_tc_should_output_count | int)"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Set the expected kustomization files" # noqa: name[template]
  vars:
    _kustomizations_all_paths: >-
      {{
        (_ci_kustomize_extra_kustomizations.keys() | list) +
        (_ci_kustomize_kustomizations.keys() | list)
      }}
  ansible.builtin.set_fact:
    _ci_kustomize_expected_kustomization_files: >-
      {% set included_paths = [] if kustomize_tc_include_regexes is defined else _kustomizations_all_paths -%}
      {% for include_regex in kustomize_tc_include_regexes | default([]) -%}
      {%   for kustomization_path in _kustomizations_all_paths -%}
      {%     if (kustomization_path | regex_search(include_regex)) -%}
      {%       set _ = included_paths.append(kustomization_path) -%}
      {%     endif -%}
      {%   endfor -%}
      {% endfor -%}
      {% set expected_paths = included_paths | list | unique -%}
      {% for kustomization_path in included_paths -%}
      {%   set should_skip = false -%}
      {%   for skip_regex in kustomize_tc_skip_regexes | default([]) -%}
      {%     if (kustomization_path | regex_search(skip_regex)) -%}
      {%       set _ = expected_paths.remove(kustomization_path) -%}
      {%     endif -%}
      {%   endfor -%}
      {% endfor -%}
      {{ expected_paths }}
    cacheable: true

- name: "[{{ kustomize_tc_name }}] Assert that the expected number of kustomization has been applied" # noqa: name[template]
  when: "kustomize_tc_should_apply_kustomizations_count is defined"
  ansible.builtin.assert:
    that:
      - "output['count'] == (kustomize_tc_should_apply_kustomizations_count | int)"
      - " output['count'] >= (_ci_kustomize_expected_kustomization_files | length)"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Assert that the expected kustomization files have been discovered" # noqa: name[template]
  ansible.builtin.assert:
    that: "(output['kustomizations_paths'] | sort) == (_ci_kustomize_expected_kustomization_files | sort)" # noqa: name[template]
    quiet: true

- name: "[{{ kustomize_tc_name }}] Assert the output points to an output path" # noqa: name[template]
  ansible.builtin.assert:
    that: "'output_path' in output"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Assert the output points to the proper output path if necessary" # noqa: name[template]
  when: "_ci_kustomize_tc_out_temp_path | default('') | length > 0"
  ansible.builtin.assert:
    that: "output['output_path'] == _ci_kustomize_tc_out_temp_path"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Fetch output file stat" # noqa: name[template]
  ansible.builtin.stat:
    path: "{{ output['output_path'] }}"
  register: _ci_kustomize_output_path_stat

- name: "[{{ kustomize_tc_name }}] Assert the expected output file exists" # noqa: name[template]
  ansible.builtin.assert:
    that: "_ci_kustomize_output_path_stat.stat.exists | bool"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Fetch the output file content" # noqa: name[template]
  ansible.builtin.slurp:
    src: "{{ output['output_path'] }}"
  register: _ci_kustomize_output_path_slurp

- name: "[{{ kustomize_tc_name }}] Assert the file content is the same as the output in result" # noqa: name[template]
  ansible.builtin.assert:
    that: "(_ci_kustomize_output_path_slurp['content'] | b64decode | from_yaml_all) == output['result']"
    quiet: true

- name: "[{{ kustomize_tc_name }}] Check if the workspace dir is present" # noqa: name[template]
  when:
    - "not output.failed"
    - "kustomize_tc_preserve_workspace | default(false) | bool"
  block:
    - name: "[{{ kustomize_tc_name }}] Check if the workspace dir is present" # noqa: name[template]
      ansible.builtin.stat:
        path: "{{ [_ci_kustomize_temporal_dir.path, 'cifmw-kustomize-workspace'] | path_join }}"
      register: _ci_kustomize_workspace_dir_stat

    - name: "[{{ kustomize_tc_name }}] Assert workspace dir is presence" # noqa: name[template]
      ansible.builtin.assert:
        that: "_ci_kustomize_workspace_dir_stat.stat.exists == kustomize_tc_preserve_workspace"
        quiet: true
