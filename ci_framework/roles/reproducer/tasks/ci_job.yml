---
- name: Extract playbook to run
  when:
    - cifmw_job_uri is defined
  vars:
    playbooks: "{{ zuul.playbook_context.playbooks }}"
    extracted: >-
      {{
        (playbooks |
         map(attribute='path') |
         select('match', '.*openstack-k8s-operators/ci-framework.*') |
         map('split', 'openstack-k8s-operators/ci-framework/'))
      }}
  ansible.builtin.set_fact:
    zuul_plays: "{{ extracted | map('last') | list }}"

- name: Find all files related to networking data
  register: network_data_files
  ansible.builtin.find:
    paths: "{{ cifmw_reproducer_basedir }}/reproducer-network-env/"
    pattern: "*.yml"

- name: Slurp networking data from hypervisor
  register: network_data
  ansible.builtin.slurp:
    path: "{{ item.path }}"
  loop: "{{ network_data_files.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: Run on controller-0
  delegate_to: controller-0
  remote_user: zuul
  block:
    - name: Ensure _reproducer_basedir is set
      when:
        - _reproducer_basedir is undefined
      ansible.builtin.set_fact:
        job_id: "reproducer"
        _reproducer_basedir: >-
          {{
            (
             '/home/zuul',
             'ci-framework-data',
             'artifacts'
             ) | path_join
          }}

    - name: Ensure directory exists
      ansible.builtin.file:
        path: "{{ _reproducer_basedir }}"
        state: directory

    - name: Create data directory on controller-0
      ansible.builtin.file:
        path: "ci-framework-data/artifacts/parameters"
        state: directory

    - name: Ensure /etc/ci/env is created
      become: true
      ansible.builtin.file:
        path: /etc/ci/env
        state: directory
        mode: "0755"

    - name: Create crc_ci_bootstrap_networks_out fact
      vars:
        net_config_list: |-
          {{
            network_data.results |
            map(attribute='content') |
            map('b64decode') |
            map('from_yaml')
          }}
      ansible.builtin.set_fact:
        crc_ci_bootstrap_networks_out: >-
          {{
            crc_ci_bootstrap_networks_out |
            default({}) |
            combine(item)
          }}
      loop: "{{ net_config_list | map(attribute='crc_ci_bootstrap_networks_out') }}"

    - name: Inject generated networking-info.yml file on controller
      become: true
      ansible.builtin.copy:
        dest: "/etc/ci/env/networking-info.yml"
        content: >-
          {{
            {'crc_ci_bootstrap_networks_out': crc_ci_bootstrap_networks_out} |
            to_nice_yaml
          }}
        mode: "0644"

    - name: CI reproducer dedicated tasks
      tags:
        - bootstrap
      when:
        - cifmw_job_uri is defined
      block:
        - name: Copy environment files to controller node
          ansible.builtin.copy:
            src: "{{ _reproducer_basedir }}/parameters/"
            dest: "./{{ job_id }}-params"

        - name: Inject reproducer dedicated parameter file
          ansible.builtin.template:
            src: "reproducer_params.yml.j2"
            dest: "./{{ job_id }}-params/reproducer_params.yml"

        - name: Generate CI job playbook
          ansible.builtin.template:
            dest: "src/github.com/openstack-k8s-operators/ci-framework/{{ job_id }}_play.yml"
            src: "play.yml.j2"

        - name: Push extracted network data on controller-0
          ansible.builtin.copy:
            dest: zuul-network-data.yml
            content: "{{ {'job_network': ci_job_networking} | to_nice_yaml}}"

    - name: Install collections
      tags:
        - bootstrap
      ansible.builtin.command:
        chdir: "src/github.com/openstack-k8s-operators/ci-framework"
        cmd: ansible-galaxy collection install -r requirements.yml

    - name: Build job inventory for hook usage
      tags:
        - bootstrap
      ansible.builtin.shell:
        cmd: >-
          cat reproducer-inventory/* >
          ci-framework-data/artifacts/zuul_inventory.yml
        creates: ci-framework-data/artifacts/zuul_inventory.yml

    - name: Push pre-CI job playbook
      tags:
        - bootstrap
      ansible.builtin.copy:
        dest: "src/github.com/openstack-k8s-operators/ci-framework/pre-ci-play.yml"
        src: "pre-ci-play.yml"


    - name: Check for ansible logs file and rotate it
      tags:
        - always
      ansible.builtin.include_tasks: rotate_log.yml
      loop:
        - "ansible.log"
        - "ansible-pre-ci.log"
        - "ansible-content-provider-bootstrap.log"

    - name: Check for old CI job log to rotate
      when:
        - cifmw_job_uri is defined
      tags:
        - always
      vars:
        item: "ansible-{{ job_id }}.log"
      ansible.builtin.include_tasks: rotate_log.yml

    - name: Run pre-ci-play
      tags:
        - bootstrap
      environment:
        ANSIBLE_LOG_PATH: "~/ansible-pre-ci.log"
        ANSIBLE_HOST_KEY_CHECKING: "false"
      ansible.builtin.command:
        chdir: "src/github.com/openstack-k8s-operators/ci-framework/"
        cmd: >-
          ansible-playbook
          -i ~/ci-framework-data/artifacts/zuul_inventory.yml
          pre-ci-play.yml
