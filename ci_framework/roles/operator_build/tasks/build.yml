---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: "{{ operator.name }} - Set default api path"
  ansible.builtin.set_fact:
    operator_api_path: "github.com/{{ cifmw_operator_build_org }}/{{ operator.name }}/api"

- name: "{{ operator.name }} - Update the go.mod file in meta operator for provided PR_SHA"
  ansible.builtin.shell: |
    go mod edit -replace {{ operator_api_path }}=github.com/{{ operator.pr_owner }}/api@{{ operator.pr_sha }}
    go mod tidy
    if [ -d ./apis ]; then
      pushd ./apis/
      go mod edit -replace {{ operator_api_path }}=github.com/{{ operator.pr_owner }}/api@{{ operator.pr_sha }}
      go mod tidy
      popd
    fi
  args:
    chdir: "{{ cifmw_operator_build_meta_src }}"
  when:
    - cifmw_operator_build_meta_build
    - operator.name != cifmw_operator_build_meta_name
    - operator.pr_owner is defined
    - operator.pr_sha is defined

- name: "{{ operator.name }} - Get latest commit when no PR is provided"
  ansible.builtin.command:
    cmd: git show-ref --head --hash head
    chdir: "{{ operator.src }}"
  register: git_head_out

- name: "{{ operator.name }} - Set pr_sha to be used as image tag"
  ansible.builtin.set_fact:
    pr_sha: "{{ operator.pr_sha | default(git_head_out.stdout | trim) }}"

- name: "{{ operator.name }} - Update the go.mod file using latest commit if no PR is provided"
  ansible.builtin.shell: |
    go mod edit -replace {{ operator_api_path }}={{ operator_api_path }}@{{ pr_sha }}
    go mod tidy
    if [ -d ./apis ]; then
      pushd ./apis/
      go mod edit -replace {{ operator_api_path }}={{ operator_api_path }}@{{ pr_sha }}
      go mod tidy
      popd
    fi
  args:
    chdir: "{{ cifmw_operator_build_meta_src }}"
  when:
    - cifmw_operator_build_meta_build
    - operator.name != cifmw_operator_build_meta_name
    - operator.pr_owner is not defined

- name: Get container image
  block:
    - name: "{{ operator.name }} - Get golang container image"
      containers.podman.podman_image:
        name: "{{ cifmw_operator_build_golang_ct }}"
        pull: true
  rescue:
    - name: "{{ operator.name }} - Get alternative golang container image"
      containers.podman.podman_image:
        name: "{{ cifmw_operator_build_golang_alt_ct }}"
        pull: true
    - name: Override image
      ansible.builtin.set_fact:
        cifmw_operator_build_golang_ct: "{{ cifmw_operator_build_golang_alt_ct }}"


- name: "{{ operator.name }} - Set operator image tag"
  ansible.builtin.set_fact:
    operator_tag: "{{ pr_sha }}"
    operator_registry_prefix: "{{ cifmw_operator_build_push_registry }}/{{ cifmw_operator_build_push_org }}/{{ operator.name }}"
    cacheable: true

- name: "{{ operator.name }} - Set operator image names"
  ansible.builtin.set_fact:
    operator_img: "{{ operator_registry_prefix }}:{{ operator_tag }}"
    operator_img_bundle: "{{ operator_registry_prefix }}-bundle:{{ operator_tag }}"
    operator_img_storage_bundle: "{{ operator_registry_prefix }}-storage-bundle:{{ operator_tag }}"
    operator_img_catalog: "{{ operator_registry_prefix }}-index:{{ operator_tag }}"
    operator_bundles: "{{ cifmw_operator_build_extra_bundles | default([]) }}"
    cacheable: true

- name: "{{ operator.name }} - Set operator build output"
  ansible.builtin.set_fact:
      cifmw_operator_build_output: >-
        {{ cifmw_operator_build_output|combine({'operators': { operator.name: {
          'git_commit_hash': pr_sha,
          'git_src_dir': operator.src,
          'image': operator_img,
          'image_bundle': operator_img_bundle,
          'image_storage_bundle': operator_img_storage_bundle,
          'image_catalog': operator_img_catalog,
        }}}, recursive=True)}}

- name: "{{ operator.name }} - Call manifests"
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: manifests

- name: "{{ operator.name }} - Call docker-build"
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: docker-build
    params:
      IMG: "{{ operator_img }}"

- name: "{{ operator.name }} - Call docker-push"
  when:
    - cifmw_operator_build_push_ct|bool
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: docker-push
    params:
      IMG: "{{ operator_img }}"
  register: op_push_result
  until: op_push_result.failed is false
  retries: 5
  delay: 10

- name: "{{ operator.name }} - Call bundle"
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: bundle
    params:
      IMG: "{{ operator_img }}"
      IMAGENAMESPACE: "{{ cifmw_operator_build_push_org }}"
      IMAGEREGISTRY: "{{ cifmw_operator_build_push_registry }}"
      IMAGEBASE: "{{ operator.image_base | default('') }}"
      LOCAL_REGISTRY: "{{ cifmw_operator_build_local_registry | default ('') }}"

- name: "{{ operator.name }} - Builds storage-bundle for meta-operator"
  when:
    - operator.name == cifmw_operator_build_meta_name
  block:
    - name: Call dep-bundle-build-push for meta-operator only
      register: dep_bundle_build_push_result
      until: dep_bundle_build_push_result.failed is false
      retries: 5
      delay: 10
      ci_make:
        dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
        chdir: "{{ operator.src }}"
        output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
        target: dep-bundle-build-push
        params:
          IMG: "{{ operator_img }}"
          BUNDLE_STORAGE_IMG: "{{ operator_img_storage_bundle }}"
          IMAGENAMESPACE: "{{ cifmw_operator_build_push_org }}"
          IMAGEREGISTRY: "{{ cifmw_operator_build_push_registry }}"
          IMAGEBASE: "{{ operator.image_base | default('') }}"
          LOCAL_REGISTRY: "{{ cifmw_operator_build_local_registry | default ('') }}"

    - name: Add bundle to bundle list
      set_fact:
        operator_bundles: "{{ operator_bundles + [operator_img_storage_bundle] }}"

- name: "{{ operator.name }} - Call bundle-build"
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: bundle-build
    params:
      IMG: "{{ operator_img }}"
      BUNDLE_IMG: "{{ operator_img_bundle }}"
      BUNDLE_STORAGE_IMG: "{{ operator_img_storage_bundle }}"
      IMAGENAMESPACE: "{{ cifmw_operator_build_push_org }}"
      IMAGEREGISTRY: "{{ cifmw_operator_build_push_registry }}"
      IMAGEBASE: "{{ operator.image_base | default('') }}"
      LOCAL_REGISTRY: "{{ cifmw_operator_build_local_registry | default ('') }}"

- name: "{{ operator.name }} - Add bundle to bundle list"
  set_fact:
    operator_bundles: "{{ operator_bundles + [operator_img_bundle] }}"

- name: "{{ operator.name }} - Push bundle image"
  when:
    - cifmw_operator_build_push_ct|bool
  containers.podman.podman_image:
    name: "{{ operator_img_bundle }}"
    pull: false
    push: true
  register: op_bundle_push_result
  until: op_bundle_push_result.failed is false
  retries: 5
  delay: 10

- name: "{{ operator.name }} - Call catalog-build"
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: catalog-build
    params:
      CATALOG_IMG: "{{ operator_img_catalog }}"
      BUNDLE_IMGS: "{{ operator_bundles | join(',')}}"

- name: "{{ operator.name }} - Call catalog-push"
  when:
    - cifmw_operator_build_push_ct|bool
  ci_make:
    dry_run: "{{ cifmw_operator_build_dryrun|bool }}"
    chdir: "{{ operator.src }}"
    output_dir: "{{ cifmw_operator_build_basedir }}/artifacts"
    target: catalog-push
    params:
      CATALOG_IMG: "{{ operator_img_catalog }}"
  register: result
  until: result.failed is false
  retries: 5
  delay: 10
