---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Claims a cluster from a the provided pool
- name: Claim an OpenShift Cluster
  vars:
    claim_name: "{{ cifmw_hive_openstack_claim_name }}"
    cluster_pool: "{{ cifmw_hive_openstack_pool_name }}"
    rtn_kube: "{{ cifmw_hive_artifacts_dir }}"
    life_time: "{{ cifmw_hive_lifetime | default(false) }}"
    namespace: "{{ cifmw_hive_namespace }}"

  block:
    - name: Check if ClusterPool exists
      environment:
        KUBECONFIG: "{{ kubeconfig | default(cifmw_hive_kubeconfig) }}"
      ansible.builtin.shell:
        cmd: "oc get ClusterPool {{ cluster_pool }} -n {{ namespace }}"
      when: not cifmw_hive_dry_run

    - name: Creating the cluster claim
      environment:
        KUBECONFIG: "{{ kubeconfig | default(cifmw_hive_kubeconfig) }}"
      ansible.builtin.include_tasks:
        file: oc_apply.yml
      vars:
        desc: "cluster-claim"
        destFile: "cluster_claim.yml"
        templateFile: "templates/claim.yml.j2"
        endTime: "{{ cifmw_hive_openstack_claim_life_time }}"
    - name: Post OCP cluster claim initialization
      when: not cifmw_hive_dry_run
      block:
        - name: Wait for the claim to be successful
          ansible.builtin.shell:
            cmd: "oc wait --for=condition=Pending=False clusterclaim/{{ claim_name }} --timeout {{ cifmw_hive_openstack_claim_timeout }}"
          async: 3600
          poll: 30
        - name: Gathering the namespace of created cluster claim
          ansible.builtin.shell:
            cmd: "oc get clusterclaim {{ claim_name }} -o jsonpath='{ .spec.namespace }'"
          register: ns
        - name: Gather the kube config reference
          ansible.builtin.shell:
            cmd: "oc get clusterdeployment -n {{ ns.stdout }} {{ ns.stdout }} -o jsonpath='{ .spec.clusterMetadata.adminKubeconfigSecretRef.name }' "
          register: kube_ref
        - name: Extracting the kubeconfig to {{ rtn_kube }}
          ansible.builtin.shell:
            cmd: "oc extract -n {{ ns.stdout }} secret/{{ kube_ref.stdout }} --to={{ rtn_kube }} --confirm"
      rescue:
        - name: Describe the cluster claim
          ansible.builtin.command:
            cmd: "oc describe clusterclaim {{ claim_name }}"
          register: result
        - name: Logging of cluster claim events
          ansible.builtin.debug:
            msg: "{{ result.stdout }}"
        - name: Claim removal on event of failure / timeout
          ansible.builtin.command:
            cmd: "oc delete clusterclaim {{ claim_name }}"
