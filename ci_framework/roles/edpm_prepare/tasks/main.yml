---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set install_yamls Makefile environment variables
  tags:
    - always
  vars:
    operators_build_output: "{{ (cifmw_operator_build_output | default({'operators':{}})).operators }}"
  ansible.builtin.set_fact:
    cifmw_edpm_prepare_common_env: >-
      {{
        cifmw_install_yamls_environment |
        combine({'PATH': cifmw_path}) |
        combine(cifmw_edpm_prepare_extra_vars | default({}))
      }}
    cifmw_edpm_prepare_make_openstack_env: |
      {% if cifmw_operator_build_meta_name is defined and cifmw_operator_build_meta_name in operators_build_output %}
      OPENSTACK_IMG: {{ operators_build_output[cifmw_operator_build_meta_name].image_catalog }}
      {% endif %}
    cifmw_edpm_prepare_make_openstack_deploy_prep_env: |
      CLEANUP_DIR_CMD: "true"
      {% if cifmw_operator_build_meta_name is defined and cifmw_operator_build_meta_name in operators_build_output %}
      OPENSTACK_BRANCH: ""
      GIT_CLONE_OPTS: "-l"
      OPENSTACK_REPO: {{ operators_build_output[cifmw_operator_build_meta_name].git_src_dir }}
      {% endif %}
    cifmw_edpm_prepare_operators_build_output: "{{ operators_build_output }}"

- name: Prepare storage in CRC
  when:
    - not cifmw_edpm_prepare_skip_crc_storage_creation | bool
  vars:
    make_crc_storage_env: "{{ cifmw_edpm_prepare_common_env }}"
    make_crc_storage_dryrun: "{{ cifmw_edpm_prepare_dry_run }}"
    make_crc_storage_retries: 10
    make_crc_storage_delay: 2
    make_crc_storage_until: "make_crc_storage_status is not failed"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_crc_storage'

- name: Prepare inputs
  vars:
    make_input_env: "{{ cifmw_edpm_prepare_common_env }}"
    make_input_dryrun: "{{ cifmw_edpm_prepare_dry_run }}"
    make_input_retries: 10
    make_input_delay: 5
    make_input_until: "make_input_status is not failed"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_input'

- name: OpenStack meta-operator installation
  vars:
    make_openstack_env: "{{ cifmw_edpm_prepare_common_env |
      combine(cifmw_edpm_prepare_make_openstack_env | from_yaml)}}"
    make_openstack_dryrun: "{{ cifmw_edpm_prepare_dry_run }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_openstack'

- name: Wait for OpenStack control plane to be installed
  when:
    - not cifmw_edpm_prepare_dry_run
  block:
    - name: Wait for OpenStack subscription creation
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc get sub openstack-operator
          --namespace={{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }}
          -o=jsonpath='{.status.installplan.name}'
      until: cifmw_edpm_prepare_wait_installplan_out.rc == 0 and cifmw_edpm_prepare_wait_installplan_out.stdout != ""
      register: cifmw_edpm_prepare_wait_installplan_out
      retries: "{{ cifmw_edpm_prepare_wait_subscription_retries }}"
      delay: 10

    - name: Wait for OpenStack operator to get installed
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc wait InstallPlan {{ cifmw_edpm_prepare_wait_installplan_out.stdout }}
          --namespace={{ cifmw_install_yamls_defaults['OPERATOR_NAMESPACE'] }}
          --for=jsonpath='{.status.phase}'=Complete --timeout=20m

- name: Update OpenStack Services containers Env
  when: cifmw_edpm_prepare_update_os_containers | bool
  ansible.builtin.include_role:
    name: set_openstack_containers

# Prepare and kustomize the OpenStackControlPlane CR
- name: Prepare OpenStack control plane CR
  vars:
    make_openstack_deploy_prep_env: "{{ cifmw_edpm_prepare_common_env |
      combine(cifmw_edpm_prepare_make_openstack_deploy_prep_env | from_yaml)}}"
    make_openstack_deploy_prep_dryrun: "{{ cifmw_edpm_prepare_dry_run }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_openstack_deploy_prep'

- name: Deploy NetConfig
  vars:
    make_netconfig_deploy_env: "{{ cifmw_edpm_prepare_common_env }}"
    make_netconfig_deploy_dryrun: "{{ cifmw_edpm_prepare_dry_run }}"
  ansible.builtin.include_role:
    name: 'install_yamls_makes'
    tasks_from: 'make_netconfig_deploy'

- name: Kustomize and deploy OpenStackControlPlane
  vars:
    cifmw_edpm_prepare_openstack_cr_path: >-
      {{
        [
          cifmw_edpm_prepare_manifests_dir,
          cifmw_install_yamls_defaults['NAMESPACE'],
          'openstack',
          'cr',
          (cifmw_install_yamls_defaults['OPENSTACK_CTLPLANE'] | basename)
        ] | ansible.builtin.path_join
      }}

  when:
    - not cifmw_edpm_prepare_dry_run | bool
  block:
    - name: Perform kustomizations to the OpenStackControlPlane CR
      vars:
        cifmw_edpm_kustomize_cr_path: "{{ cifmw_edpm_prepare_openstack_cr_path }}"
        cifmw_edpm_kustomize_content: "{{ cifmw_edpm_prepare_openstack_cr_kustomization | default('{}') }}"
      ansible.builtin.include_role:
        name: edpm_kustomize

    - name: Apply the OpenStackControlPlane CR
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      when: not cifmw_edpm_prepare_dry_run
      ci_script:
        output_dir: "{{ cifmw_edpm_prepare_basedir }}/artifacts"
        script: "oc apply -f {{ cifmw_edpm_prepare_openstack_cr_path }}"

    - name: Wait for OpenStack controlplane to be deployed
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc wait OpenStackControlPlane {{ cifmw_edpm_kustomize_last_cr_content.metadata.name }}
          --namespace={{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          --for=condition=ready
          --timeout={{ cifmw_edpm_prepare_timeout }}m

- name: Wait for keystone to be ready
  when: not cifmw_edpm_prepare_dry_run
  block:
    - name: Extract keystone endpoint host
      register: _keystone_endpoint
      environment:
        KUBECONFIG: "{{ cifmw_openshift_kubeconfig }}"
        PATH: "{{ cifmw_path }}"
      ansible.builtin.command:
        cmd: >-
          oc get route keystone-public
          --namespace={{ cifmw_install_yamls_defaults['NAMESPACE'] }}
          -o jsonpath='{ .spec.host }'

    - name: Wait for keystone endpoint to exist in DNS
      register: _cifmw_edpm_prepare_check_keystone_dns
      vars:
        _keystone_response_codes: [200, 300, 301, 302, 401, 402, 403]
      ansible.builtin.uri:
        url: "http://{{ _keystone_endpoint.stdout | trim }}"
        status_code: "{{ _keystone_response_codes }}"  # noqa: args[module]
      retries: 20
      delay: 10
      until:
        - _cifmw_edpm_prepare_check_keystone_dns.status is defined
        - _cifmw_edpm_prepare_check_keystone_dns.status in _keystone_response_codes
