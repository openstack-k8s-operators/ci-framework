---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# This task requires
#   vm_name         Domain name to which the interface needs to be attached.
#   network
#     name          Name of the network bridge
#     cidr          network notation
#     mtu           MTU applied on the interface.
#     static_ip     boolean if static address is required.

- name: "Check ports attached to the domain {{ vm_name }}"
  block:
    - name: Dump domain xml
      register: _domain_xml
      community.libvirt.virt:
        command: "get_xml"
        name: "{{ vm_name }}"

    - name: Extract networks from XML
      register: _extracted_xml
      community.general.xml:
        xmlstring: "{{ _domain_xml.get_xml }}"
        xpath: "/domain/devices/interface/source"
        content: "attribute"

- name: Attach new port if needed
  vars:
    _net_name: >-
      {{
        (cifmw_libvirt_manager_net_prefix_add | bool) |
        ternary('cifmw-' + network.name, network.name)
      }}
    _attached_nets: >-
      {{
        _extracted_xml.matches |
        selectattr('source.bridge', 'equalto', _net_name)
      }}
  when:
    - _attached_nets | length == 0
  block:
    - name: "Generate a random MAC address for {{ vm_name }}"
      ansible.builtin.set_fact:
        _lm_mac_address: "{{ '0A:02' | community.general.random_mac }}"

    - name: "Reserve an IP address for {{ vm_name }}"
      when: network.static_ip | bool
      vars:
        mac_address: "{{ _lm_mac_address }}"
      ansible.builtin.import_tasks: reserve_ip.yml

    - name: "Attach interface {{ network.name }} on {{ vm_name }}"  # noqa: name[template]
      when: _lm_mac_address is defined
      ansible.builtin.command:
        cmd: >-
          virsh -c qemu:///system
          attach-interface "{{ vm_name }}"
          --source "{{ _net_name }}"
          --type bridge
          --mac "{{ _lm_mac_address }}"
          --model virtio
          --config
          --persistent
