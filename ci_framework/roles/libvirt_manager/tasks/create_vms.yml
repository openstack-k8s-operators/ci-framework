---
- name: "Create VM overlays for {{ vm_type }}"
  become: true
  vars:
    _base_img_name: >-
      {{
        (vm_data.value.image_local_dir,
         vm_data.value.disk_file_name) |
         path_join
      }}
    _img: >-
      {{
        (vm_type is match('.*ocp.*')) |
        ternary(_base_img_name ~ "_" ~ vm_id ~ ".qcow2",
                _base_img_name)
      }}
  ansible.builtin.command:
    cmd: >-
      qemu-img create
      -o backing_file={{ _img }},backing_fmt=qcow2
      -f qcow2
      "{{ vm_type }}-{{ vm_id }}.qcow2"
      "{{ vm_data.value.disksize|default ('40') }}G"
    creates: "{{ vm_type }}-{{ vm_id }}.qcow2"
    chdir: "{{ cifmw_libvirt_manager_basedir }}/workload"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Ensure file ownership and rights
  become: true
  ansible.builtin.file:
    path: "{{ cifmw_libvirt_manager_basedir }}/workload/{{ vm_type }}-{{ vm_id }}.qcow2"
    group: "qemu"
    mode: "0664"
    owner: "{{ ansible_user_id }}"
    state: file
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Manipulate XMLs and load them if provided
  when:
    vm_data.value.xml_paths is defined
  block:
    - name: "Set disk path for {{ vm_type }}"
      community.general.xml:
        path: "{{ _xml }}"
        xpath: "/domain/devices/disk/source"
        attribute: "file"
        value: >-
          {{ (cifmw_libvirt_manager_basedir,
              'workload',
              vm_type ~ '-' ~ _xml_id ~ '.qcow2') |
              path_join
          }}
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        loop_var: "_xml"
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"

    - name: "Remove document description header for type ${{ vm_type }}"
      ansible.builtin.replace:
        path: "{{ _xml }}"
        regexp: "<\\?xml version='1.0' encoding='UTF-8'\\?>\n"
        replace: ""
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        loop_var: "_xml"
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"
    - name: "Load VM XMLs for type {{ vm_type }}"
      register: _vm_xmls
      ansible.builtin.slurp:
        path: "{{ item }}"
      loop: "{{ vm_data.value.xml_paths }}"
      loop_control:
        index_var: "_xml_id"
        label: "{{ vm_type }}-{{ _xml_id }}"

    - name: "Define VMs with custom XML for type {{ vm_type }}"
      community.libvirt.virt:
        command: define
        xml: "{{ _xml['content'] | b64decode }}"
        uri: "qemu:///system"
      loop: "{{ _vm_xmls.results }}"
      loop_control:
        index_var: vm_id
        label: "{{ vm_type }}-{{ vm_id }}"
        loop_var: '_xml'


- name: "Define VMs with default template for type {{ vm_type }}"
  when:
    - vm_data.value.xml_paths is undefined
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'domain.xml.j2') }}"
    uri: "qemu:///system"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Fetch per-vm ports
  register: _vm_ports
  ansible.builtin.command:
    cmd: >-
      virsh -c qemu:///system -q
      domiflist cifmw-{{ vm_type }}-{{ vm_id }}
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: Format port list to something more consumable
  vars:
    _fixed_net_name: >-
      {{
        _fixed_ip_nets | dict2items |
        map(attribute='key') |
        map('regex_replace', '^', 'cifmw-')
      }}
    _vals: >-
      {{
        item.stdout_lines |
        product([' ' ~ vm_type ~ '-' ~ index]) |
        map('join') |
        map('split')
      }}
    _macs: >-
      {{
        _vals |
        map('zip', ['nic', 'type', 'network', 'driver', 'mac', 'host' ]) |
        map('map', 'reverse') |
        map('community.general.dict')
      }}
  ansible.builtin.set_fact:
    macs: >-
      {{
        (macs | default([]) + _macs) |
        selectattr('network', 'in', _fixed_net_name)
      }}
    public_net_nics: >-
      {{
        (public_net_nics | default([]) + _macs) |
        selectattr('network', 'match', '^(cifmw-)?' ~ cifmw_libvirt_manager_pub_net) |
        selectattr('host', 'match', '.*' ~ vm_type ~ '.*')
      }}
  loop: "{{ _vm_ports.results }}"
  loop_control:
    index_var: index
    label: "{{ vm_type }}-{{ index }}"

- name: Fix IPs for selected networks and VMs
  vars:
    vm_name: "cifmw-{{ mac_node.host }}"
    net_name: "{{ mac_node.network | replace('cifmw-', '') }}"
    network:
      cidr: "{{ _fixed_ip_nets[net_name]['range'] }}"
      name: "{{ net_name }}"
    mac_address: "{{ mac_node.mac }}"
  ansible.builtin.include_tasks: reserve_ip.yml
  loop: "{{ macs }}"
  loop_control:
    loop_var: mac_node
    label: "{{ mac_node.host }}"

- name: "Start VMs for type {{ vm_type }}"
  community.libvirt.virt:
    state: running
    name: "cifmw-{{ vm_type }}-{{ vm_id }}"
    uri: "qemu:///system"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"

- name: "Grab IPs for nodes type {{ vm_type }}"  # noqa: risky-shell-pipe
  register: vm_ips
  ansible.builtin.shell:
    cmd: >-
      virsh -c qemu:///system -q
      domifaddr --source arp
      cifmw-{{ nic.host }} | grep "{{ nic.mac }}"
  loop: "{{ public_net_nics }}"
  loop_control:
    loop_var: nic
    label: "{{ nic.host }}"
  retries: 20
  delay: 5
  until:
    - vm_ips.rc == 0
    - vm_ips.stdout != ''

- name: "(localhost) Inject ssh jumpers for {{ vm_type }}"
  when:
    - inventory_hostname != 'localhost'
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.blockinfile:
    create: true
    path: "~/.ssh/config"
    marker: "## {mark} {{ vm_ip.nic.host }}"
    block: |-
      Host {{ vm_ip.nic.host }} cifmw-{{ vm_ip.nic.host }} {{ extracted_ip }}
        ProxyJump {{ ansible_user | default(lookup('env', 'USER')) }}@{{ inventory_hostname }}
        Hostname {{ extracted_ip }}
        User zuul
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: "({{ inventory_hostname }}) Inject ssh jumpers for {{ vm_type }}"  # noqa: name[template]
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.blockinfile:
    create: true
    path: "~/.ssh/config"
    marker: "## {mark} {{ vm_ip.nic.host }}"
    block: |-
      Host {{ vm_ip.nic.host }} cifmw-{{ vm_ip.nic.host }} {{ extracted_ip }}
        Hostname {{ extracted_ip }}
        User zuul
        IdentityFile ~/.ssh/cifmw_reproducer_key
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: Inject nodes in the ansible inventory
  delegate_to: localhost
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.add_host:
    name: "{{ vm_ip.nic.host }}"
    groups: "{{ vm_type }}"
    ansible_host: "{{ extracted_ip }}"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ vm_ip.nic.host }}"

- name: "Create group inventory for {{ vm_type }}"
  vars:
    hosts: "{{ vm_ips.results }}"
    admin_user: "{{ vm_data.value.admin_user | default('zuul') }}"
  ansible.builtin.template:
    dest: "{{ cifmw_libvirt_manager_basedir }}/reproducer-inventory/{{ vm_type }}-group.yml"
    src: inventory.yml.j2

- name: "Wait for SSH on VMs type {{ vm_type }}"
  vars:
    extracted_ip: "{{ (vm_ip.stdout.split())[3] | ansible.utils.ipaddr('address') }}"
  ansible.builtin.wait_for:
    host: "{{ extracted_ip }}"
    port: 22
    delay: 5
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: vm_ip
    label: "{{ extracted_ip }}"

- name: "Configure ssh access on type {{ vm_type }}"
  when:
    - vm_type is not match('^crc.*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ vm_data.value.admin_user | default('root') }}"
  ansible.posix.authorized_key:
    user: "{{ vm_data.value.admin_user | default('root') }}"
    state: present
    key: "{{ pub_key }}"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Configure VMs type {{ vm_type }}"
  when:
    - vm_type is not match('^(crc|ocp).*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ vm_data.value.admin_user | default('root') }}"
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: |-
      test -d /home/zuul && exit 0;
      set -xe -o pipefail;
      echo "{{ vm_ip.nic.host }}" | sudo tee /etc/hostname;
      sudo hostname -F /etc/hostname;
      sudo useradd -m -d /home/zuul zuul;
      echo "zuul ALL=(ALL)  NOPASSWD: ALL" | sudo tee /etc/sudoers.d/zuul;
      sudo -u zuul mkdir -p /home/zuul/.ssh /home/zuul/src/github.com/openstack-k8s-operators;
      sudo cp ${HOME}/.ssh/authorized_keys /home/zuul/.ssh/;
      chown -R zuul: /home/zuul/.ssh;
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Inject private key on hosts {{ vm_type }}"
  when:
    - vm_type is match('^controller.*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ vm_data.value.admin_user | default('root') }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_ed25519"
    content: "{{ priv_key }}"
    owner: zuul
    group: zuul
    mode: "0400"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Inject public key on hosts {{ vm_type }}"
  when:
    - vm_type is match('^controller.*$')
  delegate_to: "{{ vm_ip.nic.host }}"
  remote_user: "{{ vm_data.value.admin_user | default('root') }}"
  ansible.builtin.copy:
    dest: "/home/zuul/.ssh/id_ed25519.pub"
    content: "{{ pub_key }}"
    owner: zuul
    group: zuul
    mode: "0444"
  loop: "{{ vm_ips.results }}"
  loop_control:
    loop_var: "vm_ip"
    label: "{{ vm_ip.nic.host }}"

- name: "Inject network configuration file on {{ vm_type }}"
  ansible.builtin.template:
    dest: "{{ cifmw_libvirt_manager_basedir }}/reproducer-network-env/{{ vm_type }}-{{ vm_id }}.yml"
    src: >-
      {{
        (ci_job_networking is defined)
        | ternary('ci-network-data.yml.j2', 'network-data.yml.j2')
      }}
    mode: "0644"
  loop: "{{ range(0, vm_data.value.amount | default(1) | int) }}"
  loop_control:
    index_var: vm_id
    label: "{{ vm_type }}-{{ vm_id }}"
