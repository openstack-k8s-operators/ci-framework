---
- name: Create needed worload directory
  ansible.builtin.file:
    path: "{{ cifmw_libvirt_manager_basedir }}/{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - workload
    - reproducer-inventory
    - reproducer-network-env

- name: Allow QEMU on workload directory
  become: true
  ansible.posix.acl:
    path: "{{ cifmw_libvirt_manager_basedir }}/workload"
    entity: "qemu"
    etype: "user"
    permissions: rwx
    state: present

- name: Chose right parameter for layout definition
  ansible.builtin.set_fact:
    cacheable: true
    _layout: "{{ cifmw_libvirt_manager_configuration_gen | default(cifmw_libvirt_manager_configuration) }}"

- name: Manage networks if needed
  when:
    - _layout.networks is defined
  ansible.builtin.import_tasks: create_networks.yml

- name: Ensure images are present
  when:
    - item.key is not match('.*(ocp|crc).*')
  vars:
    image_data: "{{ item.value }}"
  ansible.builtin.include_tasks:
    file: get_image.yml
  loop: "{{ _layout.vms | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create temporary ssh keypair
  delegate_facts: true
  ansible.builtin.command:
    cmd: >-
      ssh-keygen -t ed25519
      -f {{ ansible_user_dir }}/.ssh/cifmw_reproducer_key -P '' -q
    creates: "{{ ansible_user_dir }}/.ssh/cifmw_reproducer_key"

- name: Slurp public key for later use
  delegate_facts: true
  register: pub_ssh_key
  ansible.builtin.slurp:
    path: "{{ ansible_user_dir }}/.ssh/cifmw_reproducer_key.pub"

- name: Slurp private key for later use
  delegate_facts: true
  register: priv_ssh_key
  ansible.builtin.slurp:
    path: "{{ ansible_user_dir }}/.ssh/cifmw_reproducer_key"

- name: Inject cifmw_reproducer_key.pub in hypervisor authorized_keys
  ansible.posix.authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ pub_ssh_key['content'] | b64decode }}"

- name: Prepare disk image with SSH and growing volume  # noqa: risky-shell-pipe
  when:
    - item.key is not match('^(crc|ocp).*$')
  vars:
    _admin_user: "{{ item.value.admin_user | default('root') }}"
    _root_part: "{{ item.value.root_part_id | default('1') }}"
  ansible.builtin.shell:
    cmd: >-
      virt-sysprep -a "{{ item.value.image_local_dir }}/{{ item.value.disk_file_name }}"
      --selinux-relabel
      --firstboot-command "growpart /dev/sda {{ _root_part }}"
      --firstboot-command "xfs_growfs /"
      --root-password "password:{{ item.value.password | default('fooBar') }}"
      --ssh-inject {{ _admin_user }}:file:{{ ansible_user_dir }}/.ssh/authorized_keys
      | tee -a {{ item.value.image_local_dir }}/{{ item.value.disk_file_name }}.log
    creates: "{{ item.value.image_local_dir }}/{{ item.value.disk_file_name }}.log"
  loop: "{{ _layout.vms | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create fact holding network data for VMs
  ansible.builtin.set_fact:
    cacheable: true
    cifmw_reproducer_network_data: {}
    _fixed_ip_nets: >-
      {{
        cifmw_libvirt_manager_networks | default({}) |
        dict2items |
        selectattr('value.static_ip', 'defined') |
        selectattr('value.static_ip', '==', true) |
        items2dict
      }}

- name: Create and run VMs
  vars:
    vm_type: "{{ vm_data.key }}"
    pub_key: "{{ pub_ssh_key.content | b64decode }}"
    priv_key: "{{ priv_ssh_key.content | b64decode }}"
    _admin_user: "{{ item.value.admin_user | default('root') }}"
  ansible.builtin.include_tasks:
    file: create_vms.yml
  loop: "{{ _layout.vms | dict2items }}"
  loop_control:
    label: "{{ vm_data.key }}"
    loop_var: vm_data

- name: Create "all" group inventory file
  ansible.builtin.template:
    dest: "{{ cifmw_libvirt_manager_basedir }}/reproducer-inventory/all-group.yml"
    src: "all-inventory.yml.j2"

- name: Ensure we get proper access to CRC
  when:
    - _layout.vms.crc is defined
  vars:
    crc_private_key: "{{ _layout.vms.crc.image_local_dir }}/id_ecdsa"
  block:
    - name: Copy authorized_keys
      ansible.builtin.command:
        cmd: >-
          scp -i {{ crc_private_key }}
          ~/.ssh/authorized_keys
          core@crc-0:.ssh/authorized_keys.d/custom

    - name: Enable root access on CRC
      ansible.builtin.shell:
        cmd: |-
          set -xe -o pipefail
          cat << EOF | ssh -i {{ crc_private_key }} core@crc-0
            sudo sed -i 's/PermitRootLogin no/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config.d/40-rhcos-defaults.conf;
            sudo systemctl restart sshd;
            sudo cp -r /home/core/.ssh/authorized_keys.d /root/.ssh;
            sudo chown -R root: /root/.ssh;
          EOF
