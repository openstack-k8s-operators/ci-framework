{#
This file is mostly used in the validated-architecture context.
With that VA, we get an OCP cluster deployed, and libvirt_manager
only takes care of the actual compute (and ansible-controller).

Networks are managed by devscripts role (which deploys OCP), so we have to
mostly generate all the things on our own.

For now, we'll hardcode most of the things such as subnet and some IPs
#}
{% set ns = namespace(
    ip4='',
    gw4='',
    iface=cifmw_libvirt_manager_private_nic,
    config_nm=false,
    ip_suffix=0)
-%}
{% if vm_type == 'controller' -%}
{%   set ns.ip4 = cifmw_libvirt_manager_ctl_ip4 -%}
{%   set ns.gw4 = cifmw_libvirt_manager_ctl_gw4 -%}
{% else -%}
{%   set ns.ip_suffix = 100+vm_id -%}
{%   set ns.ip4 = '192.168.122.0/24' | ansible.utils.ipmath(ns.ip_suffix) -%}
{%   set ns.gw4 = cifmw_libvirt_manager_ctl_gw4 -%}
{% endif -%}
{% set default_mtu = 1500 -%}
{% set vlan_mtu = default_mtu - 4 -%}
crc_ci_bootstrap_networks_out:
  {{ vm_type }}-{{ vm_id }}:
    default:
      iface: {{ ns.iface }}
      connection: ci-private-network
      ip4: {{ ns.ip4 }}/24
      gw4: {{ ns.gw4 }}
      dns4: {{ cifmw_libvirt_manager_dns_servers }}
      mtu: {{ default_mtu }}
{% if vm_type != 'controller' %}
{% for networking in cifmw_libvirt_manager_networks | dict2items %}
{%   if networking.value.vlan is defined %}
    {{ networking.key }}:
      iface: {{ ns.iface }}.{{ networking.value.vlan }}
      connection: {{ networking.key }}
      vlan: {{ networking.value.vlan }}
      parent_iface: {{ ns.iface }}
      ip4: {{ networking.value.range | ansible.utils.ipaddr('net') | ansible.utils.ipmath(ns.ip_suffix) }}/24
      config_nm: {{ ns.config_nm }}
      mtu: {{ networking.value.mtu | default(vlan_mtu) }}
{%    endif %}
{%  endfor %}
{% endif %}
