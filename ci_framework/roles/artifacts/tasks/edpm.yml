---
- name: Gather services
  when:
    - not ansible_facts.services is defined
  ansible.builtin.service_facts:

- name: Check for virtualized compute
  when:
    - "'libvirtd' in ansible_facts.services"
  block:
    - name: List all of the existing virtual machines
      register: vms_list
      community.libvirt.virt:
        command: list_vms
        uri: "qemu:///system"

    - name: Filter out edpm vm
      ansible.builtin.set_fact:
        ssh_key_file: "{{ cifmw_artifacts_basedir }}/artifacts/edpm/ansibleee-ssh-key-id_rsa"
        ssh_user: root
        edpm_vms: >-
          {%- set listing=vms_list.list_vms | select('match', '^edpm-.*$') -%}
          {%- if listing | length == 1 -%}
          ['192.168.122.100']
          {%- endif -%}

- name: Hit compute nodeset
  when:
    - "'libvirtd' not in ansible_facts.services"
  block:
    - name: Check for CI env directory
      register: network_env_dir
      ansible.builtin.stat:
        path: /etc/ci/env

    - name: Extract data from network env file if available
      when:
        - network_env_dir.stat.exists
      block:
        - name: Load network env file
          ansible.builtin.include_vars:
            dir: /etc/ci/env/

        - name: Extract Compute from zuul mapping if any
          when:
            - crc_ci_bootstrap_networks_out is defined
            - cifmw_edpm_deploy_extra_vars is defined
          ansible.builtin.set_fact:
            ssh_key_file: "{{ cifmw_edpm_deploy_extra_vars.SSH_KEY_FILE }}"
            ssh_user: "{{ hostvars['compute-0'].ansible_user | default('zuul') }}"
            edpm_vms: >-
              {{
                crc_ci_bootstrap_networks_out | dict2items |
                selectattr('key', 'match', '^compute.*$') |
                map(attribute='value.default.ip') |
                map('regex_search', '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}') | default([])
              }}

- name: Generate logs on EDPM vms
  when:
    - edpm_vms is defined
    - edpm_vms | length > 0
  block:
    - name: Set facts
      ansible.builtin.set_fact:
        cifmw_sosreport_nodes: "{{ edpm_vms }}"
        cifmw_sosreport_nodes_sshkey: "{{ ssh_key_file }}"
        cifmw_sosreport_tmp_dir: "{{ cifmw_artifacts_basedir }}/artifacts"

    - name: Gather logs from EDPM VMs
      ignore_errors: true  # noqa: ignore-errors
      ansible.builtin.import_role:
        name: sosreport
