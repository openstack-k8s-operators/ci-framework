---
- name: Build dataset hook
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Load parameters
      ansible.builtin.include_vars:
        dir: "{{ item }}"
      loop:
        - "{{ cifmw_basedir }}/artifacts/parameters"
        - "/etc/ci/env"
      loop_control:
        label: "{{ item }}"

    - name: Ensure CRC hostname is set
      ansible.builtin.set_fact:
        _crc_hostname: "{{ cifmw_crc_hostname | default('crc') }}"

    - name: Check we have some compute in inventory
      ansible.builtin.set_fact:
        computes_len: "{{ groups['computes'] | default([]) | length }}"

    - name: Ensure that the isolated net was configured for crc
      ansible.builtin.assert:
        that:
          - crc_ci_bootstrap_networks_out is defined
          - crc_ci_bootstrap_networks_out[_crc_hostname] is defined
          - crc_ci_bootstrap_networks_out[_crc_hostname]['default'] is defined

    - name: Ensure we have needed bits for compute when needed
      when:
        - computes_len | int > 0
      ansible.builtin.assert:
        that:
          - "'compute-0' in crc_ci_bootstrap_networks_out"
          - "'default' in crc_ci_bootstrap_networks_out['compute-0']"

    - name: Set facts for further usage within the framework
      ansible.builtin.set_fact:
        cifmw_edpm_prepare_extra_vars:
          NNCP_INTERFACE: "{{ crc_ci_bootstrap_networks_out[_crc_hostname].default.iface }}"
          NNCP_DNS_SERVER: >-
            {{
              crc_ci_bootstrap_networks_out[_crc_hostname].default.ip4 |
              default(crc_ci_bootstrap_networks_out[_crc_hostname].default.ip) |
              replace('/24', '')
            }}
          NETWORK_MTU: "{{ crc_ci_bootstrap_networks_out[_crc_hostname].default.mtu }}"

    - name: Ensure the kustomizations dirs exists
      ansible.builtin.file:
        path: "{{ cifmw_basedir }}/artifacts/manifests/kustomizations/{{ item }}"
        state: directory
      loop:
        - dataplane
        - controlplane

    - name: Create OpenStackControlPlane CR Kustomization
      ansible.builtin.copy:
        dest: "{{ cifmw_basedir }}/artifacts/manifests/kustomizations/controlplane/99-kustomization.yaml"
        content: |-
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          resources:
          namespace: {{ cifmw_install_yamls_defaults.NAMESPACE }}
          patches:
          - target:
              kind: OpenStackControlPlane
            patch: |-
              - op: replace
                path: /spec/dns/template/options
                value: [
                  {
                    "key": "server",
                    "values": [ "192.168.122.10" ]
                  },
                  {
                    "key": "no-negcache",
                    "values": []
                  }
                ]

    - name: Prepare EDPM deploy related facts and keys
      when:
        - computes_len | int > 0
      block:
        - name: Set specific fact for compute accesses
          vars:
            dns_servers: "{{ ((['192.168.122.10'] + ansible_facts['dns']['nameservers']) | unique)[0:2] }}"
            edpm_install_yamls_vars:
              SSH_KEY_FILE: "{{ ansible_user_dir }}/.ssh/id_ed25519"
              DATAPLANE_COMPUTE_IP: >-
                {{
                  crc_ci_bootstrap_networks_out['compute-0'].default.ip4 |
                  default(crc_ci_bootstrap_networks_out['compute-0'].default.ip) |
                  ansible.utils.ipaddr('address')
                }}
              DATAPLANE_SSHD_ALLOWED_RANGES: "['0.0.0.0/0']"
              DATAPLANE_TOTAL_NODES: "{{ computes_len | int }}"
              DATAPLANE_SINGLE_NODE: "{{ (computes_len | int > 1) | ternary('false', 'true') }}"

          ansible.builtin.set_fact:
            cifmw_edpm_deploy_extra_vars: "{{ edpm_install_yamls_vars }}"

        - name: Create EDPM CR Kustomization
          vars:
            dns_servers: "{{ ((['192.168.122.10'] + ansible_facts['dns']['nameservers']) | unique)[0:2] }}"
          ansible.builtin.copy:
            dest: "{{ cifmw_basedir }}/artifacts/manifests/kustomizations/dataplane/99-kustomization.yaml"
            content: |-
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              resources:
              namespace: {{ cifmw_install_yamls_defaults.NAMESPACE }}
              patches:
              - target:
                  kind: OpenStackDataPlaneNodeSet
                patch: |-
                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/neutron_public_interface_name
                    value: "{{ crc_ci_bootstrap_networks_out['compute-0'].default.iface | default('') }}"

                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/ctlplane_mtu
                    value: {{ crc_ci_bootstrap_networks_out['compute-0'].default.mtu | default(1500) }}

              {% if 'tenant' in crc_ci_bootstrap_networks_out['compute-0'] %}
                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/tenant_mtu
                    value: {{ crc_ci_bootstrap_networks_out['compute-0']['tenant'].mtu | default(1500) }}
              {% endif %}

              {% if 'storage' in crc_ci_bootstrap_networks_out['compute-0'] %}
                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/storage_mtu
                    value: {{ crc_ci_bootstrap_networks_out['compute-0']['storage'].mtu | default(1500) }}
              {% endif %}

              {% if 'internal-api' in crc_ci_bootstrap_networks_out['compute-0'] %}
                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/internal_api_mtu
                    value: {{ crc_ci_bootstrap_networks_out['compute-0']['internal-api'].mtu | default(1500) }}
              {% endif %}

              {% for compute_node in groups['computes'] if compute_node != 'compute-0' %}
                  - op: replace
                    path: /spec/nodes/edpm-{{ compute_node }}/ansible/ansibleHost
                    value: >-
                      {{
                        crc_ci_bootstrap_networks_out[compute_node].default.ip4 |
                        default(crc_ci_bootstrap_networks_out[compute_node].default.ip) |
                        ansible.utils.ipaddr('address')
                      }}

                  - op: replace
                    path: /spec/nodes/edpm-{{ compute_node }}/networks/0/fixedIP
                    value: >-
                      {{
                        crc_ci_bootstrap_networks_out[compute_node].default.ip4 |
                        default(crc_ci_bootstrap_networks_out[compute_node].default.ip) |
                        ansible.utils.ipaddr('address')
                      }}
              {% endfor %}

                  - op: add
                    path: /spec/nodeTemplate/ansible/ansibleVars/edpm_os_net_config_mappings
                    value:
                      net_config_data_lookup:
                        edpm-compute:
                          nic2: "{{ crc_ci_bootstrap_networks_out['compute-0'].default.iface | default('ens7') }}"

                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/edpm_network_config_template
                    value: |-
                        {%- raw %}
                        ---
                        {% set mtu_list = [ctlplane_mtu] %}
                        {% for network in role_networks %}
                        {{ mtu_list.append(lookup("vars", networks_lower[network] ~ "_mtu")) }}
                        {%- endfor %}
                        {% set min_viable_mtu = mtu_list | max %}
                        network_config:
                        - type: ovs_bridge
                          name: {{ neutron_physical_bridge_name }}
                          mtu: {{ min_viable_mtu }}
                          use_dhcp: false
                          dns_servers: {{ ctlplane_dns_nameservers }}
                          domain: {{ dns_search_domains }}
                          addresses:
                          - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_subnet_cidr }}
                          members:
                          - type: interface
                            name: nic2
                            mtu: {{ min_viable_mtu }}
                            # force the MAC address of the bridge to this interface
                            primary: true
                        {% for network in role_networks %}
                          - type: vlan
                            mtu: 1496
                            vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
                            addresses:
                            - ip_netmask:
                                {{ lookup("vars", networks_lower[network] ~ "_ip") }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
                            routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
                        {% endfor %}
                        {% endraw %}

                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleUser
                    value: "{{ hostvars['compute-0'].ansible_user | default('zuul') }}"

                  - op: replace
                    path: /spec/nodeTemplate/ansible/ansibleVars/ctlplane_dns_nameservers
                    value:
              {% for dns_server in dns_servers %}
                      - "{{ dns_server }}"
              {% endfor %}

              {% if content_provider_registry_ip is defined %}
                  - op: add
                    path: /spec/nodeTemplate/ansible/ansibleVars/edpm_container_registry_insecure_registries
                    value: ["{{ content_provider_registry_ip }}:5001"]
              {% endif %}


        - name: Ensure we know about the private host keys
          ansible.builtin.shell:
            cmd: |
              ssh-keyscan {{ cifmw_edpm_deploy_extra_vars.DATAPLANE_COMPUTE_IP }} >> ~/.ssh/known_hosts

    - name: Save compute info
      vars:
        file_content:
          cifmw_edpm_deploy_extra_vars: "{{ cifmw_edpm_deploy_extra_vars | default(omit) }}"
          cifmw_edpm_prepare_extra_vars: "{{ cifmw_edpm_prepare_extra_vars }}"
      ansible.builtin.copy:
        dest: "{{ cifmw_basedir }}/artifacts/{{ step }}_{{ hook_name }}.yml"
        content: "{{ file_content | to_nice_yaml }}"
